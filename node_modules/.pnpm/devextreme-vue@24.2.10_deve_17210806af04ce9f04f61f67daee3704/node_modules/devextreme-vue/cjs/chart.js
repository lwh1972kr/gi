/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxLabel = exports.DxImage = exports.DxHoverStyle = exports.DxHorizontalLineLabel = exports.DxHorizontalLine = exports.DxHeight = exports.DxHatching = exports.DxGrid = exports.DxFormat = exports.DxFont = exports.DxExport = exports.DxDragBoxStyle = exports.DxDataPrepareSettings = exports.DxCrosshair = exports.DxConstantLineStyle = exports.DxConstantLineLabel = exports.DxConstantLine = exports.DxConnector = exports.DxCommonSeriesSettingsSelectionStyle = exports.DxCommonSeriesSettingsLabel = exports.DxCommonSeriesSettingsHoverStyle = exports.DxCommonSeriesSettings = exports.DxCommonPaneSettings = exports.DxCommonAxisSettingsTitle = exports.DxCommonAxisSettingsLabel = exports.DxCommonAxisSettingsConstantLineStyleLabel = exports.DxCommonAxisSettingsConstantLineStyle = exports.DxCommonAxisSettings = exports.DxCommonAnnotationSettings = exports.DxColor = exports.DxChartTitleSubtitle = exports.DxChartTitle = exports.DxBreakStyle = exports.DxBreak = exports.DxBorder = exports.DxBackgroundColor = exports.DxAxisTitle = exports.DxAxisLabel = exports.DxAxisConstantLineStyleLabel = exports.DxAxisConstantLineStyle = exports.DxArgumentFormat = exports.DxArgumentAxis = exports.DxAnnotationImage = exports.DxAnnotationBorder = exports.DxAnnotation = exports.DxAnimation = exports.DxAggregationInterval = exports.DxAggregation = exports.DxAdaptiveLayout = exports.DxChart = void 0;
exports.DxZoomAndPan = exports.DxWidth = exports.DxWholeRange = exports.DxVisualRange = exports.DxVerticalLine = exports.DxValueErrorBar = exports.DxValueAxis = exports.DxUrl = exports.DxTooltipBorder = exports.DxTooltip = exports.DxTitle = exports.DxTickInterval = exports.DxTick = exports.DxSubtitle = exports.DxStripStyleLabel = exports.DxStripStyle = exports.DxStripLabel = exports.DxStrip = exports.DxSize = exports.DxShadow = exports.DxSeriesTemplate = exports.DxSeriesBorder = exports.DxSeries = exports.DxSelectionStyle = exports.DxScrollBar = exports.DxReduction = exports.DxPointSelectionStyle = exports.DxPointImage = exports.DxPointHoverStyle = exports.DxPointBorder = exports.DxPoint = exports.DxPaneBorder = exports.DxPane = exports.DxMinVisualRangeLength = exports.DxMinorTickInterval = exports.DxMinorTick = exports.DxMinorGrid = exports.DxMargin = exports.DxLoadingIndicator = exports.DxLength = exports.DxLegendTitleSubtitle = exports.DxLegendTitle = exports.DxLegend = void 0;
const vue_1 = require("vue");
const index_1 = require("./core/index");
const chart_1 = __importDefault(require("devextreme/viz/chart"));
const index_2 = require("./core/index");
const componentConfig = {
    props: {
        adaptiveLayout: Object,
        adjustOnZoom: Boolean,
        animation: [Boolean, Object],
        annotations: Array,
        argumentAxis: Object,
        autoHidePointMarkers: Boolean,
        barGroupPadding: Number,
        barGroupWidth: Number,
        commonAnnotationSettings: Object,
        commonAxisSettings: Object,
        commonPaneSettings: Object,
        commonSeriesSettings: Object,
        containerBackgroundColor: String,
        crosshair: Object,
        customizeAnnotation: Function,
        customizeLabel: Function,
        customizePoint: Function,
        dataPrepareSettings: Object,
        dataSource: [Array, Object, String],
        defaultPane: String,
        disabled: Boolean,
        elementAttr: Object,
        export: Object,
        legend: Object,
        loadingIndicator: Object,
        margin: Object,
        maxBubbleSize: Number,
        minBubbleSize: Number,
        negativesAsZeroes: Boolean,
        onArgumentAxisClick: Function,
        onDisposing: Function,
        onDone: Function,
        onDrawn: Function,
        onExported: Function,
        onExporting: Function,
        onFileSaving: Function,
        onIncidentOccurred: Function,
        onInitialized: Function,
        onLegendClick: Function,
        onOptionChanged: Function,
        onPointClick: Function,
        onPointHoverChanged: Function,
        onPointSelectionChanged: Function,
        onSeriesClick: Function,
        onSeriesHoverChanged: Function,
        onSeriesSelectionChanged: Function,
        onTooltipHidden: Function,
        onTooltipShown: Function,
        onZoomEnd: Function,
        onZoomStart: Function,
        palette: [Array, String],
        paletteExtensionMode: String,
        panes: [Array, Object],
        pathModified: Boolean,
        pointSelectionMode: String,
        redrawOnResize: Boolean,
        resizePanesOnZoom: Boolean,
        resolveLabelOverlapping: String,
        rotated: Boolean,
        rtlEnabled: Boolean,
        scrollBar: Object,
        series: [Array, Object],
        seriesSelectionMode: String,
        seriesTemplate: Object,
        size: Object,
        stickyHovering: Boolean,
        synchronizeMultiAxes: Boolean,
        theme: String,
        title: [Object, String],
        tooltip: Object,
        valueAxis: [Array, Object],
        zoomAndPan: Object
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:adaptiveLayout": null,
        "update:adjustOnZoom": null,
        "update:animation": null,
        "update:annotations": null,
        "update:argumentAxis": null,
        "update:autoHidePointMarkers": null,
        "update:barGroupPadding": null,
        "update:barGroupWidth": null,
        "update:commonAnnotationSettings": null,
        "update:commonAxisSettings": null,
        "update:commonPaneSettings": null,
        "update:commonSeriesSettings": null,
        "update:containerBackgroundColor": null,
        "update:crosshair": null,
        "update:customizeAnnotation": null,
        "update:customizeLabel": null,
        "update:customizePoint": null,
        "update:dataPrepareSettings": null,
        "update:dataSource": null,
        "update:defaultPane": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:export": null,
        "update:legend": null,
        "update:loadingIndicator": null,
        "update:margin": null,
        "update:maxBubbleSize": null,
        "update:minBubbleSize": null,
        "update:negativesAsZeroes": null,
        "update:onArgumentAxisClick": null,
        "update:onDisposing": null,
        "update:onDone": null,
        "update:onDrawn": null,
        "update:onExported": null,
        "update:onExporting": null,
        "update:onFileSaving": null,
        "update:onIncidentOccurred": null,
        "update:onInitialized": null,
        "update:onLegendClick": null,
        "update:onOptionChanged": null,
        "update:onPointClick": null,
        "update:onPointHoverChanged": null,
        "update:onPointSelectionChanged": null,
        "update:onSeriesClick": null,
        "update:onSeriesHoverChanged": null,
        "update:onSeriesSelectionChanged": null,
        "update:onTooltipHidden": null,
        "update:onTooltipShown": null,
        "update:onZoomEnd": null,
        "update:onZoomStart": null,
        "update:palette": null,
        "update:paletteExtensionMode": null,
        "update:panes": null,
        "update:pathModified": null,
        "update:pointSelectionMode": null,
        "update:redrawOnResize": null,
        "update:resizePanesOnZoom": null,
        "update:resolveLabelOverlapping": null,
        "update:rotated": null,
        "update:rtlEnabled": null,
        "update:scrollBar": null,
        "update:series": null,
        "update:seriesSelectionMode": null,
        "update:seriesTemplate": null,
        "update:size": null,
        "update:stickyHovering": null,
        "update:synchronizeMultiAxes": null,
        "update:theme": null,
        "update:title": null,
        "update:tooltip": null,
        "update:valueAxis": null,
        "update:zoomAndPan": null,
    },
    computed: {
        instance() {
            return this.$_instance;
        }
    },
    beforeCreate() {
        this.$_WidgetClass = chart_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            adaptiveLayout: { isCollectionItem: false, optionName: "adaptiveLayout" },
            animation: { isCollectionItem: false, optionName: "animation" },
            annotation: { isCollectionItem: true, optionName: "annotations" },
            argumentAxis: { isCollectionItem: false, optionName: "argumentAxis" },
            chartTitle: { isCollectionItem: false, optionName: "title" },
            commonAnnotationSettings: { isCollectionItem: false, optionName: "commonAnnotationSettings" },
            commonAxisSettings: { isCollectionItem: false, optionName: "commonAxisSettings" },
            commonPaneSettings: { isCollectionItem: false, optionName: "commonPaneSettings" },
            commonSeriesSettings: { isCollectionItem: false, optionName: "commonSeriesSettings" },
            crosshair: { isCollectionItem: false, optionName: "crosshair" },
            dataPrepareSettings: { isCollectionItem: false, optionName: "dataPrepareSettings" },
            export: { isCollectionItem: false, optionName: "export" },
            legend: { isCollectionItem: false, optionName: "legend" },
            loadingIndicator: { isCollectionItem: false, optionName: "loadingIndicator" },
            margin: { isCollectionItem: false, optionName: "margin" },
            pane: { isCollectionItem: true, optionName: "panes" },
            scrollBar: { isCollectionItem: false, optionName: "scrollBar" },
            series: { isCollectionItem: true, optionName: "series" },
            seriesTemplate: { isCollectionItem: false, optionName: "seriesTemplate" },
            size: { isCollectionItem: false, optionName: "size" },
            title: { isCollectionItem: false, optionName: "title" },
            tooltip: { isCollectionItem: false, optionName: "tooltip" },
            valueAxis: { isCollectionItem: true, optionName: "valueAxis" },
            zoomAndPan: { isCollectionItem: false, optionName: "zoomAndPan" }
        };
    }
};
(0, index_1.prepareComponentConfig)(componentConfig);
const DxChart = (0, vue_1.defineComponent)(componentConfig);
exports.DxChart = DxChart;
const DxAdaptiveLayoutConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:keepLabels": null,
        "update:width": null,
    },
    props: {
        height: Number,
        keepLabels: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAdaptiveLayoutConfig);
const DxAdaptiveLayout = (0, vue_1.defineComponent)(DxAdaptiveLayoutConfig);
exports.DxAdaptiveLayout = DxAdaptiveLayout;
DxAdaptiveLayout.$_optionName = "adaptiveLayout";
const DxAggregationConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:calculate": null,
        "update:enabled": null,
        "update:method": null,
    },
    props: {
        calculate: Function,
        enabled: Boolean,
        method: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAggregationConfig);
const DxAggregation = (0, vue_1.defineComponent)(DxAggregationConfig);
exports.DxAggregation = DxAggregation;
DxAggregation.$_optionName = "aggregation";
const DxAggregationIntervalConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAggregationIntervalConfig);
const DxAggregationInterval = (0, vue_1.defineComponent)(DxAggregationIntervalConfig);
exports.DxAggregationInterval = DxAggregationInterval;
DxAggregationInterval.$_optionName = "aggregationInterval";
const DxAnimationConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:duration": null,
        "update:easing": null,
        "update:enabled": null,
        "update:maxPointCountSupported": null,
    },
    props: {
        duration: Number,
        easing: String,
        enabled: Boolean,
        maxPointCountSupported: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAnimationConfig);
const DxAnimation = (0, vue_1.defineComponent)(DxAnimationConfig);
exports.DxAnimation = DxAnimation;
DxAnimation.$_optionName = "animation";
const DxAnnotationConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDragging": null,
        "update:argument": null,
        "update:arrowLength": null,
        "update:arrowWidth": null,
        "update:axis": null,
        "update:border": null,
        "update:color": null,
        "update:customizeTooltip": null,
        "update:data": null,
        "update:description": null,
        "update:font": null,
        "update:height": null,
        "update:image": null,
        "update:name": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:series": null,
        "update:shadow": null,
        "update:template": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:tooltipEnabled": null,
        "update:tooltipTemplate": null,
        "update:type": null,
        "update:value": null,
        "update:width": null,
        "update:wordWrap": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        allowDragging: Boolean,
        argument: [Date, Number, String],
        arrowLength: Number,
        arrowWidth: Number,
        axis: String,
        border: Object,
        color: String,
        customizeTooltip: Function,
        data: {},
        description: String,
        font: Object,
        height: Number,
        image: [Object, String],
        name: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        series: String,
        shadow: Object,
        template: {},
        text: String,
        textOverflow: String,
        tooltipEnabled: Boolean,
        tooltipTemplate: {},
        type: String,
        value: [Date, Number, String],
        width: Number,
        wordWrap: String,
        x: Number,
        y: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAnnotationConfig);
const DxAnnotation = (0, vue_1.defineComponent)(DxAnnotationConfig);
exports.DxAnnotation = DxAnnotation;
DxAnnotation.$_optionName = "annotations";
DxAnnotation.$_isCollectionItem = true;
DxAnnotation.$_expectedChildren = {
    annotationBorder: { isCollectionItem: false, optionName: "border" },
    annotationImage: { isCollectionItem: false, optionName: "image" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    image: { isCollectionItem: false, optionName: "image" },
    shadow: { isCollectionItem: false, optionName: "shadow" }
};
const DxAnnotationBorderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAnnotationBorderConfig);
const DxAnnotationBorder = (0, vue_1.defineComponent)(DxAnnotationBorderConfig);
exports.DxAnnotationBorder = DxAnnotationBorder;
DxAnnotationBorder.$_optionName = "border";
const DxAnnotationImageConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:url": null,
        "update:width": null,
    },
    props: {
        height: Number,
        url: String,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAnnotationImageConfig);
const DxAnnotationImage = (0, vue_1.defineComponent)(DxAnnotationImageConfig);
exports.DxAnnotationImage = DxAnnotationImage;
DxAnnotationImage.$_optionName = "image";
const DxArgumentAxisConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregateByCategory": null,
        "update:aggregatedPointsPosition": null,
        "update:aggregationGroupWidth": null,
        "update:aggregationInterval": null,
        "update:allowDecimals": null,
        "update:argumentType": null,
        "update:axisDivisionFactor": null,
        "update:breaks": null,
        "update:breakStyle": null,
        "update:categories": null,
        "update:color": null,
        "update:constantLines": null,
        "update:constantLineStyle": null,
        "update:customPosition": null,
        "update:customPositionAxis": null,
        "update:discreteAxisDivisionMode": null,
        "update:endOnTick": null,
        "update:grid": null,
        "update:holidays": null,
        "update:hoverMode": null,
        "update:inverted": null,
        "update:label": null,
        "update:linearThreshold": null,
        "update:logarithmBase": null,
        "update:maxValueMargin": null,
        "update:minorGrid": null,
        "update:minorTick": null,
        "update:minorTickCount": null,
        "update:minorTickInterval": null,
        "update:minValueMargin": null,
        "update:minVisualRangeLength": null,
        "update:offset": null,
        "update:opacity": null,
        "update:placeholderSize": null,
        "update:position": null,
        "update:singleWorkdays": null,
        "update:strips": null,
        "update:stripStyle": null,
        "update:tick": null,
        "update:tickInterval": null,
        "update:title": null,
        "update:type": null,
        "update:valueMarginsEnabled": null,
        "update:visible": null,
        "update:visualRange": null,
        "update:visualRangeUpdateMode": null,
        "update:wholeRange": null,
        "update:width": null,
        "update:workdaysOnly": null,
        "update:workWeek": null,
    },
    props: {
        aggregateByCategory: Boolean,
        aggregatedPointsPosition: String,
        aggregationGroupWidth: Number,
        aggregationInterval: [Number, Object, String],
        allowDecimals: Boolean,
        argumentType: String,
        axisDivisionFactor: Number,
        breaks: Array,
        breakStyle: Object,
        categories: Array,
        color: String,
        constantLines: Array,
        constantLineStyle: Object,
        customPosition: [Date, Number, String],
        customPositionAxis: String,
        discreteAxisDivisionMode: String,
        endOnTick: Boolean,
        grid: Object,
        holidays: Array,
        hoverMode: String,
        inverted: Boolean,
        label: Object,
        linearThreshold: Number,
        logarithmBase: Number,
        maxValueMargin: Number,
        minorGrid: Object,
        minorTick: Object,
        minorTickCount: Number,
        minorTickInterval: [Number, Object, String],
        minValueMargin: Number,
        minVisualRangeLength: [Number, Object, String],
        offset: Number,
        opacity: Number,
        placeholderSize: Number,
        position: String,
        singleWorkdays: Array,
        strips: Array,
        stripStyle: Object,
        tick: Object,
        tickInterval: [Number, Object, String],
        title: [Object, String],
        type: String,
        valueMarginsEnabled: Boolean,
        visible: Boolean,
        visualRange: [Array, Object],
        visualRangeUpdateMode: String,
        wholeRange: [Array, Object],
        width: Number,
        workdaysOnly: Boolean,
        workWeek: Array
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxArgumentAxisConfig);
const DxArgumentAxis = (0, vue_1.defineComponent)(DxArgumentAxisConfig);
exports.DxArgumentAxis = DxArgumentAxis;
DxArgumentAxis.$_optionName = "argumentAxis";
DxArgumentAxis.$_expectedChildren = {
    aggregationInterval: { isCollectionItem: false, optionName: "aggregationInterval" },
    axisConstantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    axisLabel: { isCollectionItem: false, optionName: "label" },
    axisTitle: { isCollectionItem: false, optionName: "title" },
    break: { isCollectionItem: true, optionName: "breaks" },
    breakStyle: { isCollectionItem: false, optionName: "breakStyle" },
    constantLine: { isCollectionItem: true, optionName: "constantLines" },
    constantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    grid: { isCollectionItem: false, optionName: "grid" },
    label: { isCollectionItem: false, optionName: "label" },
    minorGrid: { isCollectionItem: false, optionName: "minorGrid" },
    minorTick: { isCollectionItem: false, optionName: "minorTick" },
    minorTickInterval: { isCollectionItem: false, optionName: "minorTickInterval" },
    minVisualRangeLength: { isCollectionItem: false, optionName: "minVisualRangeLength" },
    strip: { isCollectionItem: true, optionName: "strips" },
    stripStyle: { isCollectionItem: false, optionName: "stripStyle" },
    tick: { isCollectionItem: false, optionName: "tick" },
    tickInterval: { isCollectionItem: false, optionName: "tickInterval" },
    title: { isCollectionItem: false, optionName: "title" },
    visualRange: { isCollectionItem: false, optionName: "visualRange" },
    wholeRange: { isCollectionItem: false, optionName: "wholeRange" }
};
const DxArgumentFormatConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxArgumentFormatConfig);
const DxArgumentFormat = (0, vue_1.defineComponent)(DxArgumentFormatConfig);
exports.DxArgumentFormat = DxArgumentFormat;
DxArgumentFormat.$_optionName = "argumentFormat";
const DxAxisConstantLineStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAxisConstantLineStyleConfig);
const DxAxisConstantLineStyle = (0, vue_1.defineComponent)(DxAxisConstantLineStyleConfig);
exports.DxAxisConstantLineStyle = DxAxisConstantLineStyle;
DxAxisConstantLineStyle.$_optionName = "constantLineStyle";
DxAxisConstantLineStyle.$_expectedChildren = {
    label: { isCollectionItem: false, optionName: "label" }
};
const DxAxisConstantLineStyleLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:position": null,
        "update:verticalAlignment": null,
        "update:visible": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        position: String,
        verticalAlignment: String,
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAxisConstantLineStyleLabelConfig);
const DxAxisConstantLineStyleLabel = (0, vue_1.defineComponent)(DxAxisConstantLineStyleLabelConfig);
exports.DxAxisConstantLineStyleLabel = DxAxisConstantLineStyleLabel;
DxAxisConstantLineStyleLabel.$_optionName = "label";
DxAxisConstantLineStyleLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxAxisLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:customizeHint": null,
        "update:customizeText": null,
        "update:displayMode": null,
        "update:font": null,
        "update:format": null,
        "update:indentFromAxis": null,
        "update:overlappingBehavior": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:staggeringSpacing": null,
        "update:template": null,
        "update:textOverflow": null,
        "update:visible": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        customizeHint: Function,
        customizeText: Function,
        displayMode: String,
        font: Object,
        format: [Object, String, Function],
        indentFromAxis: Number,
        overlappingBehavior: String,
        position: String,
        rotationAngle: Number,
        staggeringSpacing: Number,
        template: {},
        textOverflow: String,
        visible: Boolean,
        wordWrap: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAxisLabelConfig);
const DxAxisLabel = (0, vue_1.defineComponent)(DxAxisLabelConfig);
exports.DxAxisLabel = DxAxisLabel;
DxAxisLabel.$_optionName = "label";
DxAxisLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" }
};
const DxAxisTitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:font": null,
        "update:margin": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        font: Object,
        margin: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAxisTitleConfig);
const DxAxisTitle = (0, vue_1.defineComponent)(DxAxisTitleConfig);
exports.DxAxisTitle = DxAxisTitle;
DxAxisTitle.$_optionName = "title";
DxAxisTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxBackgroundColorConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:base": null,
        "update:fillId": null,
    },
    props: {
        base: String,
        fillId: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxBackgroundColorConfig);
const DxBackgroundColor = (0, vue_1.defineComponent)(DxBackgroundColorConfig);
exports.DxBackgroundColor = DxBackgroundColor;
DxBackgroundColor.$_optionName = "backgroundColor";
const DxBorderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:bottom": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:left": null,
        "update:opacity": null,
        "update:right": null,
        "update:top": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        bottom: Boolean,
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        left: Boolean,
        opacity: Number,
        right: Boolean,
        top: Boolean,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxBorderConfig);
const DxBorder = (0, vue_1.defineComponent)(DxBorderConfig);
exports.DxBorder = DxBorder;
DxBorder.$_optionName = "border";
const DxBreakConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:endValue": null,
        "update:startValue": null,
    },
    props: {
        endValue: [Date, Number, String],
        startValue: [Date, Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxBreakConfig);
const DxBreak = (0, vue_1.defineComponent)(DxBreakConfig);
exports.DxBreak = DxBreak;
DxBreak.$_optionName = "breaks";
DxBreak.$_isCollectionItem = true;
const DxBreakStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:line": null,
        "update:width": null,
    },
    props: {
        color: String,
        line: String,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxBreakStyleConfig);
const DxBreakStyle = (0, vue_1.defineComponent)(DxBreakStyleConfig);
exports.DxBreakStyle = DxBreakStyle;
DxBreakStyle.$_optionName = "breakStyle";
const DxChartTitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: [Number, Object],
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxChartTitleConfig);
const DxChartTitle = (0, vue_1.defineComponent)(DxChartTitleConfig);
exports.DxChartTitle = DxChartTitle;
DxChartTitle.$_optionName = "title";
DxChartTitle.$_expectedChildren = {
    chartTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    font: { isCollectionItem: false, optionName: "font" },
    margin: { isCollectionItem: false, optionName: "margin" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
const DxChartTitleSubtitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxChartTitleSubtitleConfig);
const DxChartTitleSubtitle = (0, vue_1.defineComponent)(DxChartTitleSubtitleConfig);
exports.DxChartTitleSubtitle = DxChartTitleSubtitle;
DxChartTitleSubtitle.$_optionName = "subtitle";
DxChartTitleSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxColorConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:base": null,
        "update:fillId": null,
    },
    props: {
        base: String,
        fillId: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxColorConfig);
const DxColor = (0, vue_1.defineComponent)(DxColorConfig);
exports.DxColor = DxColor;
DxColor.$_optionName = "color";
const DxCommonAnnotationSettingsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDragging": null,
        "update:argument": null,
        "update:arrowLength": null,
        "update:arrowWidth": null,
        "update:axis": null,
        "update:border": null,
        "update:color": null,
        "update:customizeTooltip": null,
        "update:data": null,
        "update:description": null,
        "update:font": null,
        "update:height": null,
        "update:image": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:series": null,
        "update:shadow": null,
        "update:template": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:tooltipEnabled": null,
        "update:tooltipTemplate": null,
        "update:type": null,
        "update:value": null,
        "update:width": null,
        "update:wordWrap": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        allowDragging: Boolean,
        argument: [Date, Number, String],
        arrowLength: Number,
        arrowWidth: Number,
        axis: String,
        border: Object,
        color: String,
        customizeTooltip: Function,
        data: {},
        description: String,
        font: Object,
        height: Number,
        image: [Object, String],
        offsetX: Number,
        offsetY: Number,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        series: String,
        shadow: Object,
        template: {},
        text: String,
        textOverflow: String,
        tooltipEnabled: Boolean,
        tooltipTemplate: {},
        type: String,
        value: [Date, Number, String],
        width: Number,
        wordWrap: String,
        x: Number,
        y: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCommonAnnotationSettingsConfig);
const DxCommonAnnotationSettings = (0, vue_1.defineComponent)(DxCommonAnnotationSettingsConfig);
exports.DxCommonAnnotationSettings = DxCommonAnnotationSettings;
DxCommonAnnotationSettings.$_optionName = "commonAnnotationSettings";
DxCommonAnnotationSettings.$_expectedChildren = {
    annotationBorder: { isCollectionItem: false, optionName: "border" },
    annotationImage: { isCollectionItem: false, optionName: "image" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    image: { isCollectionItem: false, optionName: "image" },
    shadow: { isCollectionItem: false, optionName: "shadow" }
};
const DxCommonAxisSettingsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregatedPointsPosition": null,
        "update:allowDecimals": null,
        "update:breakStyle": null,
        "update:color": null,
        "update:constantLineStyle": null,
        "update:discreteAxisDivisionMode": null,
        "update:endOnTick": null,
        "update:grid": null,
        "update:inverted": null,
        "update:label": null,
        "update:maxValueMargin": null,
        "update:minorGrid": null,
        "update:minorTick": null,
        "update:minValueMargin": null,
        "update:opacity": null,
        "update:placeholderSize": null,
        "update:stripStyle": null,
        "update:tick": null,
        "update:title": null,
        "update:valueMarginsEnabled": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        aggregatedPointsPosition: String,
        allowDecimals: Boolean,
        breakStyle: Object,
        color: String,
        constantLineStyle: Object,
        discreteAxisDivisionMode: String,
        endOnTick: Boolean,
        grid: Object,
        inverted: Boolean,
        label: Object,
        maxValueMargin: Number,
        minorGrid: Object,
        minorTick: Object,
        minValueMargin: Number,
        opacity: Number,
        placeholderSize: Number,
        stripStyle: Object,
        tick: Object,
        title: Object,
        valueMarginsEnabled: Boolean,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCommonAxisSettingsConfig);
const DxCommonAxisSettings = (0, vue_1.defineComponent)(DxCommonAxisSettingsConfig);
exports.DxCommonAxisSettings = DxCommonAxisSettings;
DxCommonAxisSettings.$_optionName = "commonAxisSettings";
DxCommonAxisSettings.$_expectedChildren = {
    breakStyle: { isCollectionItem: false, optionName: "breakStyle" },
    commonAxisSettingsConstantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    commonAxisSettingsLabel: { isCollectionItem: false, optionName: "label" },
    commonAxisSettingsTitle: { isCollectionItem: false, optionName: "title" },
    constantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    grid: { isCollectionItem: false, optionName: "grid" },
    label: { isCollectionItem: false, optionName: "label" },
    minorGrid: { isCollectionItem: false, optionName: "minorGrid" },
    minorTick: { isCollectionItem: false, optionName: "minorTick" },
    stripStyle: { isCollectionItem: false, optionName: "stripStyle" },
    tick: { isCollectionItem: false, optionName: "tick" },
    title: { isCollectionItem: false, optionName: "title" }
};
const DxCommonAxisSettingsConstantLineStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCommonAxisSettingsConstantLineStyleConfig);
const DxCommonAxisSettingsConstantLineStyle = (0, vue_1.defineComponent)(DxCommonAxisSettingsConstantLineStyleConfig);
exports.DxCommonAxisSettingsConstantLineStyle = DxCommonAxisSettingsConstantLineStyle;
DxCommonAxisSettingsConstantLineStyle.$_optionName = "constantLineStyle";
DxCommonAxisSettingsConstantLineStyle.$_expectedChildren = {
    commonAxisSettingsConstantLineStyleLabel: { isCollectionItem: false, optionName: "label" },
    label: { isCollectionItem: false, optionName: "label" }
};
const DxCommonAxisSettingsConstantLineStyleLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:position": null,
        "update:visible": null,
    },
    props: {
        font: Object,
        position: String,
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCommonAxisSettingsConstantLineStyleLabelConfig);
const DxCommonAxisSettingsConstantLineStyleLabel = (0, vue_1.defineComponent)(DxCommonAxisSettingsConstantLineStyleLabelConfig);
exports.DxCommonAxisSettingsConstantLineStyleLabel = DxCommonAxisSettingsConstantLineStyleLabel;
DxCommonAxisSettingsConstantLineStyleLabel.$_optionName = "label";
DxCommonAxisSettingsConstantLineStyleLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxCommonAxisSettingsLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:displayMode": null,
        "update:font": null,
        "update:indentFromAxis": null,
        "update:overlappingBehavior": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:staggeringSpacing": null,
        "update:template": null,
        "update:textOverflow": null,
        "update:visible": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        displayMode: String,
        font: Object,
        indentFromAxis: Number,
        overlappingBehavior: String,
        position: String,
        rotationAngle: Number,
        staggeringSpacing: Number,
        template: {},
        textOverflow: String,
        visible: Boolean,
        wordWrap: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCommonAxisSettingsLabelConfig);
const DxCommonAxisSettingsLabel = (0, vue_1.defineComponent)(DxCommonAxisSettingsLabelConfig);
exports.DxCommonAxisSettingsLabel = DxCommonAxisSettingsLabel;
DxCommonAxisSettingsLabel.$_optionName = "label";
DxCommonAxisSettingsLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxCommonAxisSettingsTitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:font": null,
        "update:margin": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        font: Object,
        margin: Number,
        textOverflow: String,
        wordWrap: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCommonAxisSettingsTitleConfig);
const DxCommonAxisSettingsTitle = (0, vue_1.defineComponent)(DxCommonAxisSettingsTitleConfig);
exports.DxCommonAxisSettingsTitle = DxCommonAxisSettingsTitle;
DxCommonAxisSettingsTitle.$_optionName = "title";
DxCommonAxisSettingsTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxCommonPaneSettingsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:border": null,
    },
    props: {
        backgroundColor: [Object, String],
        border: Object
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCommonPaneSettingsConfig);
const DxCommonPaneSettings = (0, vue_1.defineComponent)(DxCommonPaneSettingsConfig);
exports.DxCommonPaneSettings = DxCommonPaneSettings;
DxCommonPaneSettings.$_optionName = "commonPaneSettings";
DxCommonPaneSettings.$_expectedChildren = {
    backgroundColor: { isCollectionItem: false, optionName: "backgroundColor" },
    border: { isCollectionItem: false, optionName: "border" },
    paneBorder: { isCollectionItem: false, optionName: "border" }
};
const DxCommonSeriesSettingsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregation": null,
        "update:area": null,
        "update:argumentField": null,
        "update:axis": null,
        "update:bar": null,
        "update:barOverlapGroup": null,
        "update:barPadding": null,
        "update:barWidth": null,
        "update:border": null,
        "update:bubble": null,
        "update:candlestick": null,
        "update:closeValueField": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:fullstackedarea": null,
        "update:fullstackedbar": null,
        "update:fullstackedline": null,
        "update:fullstackedspline": null,
        "update:fullstackedsplinearea": null,
        "update:highValueField": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:ignoreEmptyPoints": null,
        "update:innerColor": null,
        "update:label": null,
        "update:line": null,
        "update:lowValueField": null,
        "update:maxLabelCount": null,
        "update:minBarSize": null,
        "update:opacity": null,
        "update:openValueField": null,
        "update:pane": null,
        "update:point": null,
        "update:rangearea": null,
        "update:rangebar": null,
        "update:rangeValue1Field": null,
        "update:rangeValue2Field": null,
        "update:reduction": null,
        "update:scatter": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:showInLegend": null,
        "update:sizeField": null,
        "update:spline": null,
        "update:splinearea": null,
        "update:stack": null,
        "update:stackedarea": null,
        "update:stackedbar": null,
        "update:stackedline": null,
        "update:stackedspline": null,
        "update:stackedsplinearea": null,
        "update:steparea": null,
        "update:stepline": null,
        "update:stock": null,
        "update:tagField": null,
        "update:type": null,
        "update:valueErrorBar": null,
        "update:valueField": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        aggregation: Object,
        area: {},
        argumentField: String,
        axis: String,
        bar: {},
        barOverlapGroup: String,
        barPadding: Number,
        barWidth: Number,
        border: Object,
        bubble: {},
        candlestick: {},
        closeValueField: String,
        color: [Object, String],
        cornerRadius: Number,
        dashStyle: String,
        fullstackedarea: {},
        fullstackedbar: {},
        fullstackedline: {},
        fullstackedspline: {},
        fullstackedsplinearea: {},
        highValueField: String,
        hoverMode: String,
        hoverStyle: Object,
        ignoreEmptyPoints: Boolean,
        innerColor: String,
        label: Object,
        line: {},
        lowValueField: String,
        maxLabelCount: Number,
        minBarSize: Number,
        opacity: Number,
        openValueField: String,
        pane: String,
        point: Object,
        rangearea: {},
        rangebar: {},
        rangeValue1Field: String,
        rangeValue2Field: String,
        reduction: Object,
        scatter: {},
        selectionMode: String,
        selectionStyle: Object,
        showInLegend: Boolean,
        sizeField: String,
        spline: {},
        splinearea: {},
        stack: String,
        stackedarea: {},
        stackedbar: {},
        stackedline: {},
        stackedspline: {},
        stackedsplinearea: {},
        steparea: {},
        stepline: {},
        stock: {},
        tagField: String,
        type: String,
        valueErrorBar: Object,
        valueField: String,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCommonSeriesSettingsConfig);
const DxCommonSeriesSettings = (0, vue_1.defineComponent)(DxCommonSeriesSettingsConfig);
exports.DxCommonSeriesSettings = DxCommonSeriesSettings;
DxCommonSeriesSettings.$_optionName = "commonSeriesSettings";
DxCommonSeriesSettings.$_expectedChildren = {
    aggregation: { isCollectionItem: false, optionName: "aggregation" },
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    commonSeriesSettingsHoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    commonSeriesSettingsLabel: { isCollectionItem: false, optionName: "label" },
    commonSeriesSettingsSelectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    point: { isCollectionItem: false, optionName: "point" },
    reduction: { isCollectionItem: false, optionName: "reduction" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    seriesBorder: { isCollectionItem: false, optionName: "border" },
    valueErrorBar: { isCollectionItem: false, optionName: "valueErrorBar" }
};
const DxCommonSeriesSettingsHoverStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:highlight": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: [Object, String],
        dashStyle: String,
        hatching: Object,
        highlight: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCommonSeriesSettingsHoverStyleConfig);
const DxCommonSeriesSettingsHoverStyle = (0, vue_1.defineComponent)(DxCommonSeriesSettingsHoverStyleConfig);
exports.DxCommonSeriesSettingsHoverStyle = DxCommonSeriesSettingsHoverStyle;
DxCommonSeriesSettingsHoverStyle.$_optionName = "hoverStyle";
DxCommonSeriesSettingsHoverStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
const DxCommonSeriesSettingsLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:argumentFormat": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:connector": null,
        "update:customizeText": null,
        "update:displayFormat": null,
        "update:font": null,
        "update:format": null,
        "update:horizontalOffset": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:showForZeroValues": null,
        "update:verticalOffset": null,
        "update:visible": null,
    },
    props: {
        alignment: String,
        argumentFormat: [Object, String, Function],
        backgroundColor: String,
        border: Object,
        connector: Object,
        customizeText: Function,
        displayFormat: String,
        font: Object,
        format: [Object, String, Function],
        horizontalOffset: Number,
        position: String,
        rotationAngle: Number,
        showForZeroValues: Boolean,
        verticalOffset: Number,
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCommonSeriesSettingsLabelConfig);
const DxCommonSeriesSettingsLabel = (0, vue_1.defineComponent)(DxCommonSeriesSettingsLabelConfig);
exports.DxCommonSeriesSettingsLabel = DxCommonSeriesSettingsLabel;
DxCommonSeriesSettingsLabel.$_optionName = "label";
DxCommonSeriesSettingsLabel.$_expectedChildren = {
    argumentFormat: { isCollectionItem: false, optionName: "argumentFormat" },
    border: { isCollectionItem: false, optionName: "border" },
    connector: { isCollectionItem: false, optionName: "connector" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
const DxCommonSeriesSettingsSelectionStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:highlight": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: [Object, String],
        dashStyle: String,
        hatching: Object,
        highlight: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCommonSeriesSettingsSelectionStyleConfig);
const DxCommonSeriesSettingsSelectionStyle = (0, vue_1.defineComponent)(DxCommonSeriesSettingsSelectionStyleConfig);
exports.DxCommonSeriesSettingsSelectionStyle = DxCommonSeriesSettingsSelectionStyle;
DxCommonSeriesSettingsSelectionStyle.$_optionName = "selectionStyle";
DxCommonSeriesSettingsSelectionStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
const DxConnectorConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxConnectorConfig);
const DxConnector = (0, vue_1.defineComponent)(DxConnectorConfig);
exports.DxConnector = DxConnector;
DxConnector.$_optionName = "connector";
const DxConstantLineConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:displayBehindSeries": null,
        "update:extendAxis": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:value": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        displayBehindSeries: Boolean,
        extendAxis: Boolean,
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        value: [Date, Number, String],
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxConstantLineConfig);
const DxConstantLine = (0, vue_1.defineComponent)(DxConstantLineConfig);
exports.DxConstantLine = DxConstantLine;
DxConstantLine.$_optionName = "constantLines";
DxConstantLine.$_isCollectionItem = true;
DxConstantLine.$_expectedChildren = {
    label: { isCollectionItem: false, optionName: "label" }
};
const DxConstantLineLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:position": null,
        "update:text": null,
        "update:verticalAlignment": null,
        "update:visible": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        position: String,
        text: String,
        verticalAlignment: String,
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxConstantLineLabelConfig);
const DxConstantLineLabel = (0, vue_1.defineComponent)(DxConstantLineLabelConfig);
exports.DxConstantLineLabel = DxConstantLineLabel;
DxConstantLineLabel.$_optionName = "label";
DxConstantLineLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxConstantLineStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxConstantLineStyleConfig);
const DxConstantLineStyle = (0, vue_1.defineComponent)(DxConstantLineStyleConfig);
exports.DxConstantLineStyle = DxConstantLineStyle;
DxConstantLineStyle.$_optionName = "constantLineStyle";
DxConstantLineStyle.$_expectedChildren = {
    commonAxisSettingsConstantLineStyleLabel: { isCollectionItem: false, optionName: "label" },
    label: { isCollectionItem: false, optionName: "label" }
};
const DxCrosshairConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:enabled": null,
        "update:horizontalLine": null,
        "update:label": null,
        "update:opacity": null,
        "update:verticalLine": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        enabled: Boolean,
        horizontalLine: [Boolean, Object],
        label: Object,
        opacity: Number,
        verticalLine: [Boolean, Object],
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCrosshairConfig);
const DxCrosshair = (0, vue_1.defineComponent)(DxCrosshairConfig);
exports.DxCrosshair = DxCrosshair;
DxCrosshair.$_optionName = "crosshair";
DxCrosshair.$_expectedChildren = {
    horizontalLine: { isCollectionItem: false, optionName: "horizontalLine" },
    horizontalLineLabel: { isCollectionItem: false, optionName: "label" },
    label: { isCollectionItem: false, optionName: "label" },
    verticalLine: { isCollectionItem: false, optionName: "verticalLine" }
};
const DxDataPrepareSettingsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:checkTypeForAllData": null,
        "update:convertToAxisDataType": null,
        "update:sortingMethod": null,
    },
    props: {
        checkTypeForAllData: Boolean,
        convertToAxisDataType: Boolean,
        sortingMethod: [Boolean, Function]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxDataPrepareSettingsConfig);
const DxDataPrepareSettings = (0, vue_1.defineComponent)(DxDataPrepareSettingsConfig);
exports.DxDataPrepareSettings = DxDataPrepareSettings;
DxDataPrepareSettings.$_optionName = "dataPrepareSettings";
const DxDragBoxStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
    },
    props: {
        color: String,
        opacity: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxDragBoxStyleConfig);
const DxDragBoxStyle = (0, vue_1.defineComponent)(DxDragBoxStyleConfig);
exports.DxDragBoxStyle = DxDragBoxStyle;
DxDragBoxStyle.$_optionName = "dragBoxStyle";
const DxExportConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:fileName": null,
        "update:formats": null,
        "update:margin": null,
        "update:printingEnabled": null,
        "update:svgToCanvas": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        fileName: String,
        formats: Array,
        margin: Number,
        printingEnabled: Boolean,
        svgToCanvas: Function
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxExportConfig);
const DxExport = (0, vue_1.defineComponent)(DxExportConfig);
exports.DxExport = DxExport;
DxExport.$_optionName = "export";
const DxFontConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:family": null,
        "update:opacity": null,
        "update:size": null,
        "update:weight": null,
    },
    props: {
        color: String,
        family: String,
        opacity: Number,
        size: [Number, String],
        weight: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFontConfig);
const DxFont = (0, vue_1.defineComponent)(DxFontConfig);
exports.DxFont = DxFont;
DxFont.$_optionName = "font";
const DxFormatConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFormatConfig);
const DxFormat = (0, vue_1.defineComponent)(DxFormatConfig);
exports.DxFormat = DxFormat;
DxFormat.$_optionName = "format";
const DxGridConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxGridConfig);
const DxGrid = (0, vue_1.defineComponent)(DxGridConfig);
exports.DxGrid = DxGrid;
DxGrid.$_optionName = "grid";
const DxHatchingConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:direction": null,
        "update:opacity": null,
        "update:step": null,
        "update:width": null,
    },
    props: {
        direction: String,
        opacity: Number,
        step: Number,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxHatchingConfig);
const DxHatching = (0, vue_1.defineComponent)(DxHatchingConfig);
exports.DxHatching = DxHatching;
DxHatching.$_optionName = "hatching";
const DxHeightConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:rangeMaxPoint": null,
        "update:rangeMinPoint": null,
    },
    props: {
        rangeMaxPoint: Number,
        rangeMinPoint: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxHeightConfig);
const DxHeight = (0, vue_1.defineComponent)(DxHeightConfig);
exports.DxHeight = DxHeight;
DxHeight.$_optionName = "height";
const DxHorizontalLineConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:label": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        label: Object,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxHorizontalLineConfig);
const DxHorizontalLine = (0, vue_1.defineComponent)(DxHorizontalLineConfig);
exports.DxHorizontalLine = DxHorizontalLine;
DxHorizontalLine.$_optionName = "horizontalLine";
DxHorizontalLine.$_expectedChildren = {
    horizontalLineLabel: { isCollectionItem: false, optionName: "label" },
    label: { isCollectionItem: false, optionName: "label" }
};
const DxHorizontalLineLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:customizeText": null,
        "update:font": null,
        "update:format": null,
        "update:visible": null,
    },
    props: {
        backgroundColor: String,
        customizeText: Function,
        font: Object,
        format: [Object, String, Function],
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxHorizontalLineLabelConfig);
const DxHorizontalLineLabel = (0, vue_1.defineComponent)(DxHorizontalLineLabelConfig);
exports.DxHorizontalLineLabel = DxHorizontalLineLabel;
DxHorizontalLineLabel.$_optionName = "label";
DxHorizontalLineLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" }
};
const DxHoverStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:highlight": null,
        "update:size": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: [Object, String],
        dashStyle: String,
        hatching: Object,
        highlight: Boolean,
        size: Number,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxHoverStyleConfig);
const DxHoverStyle = (0, vue_1.defineComponent)(DxHoverStyleConfig);
exports.DxHoverStyle = DxHoverStyle;
DxHoverStyle.$_optionName = "hoverStyle";
DxHoverStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    pointBorder: { isCollectionItem: false, optionName: "border" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
const DxImageConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:url": null,
        "update:width": null,
    },
    props: {
        height: [Number, Object],
        url: [String, Object],
        width: [Number, Object]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxImageConfig);
const DxImage = (0, vue_1.defineComponent)(DxImageConfig);
exports.DxImage = DxImage;
DxImage.$_optionName = "image";
DxImage.$_expectedChildren = {
    height: { isCollectionItem: false, optionName: "height" },
    url: { isCollectionItem: false, optionName: "url" },
    width: { isCollectionItem: false, optionName: "width" }
};
const DxLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:argumentFormat": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:connector": null,
        "update:customizeHint": null,
        "update:customizeText": null,
        "update:displayFormat": null,
        "update:displayMode": null,
        "update:font": null,
        "update:format": null,
        "update:horizontalAlignment": null,
        "update:horizontalOffset": null,
        "update:indentFromAxis": null,
        "update:overlappingBehavior": null,
        "update:position": null,
        "update:rotationAngle": null,
        "update:showForZeroValues": null,
        "update:staggeringSpacing": null,
        "update:template": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:verticalOffset": null,
        "update:visible": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        argumentFormat: [Object, String, Function],
        backgroundColor: String,
        border: Object,
        connector: Object,
        customizeHint: Function,
        customizeText: Function,
        displayFormat: String,
        displayMode: String,
        font: Object,
        format: [Object, String, Function],
        horizontalAlignment: String,
        horizontalOffset: Number,
        indentFromAxis: Number,
        overlappingBehavior: String,
        position: String,
        rotationAngle: Number,
        showForZeroValues: Boolean,
        staggeringSpacing: Number,
        template: {},
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        verticalOffset: Number,
        visible: Boolean,
        wordWrap: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxLabelConfig);
const DxLabel = (0, vue_1.defineComponent)(DxLabelConfig);
exports.DxLabel = DxLabel;
DxLabel.$_optionName = "label";
DxLabel.$_expectedChildren = {
    argumentFormat: { isCollectionItem: false, optionName: "argumentFormat" },
    border: { isCollectionItem: false, optionName: "border" },
    connector: { isCollectionItem: false, optionName: "connector" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
const DxLegendConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:columnCount": null,
        "update:columnItemSpacing": null,
        "update:customizeHint": null,
        "update:customizeItems": null,
        "update:customizeText": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:hoverMode": null,
        "update:itemsAlignment": null,
        "update:itemTextPosition": null,
        "update:margin": null,
        "update:markerSize": null,
        "update:markerTemplate": null,
        "update:orientation": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:position": null,
        "update:rowCount": null,
        "update:rowItemSpacing": null,
        "update:title": null,
        "update:verticalAlignment": null,
        "update:visible": null,
    },
    props: {
        backgroundColor: String,
        border: Object,
        columnCount: Number,
        columnItemSpacing: Number,
        customizeHint: Function,
        customizeItems: Function,
        customizeText: Function,
        font: Object,
        horizontalAlignment: String,
        hoverMode: String,
        itemsAlignment: String,
        itemTextPosition: String,
        margin: [Number, Object],
        markerSize: Number,
        markerTemplate: {},
        orientation: String,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        position: String,
        rowCount: Number,
        rowItemSpacing: Number,
        title: [Object, String],
        verticalAlignment: String,
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxLegendConfig);
const DxLegend = (0, vue_1.defineComponent)(DxLegendConfig);
exports.DxLegend = DxLegend;
DxLegend.$_optionName = "legend";
DxLegend.$_expectedChildren = {
    annotationBorder: { isCollectionItem: false, optionName: "border" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    legendTitle: { isCollectionItem: false, optionName: "title" },
    margin: { isCollectionItem: false, optionName: "margin" },
    title: { isCollectionItem: false, optionName: "title" }
};
const DxLegendTitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:verticalAlignment": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: Object,
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        verticalAlignment: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxLegendTitleConfig);
const DxLegendTitle = (0, vue_1.defineComponent)(DxLegendTitleConfig);
exports.DxLegendTitle = DxLegendTitle;
DxLegendTitle.$_optionName = "title";
DxLegendTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    legendTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    margin: { isCollectionItem: false, optionName: "margin" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
const DxLegendTitleSubtitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxLegendTitleSubtitleConfig);
const DxLegendTitleSubtitle = (0, vue_1.defineComponent)(DxLegendTitleSubtitleConfig);
exports.DxLegendTitleSubtitle = DxLegendTitleSubtitle;
DxLegendTitleSubtitle.$_optionName = "subtitle";
DxLegendTitleSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxLengthConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxLengthConfig);
const DxLength = (0, vue_1.defineComponent)(DxLengthConfig);
exports.DxLength = DxLength;
DxLength.$_optionName = "length";
const DxLoadingIndicatorConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:font": null,
        "update:show": null,
        "update:text": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        font: Object,
        show: Boolean,
        text: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxLoadingIndicatorConfig);
const DxLoadingIndicator = (0, vue_1.defineComponent)(DxLoadingIndicatorConfig);
exports.DxLoadingIndicator = DxLoadingIndicator;
DxLoadingIndicator.$_optionName = "loadingIndicator";
DxLoadingIndicator.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxMarginConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:bottom": null,
        "update:left": null,
        "update:right": null,
        "update:top": null,
    },
    props: {
        bottom: Number,
        left: Number,
        right: Number,
        top: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxMarginConfig);
const DxMargin = (0, vue_1.defineComponent)(DxMarginConfig);
exports.DxMargin = DxMargin;
DxMargin.$_optionName = "margin";
const DxMinorGridConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxMinorGridConfig);
const DxMinorGrid = (0, vue_1.defineComponent)(DxMinorGridConfig);
exports.DxMinorGrid = DxMinorGrid;
DxMinorGrid.$_optionName = "minorGrid";
const DxMinorTickConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:shift": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        shift: Number,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxMinorTickConfig);
const DxMinorTick = (0, vue_1.defineComponent)(DxMinorTickConfig);
exports.DxMinorTick = DxMinorTick;
DxMinorTick.$_optionName = "minorTick";
const DxMinorTickIntervalConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxMinorTickIntervalConfig);
const DxMinorTickInterval = (0, vue_1.defineComponent)(DxMinorTickIntervalConfig);
exports.DxMinorTickInterval = DxMinorTickInterval;
DxMinorTickInterval.$_optionName = "minorTickInterval";
const DxMinVisualRangeLengthConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxMinVisualRangeLengthConfig);
const DxMinVisualRangeLength = (0, vue_1.defineComponent)(DxMinVisualRangeLengthConfig);
exports.DxMinVisualRangeLength = DxMinVisualRangeLength;
DxMinVisualRangeLength.$_optionName = "minVisualRangeLength";
const DxPaneConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:height": null,
        "update:name": null,
    },
    props: {
        backgroundColor: [Object, String],
        border: Object,
        height: [Number, String],
        name: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPaneConfig);
const DxPane = (0, vue_1.defineComponent)(DxPaneConfig);
exports.DxPane = DxPane;
DxPane.$_optionName = "panes";
DxPane.$_isCollectionItem = true;
DxPane.$_expectedChildren = {
    backgroundColor: { isCollectionItem: false, optionName: "backgroundColor" },
    border: { isCollectionItem: false, optionName: "border" },
    paneBorder: { isCollectionItem: false, optionName: "border" }
};
const DxPaneBorderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:bottom": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:left": null,
        "update:opacity": null,
        "update:right": null,
        "update:top": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        bottom: Boolean,
        color: String,
        dashStyle: String,
        left: Boolean,
        opacity: Number,
        right: Boolean,
        top: Boolean,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPaneBorderConfig);
const DxPaneBorder = (0, vue_1.defineComponent)(DxPaneBorderConfig);
exports.DxPaneBorder = DxPaneBorder;
DxPaneBorder.$_optionName = "border";
const DxPointConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:image": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:size": null,
        "update:symbol": null,
        "update:visible": null,
    },
    props: {
        border: Object,
        color: [Object, String],
        hoverMode: String,
        hoverStyle: Object,
        image: [Object, String],
        selectionMode: String,
        selectionStyle: Object,
        size: Number,
        symbol: String,
        visible: Boolean
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPointConfig);
const DxPoint = (0, vue_1.defineComponent)(DxPointConfig);
exports.DxPoint = DxPoint;
DxPoint.$_optionName = "point";
DxPoint.$_expectedChildren = {
    color: { isCollectionItem: false, optionName: "color" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    image: { isCollectionItem: false, optionName: "image" },
    pointBorder: { isCollectionItem: false, optionName: "border" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" }
};
const DxPointBorderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPointBorderConfig);
const DxPointBorder = (0, vue_1.defineComponent)(DxPointBorderConfig);
exports.DxPointBorder = DxPointBorder;
DxPointBorder.$_optionName = "border";
const DxPointHoverStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:size": null,
    },
    props: {
        border: Object,
        color: [Object, String],
        size: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPointHoverStyleConfig);
const DxPointHoverStyle = (0, vue_1.defineComponent)(DxPointHoverStyleConfig);
exports.DxPointHoverStyle = DxPointHoverStyle;
DxPointHoverStyle.$_optionName = "hoverStyle";
DxPointHoverStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    pointBorder: { isCollectionItem: false, optionName: "border" }
};
const DxPointImageConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:url": null,
        "update:width": null,
    },
    props: {
        height: [Number, Object],
        url: [Object, String],
        width: [Number, Object]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPointImageConfig);
const DxPointImage = (0, vue_1.defineComponent)(DxPointImageConfig);
exports.DxPointImage = DxPointImage;
DxPointImage.$_optionName = "image";
DxPointImage.$_expectedChildren = {
    height: { isCollectionItem: false, optionName: "height" },
    url: { isCollectionItem: false, optionName: "url" },
    width: { isCollectionItem: false, optionName: "width" }
};
const DxPointSelectionStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:size": null,
    },
    props: {
        border: Object,
        color: [Object, String],
        size: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPointSelectionStyleConfig);
const DxPointSelectionStyle = (0, vue_1.defineComponent)(DxPointSelectionStyleConfig);
exports.DxPointSelectionStyle = DxPointSelectionStyle;
DxPointSelectionStyle.$_optionName = "selectionStyle";
DxPointSelectionStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    pointBorder: { isCollectionItem: false, optionName: "border" }
};
const DxReductionConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:level": null,
    },
    props: {
        color: String,
        level: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxReductionConfig);
const DxReduction = (0, vue_1.defineComponent)(DxReductionConfig);
exports.DxReduction = DxReduction;
DxReduction.$_optionName = "reduction";
const DxScrollBarConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:offset": null,
        "update:opacity": null,
        "update:position": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        offset: Number,
        opacity: Number,
        position: String,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxScrollBarConfig);
const DxScrollBar = (0, vue_1.defineComponent)(DxScrollBarConfig);
exports.DxScrollBar = DxScrollBar;
DxScrollBar.$_optionName = "scrollBar";
const DxSelectionStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:hatching": null,
        "update:highlight": null,
        "update:size": null,
        "update:width": null,
    },
    props: {
        border: Object,
        color: [Object, String],
        dashStyle: String,
        hatching: Object,
        highlight: Boolean,
        size: Number,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxSelectionStyleConfig);
const DxSelectionStyle = (0, vue_1.defineComponent)(DxSelectionStyleConfig);
exports.DxSelectionStyle = DxSelectionStyle;
DxSelectionStyle.$_optionName = "selectionStyle";
DxSelectionStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    pointBorder: { isCollectionItem: false, optionName: "border" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
const DxSeriesConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregation": null,
        "update:argumentField": null,
        "update:axis": null,
        "update:barOverlapGroup": null,
        "update:barPadding": null,
        "update:barWidth": null,
        "update:border": null,
        "update:closeValueField": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:highValueField": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:ignoreEmptyPoints": null,
        "update:innerColor": null,
        "update:label": null,
        "update:lowValueField": null,
        "update:maxLabelCount": null,
        "update:minBarSize": null,
        "update:name": null,
        "update:opacity": null,
        "update:openValueField": null,
        "update:pane": null,
        "update:point": null,
        "update:rangeValue1Field": null,
        "update:rangeValue2Field": null,
        "update:reduction": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:showInLegend": null,
        "update:sizeField": null,
        "update:stack": null,
        "update:tag": null,
        "update:tagField": null,
        "update:type": null,
        "update:valueErrorBar": null,
        "update:valueField": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        aggregation: Object,
        argumentField: String,
        axis: String,
        barOverlapGroup: String,
        barPadding: Number,
        barWidth: Number,
        border: Object,
        closeValueField: String,
        color: [Object, String],
        cornerRadius: Number,
        dashStyle: String,
        highValueField: String,
        hoverMode: String,
        hoverStyle: Object,
        ignoreEmptyPoints: Boolean,
        innerColor: String,
        label: Object,
        lowValueField: String,
        maxLabelCount: Number,
        minBarSize: Number,
        name: String,
        opacity: Number,
        openValueField: String,
        pane: String,
        point: Object,
        rangeValue1Field: String,
        rangeValue2Field: String,
        reduction: Object,
        selectionMode: String,
        selectionStyle: Object,
        showInLegend: Boolean,
        sizeField: String,
        stack: String,
        tag: {},
        tagField: String,
        type: String,
        valueErrorBar: Object,
        valueField: String,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxSeriesConfig);
const DxSeries = (0, vue_1.defineComponent)(DxSeriesConfig);
exports.DxSeries = DxSeries;
DxSeries.$_optionName = "series";
DxSeries.$_isCollectionItem = true;
DxSeries.$_expectedChildren = {
    aggregation: { isCollectionItem: false, optionName: "aggregation" },
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    commonSeriesSettingsHoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    commonSeriesSettingsLabel: { isCollectionItem: false, optionName: "label" },
    commonSeriesSettingsSelectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    point: { isCollectionItem: false, optionName: "point" },
    reduction: { isCollectionItem: false, optionName: "reduction" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    seriesBorder: { isCollectionItem: false, optionName: "border" },
    valueErrorBar: { isCollectionItem: false, optionName: "valueErrorBar" }
};
const DxSeriesBorderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxSeriesBorderConfig);
const DxSeriesBorder = (0, vue_1.defineComponent)(DxSeriesBorderConfig);
exports.DxSeriesBorder = DxSeriesBorder;
DxSeriesBorder.$_optionName = "border";
const DxSeriesTemplateConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeSeries": null,
        "update:nameField": null,
    },
    props: {
        customizeSeries: Function,
        nameField: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxSeriesTemplateConfig);
const DxSeriesTemplate = (0, vue_1.defineComponent)(DxSeriesTemplateConfig);
exports.DxSeriesTemplate = DxSeriesTemplate;
DxSeriesTemplate.$_optionName = "seriesTemplate";
const DxShadowConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:blur": null,
        "update:color": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
    },
    props: {
        blur: Number,
        color: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxShadowConfig);
const DxShadow = (0, vue_1.defineComponent)(DxShadowConfig);
exports.DxShadow = DxShadow;
DxShadow.$_optionName = "shadow";
const DxSizeConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:width": null,
    },
    props: {
        height: Number,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxSizeConfig);
const DxSize = (0, vue_1.defineComponent)(DxSizeConfig);
exports.DxSize = DxSize;
DxSize.$_optionName = "size";
const DxStripConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:endValue": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:startValue": null,
    },
    props: {
        color: String,
        endValue: [Date, Number, String],
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        startValue: [Date, Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxStripConfig);
const DxStrip = (0, vue_1.defineComponent)(DxStripConfig);
exports.DxStrip = DxStrip;
DxStrip.$_optionName = "strips";
DxStrip.$_isCollectionItem = true;
DxStrip.$_expectedChildren = {
    label: { isCollectionItem: false, optionName: "label" }
};
const DxStripLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:text": null,
        "update:verticalAlignment": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        text: String,
        verticalAlignment: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxStripLabelConfig);
const DxStripLabel = (0, vue_1.defineComponent)(DxStripLabelConfig);
exports.DxStripLabel = DxStripLabel;
DxStripLabel.$_optionName = "label";
DxStripLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxStripStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:label": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
    },
    props: {
        label: Object,
        paddingLeftRight: Number,
        paddingTopBottom: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxStripStyleConfig);
const DxStripStyle = (0, vue_1.defineComponent)(DxStripStyleConfig);
exports.DxStripStyle = DxStripStyle;
DxStripStyle.$_optionName = "stripStyle";
DxStripStyle.$_expectedChildren = {
    label: { isCollectionItem: false, optionName: "label" }
};
const DxStripStyleLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:verticalAlignment": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        verticalAlignment: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxStripStyleLabelConfig);
const DxStripStyleLabel = (0, vue_1.defineComponent)(DxStripStyleLabelConfig);
exports.DxStripStyleLabel = DxStripStyleLabel;
DxStripStyleLabel.$_optionName = "label";
DxStripStyleLabel.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxSubtitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxSubtitleConfig);
const DxSubtitle = (0, vue_1.defineComponent)(DxSubtitleConfig);
exports.DxSubtitle = DxSubtitle;
DxSubtitle.$_optionName = "subtitle";
DxSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxTickConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:length": null,
        "update:opacity": null,
        "update:shift": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        length: Number,
        opacity: Number,
        shift: Number,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxTickConfig);
const DxTick = (0, vue_1.defineComponent)(DxTickConfig);
exports.DxTick = DxTick;
DxTick.$_optionName = "tick";
const DxTickIntervalConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:days": null,
        "update:hours": null,
        "update:milliseconds": null,
        "update:minutes": null,
        "update:months": null,
        "update:quarters": null,
        "update:seconds": null,
        "update:weeks": null,
        "update:years": null,
    },
    props: {
        days: Number,
        hours: Number,
        milliseconds: Number,
        minutes: Number,
        months: Number,
        quarters: Number,
        seconds: Number,
        weeks: Number,
        years: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxTickIntervalConfig);
const DxTickInterval = (0, vue_1.defineComponent)(DxTickIntervalConfig);
exports.DxTickInterval = DxTickInterval;
DxTickInterval.$_optionName = "tickInterval";
const DxTitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:alignment": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:wordWrap": null,
    },
    props: {
        alignment: String,
        font: Object,
        horizontalAlignment: String,
        margin: [Number, Object],
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxTitleConfig);
const DxTitle = (0, vue_1.defineComponent)(DxTitleConfig);
exports.DxTitle = DxTitle;
DxTitle.$_optionName = "title";
DxTitle.$_expectedChildren = {
    chartTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    font: { isCollectionItem: false, optionName: "font" },
    legendTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    margin: { isCollectionItem: false, optionName: "margin" }
};
const DxTooltipConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:argumentFormat": null,
        "update:arrowLength": null,
        "update:border": null,
        "update:color": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:cornerRadius": null,
        "update:customizeTooltip": null,
        "update:enabled": null,
        "update:font": null,
        "update:format": null,
        "update:interactive": null,
        "update:location": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:shadow": null,
        "update:shared": null,
        "update:zIndex": null,
    },
    props: {
        argumentFormat: [Object, String, Function],
        arrowLength: Number,
        border: Object,
        color: String,
        container: {},
        contentTemplate: {},
        cornerRadius: Number,
        customizeTooltip: Function,
        enabled: Boolean,
        font: Object,
        format: [Object, String, Function],
        interactive: Boolean,
        location: String,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        shadow: Object,
        shared: Boolean,
        zIndex: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxTooltipConfig);
const DxTooltip = (0, vue_1.defineComponent)(DxTooltipConfig);
exports.DxTooltip = DxTooltip;
DxTooltip.$_optionName = "tooltip";
DxTooltip.$_expectedChildren = {
    argumentFormat: { isCollectionItem: false, optionName: "argumentFormat" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    shadow: { isCollectionItem: false, optionName: "shadow" },
    tooltipBorder: { isCollectionItem: false, optionName: "border" }
};
const DxTooltipBorderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxTooltipBorderConfig);
const DxTooltipBorder = (0, vue_1.defineComponent)(DxTooltipBorderConfig);
exports.DxTooltipBorder = DxTooltipBorder;
DxTooltipBorder.$_optionName = "border";
const DxUrlConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:rangeMaxPoint": null,
        "update:rangeMinPoint": null,
    },
    props: {
        rangeMaxPoint: String,
        rangeMinPoint: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxUrlConfig);
const DxUrl = (0, vue_1.defineComponent)(DxUrlConfig);
exports.DxUrl = DxUrl;
DxUrl.$_optionName = "url";
const DxValueAxisConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:aggregatedPointsPosition": null,
        "update:allowDecimals": null,
        "update:autoBreaksEnabled": null,
        "update:axisDivisionFactor": null,
        "update:breaks": null,
        "update:breakStyle": null,
        "update:categories": null,
        "update:color": null,
        "update:constantLines": null,
        "update:constantLineStyle": null,
        "update:customPosition": null,
        "update:discreteAxisDivisionMode": null,
        "update:endOnTick": null,
        "update:grid": null,
        "update:inverted": null,
        "update:label": null,
        "update:linearThreshold": null,
        "update:logarithmBase": null,
        "update:maxAutoBreakCount": null,
        "update:maxValueMargin": null,
        "update:minorGrid": null,
        "update:minorTick": null,
        "update:minorTickCount": null,
        "update:minorTickInterval": null,
        "update:minValueMargin": null,
        "update:minVisualRangeLength": null,
        "update:multipleAxesSpacing": null,
        "update:name": null,
        "update:offset": null,
        "update:opacity": null,
        "update:pane": null,
        "update:placeholderSize": null,
        "update:position": null,
        "update:showZero": null,
        "update:strips": null,
        "update:stripStyle": null,
        "update:synchronizedValue": null,
        "update:tick": null,
        "update:tickInterval": null,
        "update:title": null,
        "update:type": null,
        "update:valueMarginsEnabled": null,
        "update:valueType": null,
        "update:visible": null,
        "update:visualRange": null,
        "update:visualRangeUpdateMode": null,
        "update:wholeRange": null,
        "update:width": null,
    },
    props: {
        aggregatedPointsPosition: String,
        allowDecimals: Boolean,
        autoBreaksEnabled: Boolean,
        axisDivisionFactor: Number,
        breaks: Array,
        breakStyle: Object,
        categories: Array,
        color: String,
        constantLines: Array,
        constantLineStyle: Object,
        customPosition: [Date, Number, String],
        discreteAxisDivisionMode: String,
        endOnTick: Boolean,
        grid: Object,
        inverted: Boolean,
        label: Object,
        linearThreshold: Number,
        logarithmBase: Number,
        maxAutoBreakCount: Number,
        maxValueMargin: Number,
        minorGrid: Object,
        minorTick: Object,
        minorTickCount: Number,
        minorTickInterval: [Number, Object, String],
        minValueMargin: Number,
        minVisualRangeLength: [Number, Object, String],
        multipleAxesSpacing: Number,
        name: String,
        offset: Number,
        opacity: Number,
        pane: String,
        placeholderSize: Number,
        position: String,
        showZero: Boolean,
        strips: Array,
        stripStyle: Object,
        synchronizedValue: Number,
        tick: Object,
        tickInterval: [Number, Object, String],
        title: [Object, String],
        type: String,
        valueMarginsEnabled: Boolean,
        valueType: String,
        visible: Boolean,
        visualRange: [Array, Object],
        visualRangeUpdateMode: String,
        wholeRange: [Array, Object],
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxValueAxisConfig);
const DxValueAxis = (0, vue_1.defineComponent)(DxValueAxisConfig);
exports.DxValueAxis = DxValueAxis;
DxValueAxis.$_optionName = "valueAxis";
DxValueAxis.$_isCollectionItem = true;
DxValueAxis.$_expectedChildren = {
    axisConstantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    axisLabel: { isCollectionItem: false, optionName: "label" },
    axisTitle: { isCollectionItem: false, optionName: "title" },
    break: { isCollectionItem: true, optionName: "breaks" },
    breakStyle: { isCollectionItem: false, optionName: "breakStyle" },
    constantLine: { isCollectionItem: true, optionName: "constantLines" },
    constantLineStyle: { isCollectionItem: false, optionName: "constantLineStyle" },
    grid: { isCollectionItem: false, optionName: "grid" },
    label: { isCollectionItem: false, optionName: "label" },
    minorGrid: { isCollectionItem: false, optionName: "minorGrid" },
    minorTick: { isCollectionItem: false, optionName: "minorTick" },
    minorTickInterval: { isCollectionItem: false, optionName: "minorTickInterval" },
    minVisualRangeLength: { isCollectionItem: false, optionName: "minVisualRangeLength" },
    strip: { isCollectionItem: true, optionName: "strips" },
    stripStyle: { isCollectionItem: false, optionName: "stripStyle" },
    tick: { isCollectionItem: false, optionName: "tick" },
    tickInterval: { isCollectionItem: false, optionName: "tickInterval" },
    title: { isCollectionItem: false, optionName: "title" },
    visualRange: { isCollectionItem: false, optionName: "visualRange" },
    wholeRange: { isCollectionItem: false, optionName: "wholeRange" }
};
const DxValueErrorBarConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:displayMode": null,
        "update:edgeLength": null,
        "update:highValueField": null,
        "update:lineWidth": null,
        "update:lowValueField": null,
        "update:opacity": null,
        "update:type": null,
        "update:value": null,
    },
    props: {
        color: String,
        displayMode: String,
        edgeLength: Number,
        highValueField: String,
        lineWidth: Number,
        lowValueField: String,
        opacity: Number,
        type: String,
        value: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxValueErrorBarConfig);
const DxValueErrorBar = (0, vue_1.defineComponent)(DxValueErrorBarConfig);
exports.DxValueErrorBar = DxValueErrorBar;
DxValueErrorBar.$_optionName = "valueErrorBar";
const DxVerticalLineConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:label": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        label: Object,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxVerticalLineConfig);
const DxVerticalLine = (0, vue_1.defineComponent)(DxVerticalLineConfig);
exports.DxVerticalLine = DxVerticalLine;
DxVerticalLine.$_optionName = "verticalLine";
DxVerticalLine.$_expectedChildren = {
    horizontalLineLabel: { isCollectionItem: false, optionName: "label" },
    label: { isCollectionItem: false, optionName: "label" }
};
const DxVisualRangeConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:endValue": null,
        "update:length": null,
        "update:startValue": null,
    },
    props: {
        endValue: [Date, Number, String],
        length: [Number, Object, String],
        startValue: [Date, Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxVisualRangeConfig);
const DxVisualRange = (0, vue_1.defineComponent)(DxVisualRangeConfig);
exports.DxVisualRange = DxVisualRange;
DxVisualRange.$_optionName = "visualRange";
DxVisualRange.$_expectedChildren = {
    length: { isCollectionItem: false, optionName: "length" }
};
const DxWholeRangeConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:endValue": null,
        "update:length": null,
        "update:startValue": null,
    },
    props: {
        endValue: [Date, Number, String],
        length: [Number, Object, String],
        startValue: [Date, Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxWholeRangeConfig);
const DxWholeRange = (0, vue_1.defineComponent)(DxWholeRangeConfig);
exports.DxWholeRange = DxWholeRange;
DxWholeRange.$_optionName = "wholeRange";
DxWholeRange.$_expectedChildren = {
    length: { isCollectionItem: false, optionName: "length" }
};
const DxWidthConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:rangeMaxPoint": null,
        "update:rangeMinPoint": null,
    },
    props: {
        rangeMaxPoint: Number,
        rangeMinPoint: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxWidthConfig);
const DxWidth = (0, vue_1.defineComponent)(DxWidthConfig);
exports.DxWidth = DxWidth;
DxWidth.$_optionName = "width";
const DxZoomAndPanConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowMouseWheel": null,
        "update:allowTouchGestures": null,
        "update:argumentAxis": null,
        "update:dragBoxStyle": null,
        "update:dragToZoom": null,
        "update:panKey": null,
        "update:valueAxis": null,
    },
    props: {
        allowMouseWheel: Boolean,
        allowTouchGestures: Boolean,
        argumentAxis: String,
        dragBoxStyle: Object,
        dragToZoom: Boolean,
        panKey: String,
        valueAxis: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxZoomAndPanConfig);
const DxZoomAndPan = (0, vue_1.defineComponent)(DxZoomAndPanConfig);
exports.DxZoomAndPan = DxZoomAndPan;
DxZoomAndPan.$_optionName = "zoomAndPan";
DxZoomAndPan.$_expectedChildren = {
    dragBoxStyle: { isCollectionItem: false, optionName: "dragBoxStyle" }
};
exports.default = DxChart;
