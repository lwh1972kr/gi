/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

export { ExplicitTypes } from "devextreme/ui/data_grid";
import { PropType } from "vue";
import DataGrid, { Properties } from "devextreme/ui/data_grid";
import DataSource from "devextreme/data/data_source";
import dxDataGrid from "devextreme/ui/data_grid";
import dxOverlay from "devextreme/ui/overlay";
import DOMComponent from "devextreme/core/dom_component";
import dxPopup from "devextreme/ui/popup";
import dxSortable from "devextreme/ui/sortable";
import dxDraggable from "devextreme/ui/draggable";
import { ColumnResizeMode, Pager, DataChangeType, FilterType, FixedPosition, SelectedFilterOperation, ColumnChooserMode, ColumnChooserSearchConfig, ColumnChooserSelectionConfig, HeaderFilterGroupInterval, ColumnHeaderFilterSearchConfig, HeaderFilterSearchConfig, SelectionColumnDisplayMode, DataChange, GridsEditMode, NewRowPosition, GridsEditRefreshMode, StartEditAction, GridBase, ApplyFilterMode, GroupExpandMode, EnterKeyAction, EnterKeyDirection, PagerPageSize, DataRenderMode, StateStoreType } from "devextreme/common/grids";
import { dxDataGridColumn, AdaptiveDetailRowPreparingEvent, CellClickEvent, CellDblClickEvent, CellHoverChangedEvent, CellPreparedEvent, ContentReadyEvent, ContextMenuPreparingEvent, DataErrorOccurredEvent, DisposingEvent, EditCanceledEvent, EditCancelingEvent, EditingStartEvent, EditorPreparedEvent, EditorPreparingEvent, ExportingEvent, FocusedCellChangedEvent, FocusedCellChangingEvent, FocusedRowChangedEvent, FocusedRowChangingEvent, InitializedEvent, InitNewRowEvent, KeyDownEvent, OptionChangedEvent, RowClickEvent, RowCollapsedEvent, RowCollapsingEvent, RowDblClickEvent, RowExpandedEvent, RowExpandingEvent, RowInsertedEvent, RowInsertingEvent, RowPreparedEvent, RowRemovedEvent, RowRemovingEvent, RowUpdatedEvent, RowUpdatingEvent, RowValidatingEvent, SavedEvent, SavingEvent, SelectionChangedEvent, ToolbarPreparingEvent, dxDataGridRowObject, DataGridPredefinedColumnButton, ColumnButtonClickEvent, dxDataGridColumnButton, DataGridCommandColumnType, SelectionSensitivity, DataGridPredefinedToolbarItem, DataGridScrollMode } from "devextreme/ui/data_grid";
import { ValidationRuleType, HorizontalAlignment, VerticalAlignment, DataType, SortOrder, SearchMode, ComparisonOperator, SingleMultipleOrNone, SelectAllMode, PositionAlignment, Direction, ToolbarItemLocation, ToolbarItemComponent, DisplayMode, DragDirection, DragHighlight, ScrollbarMode } from "devextreme/common";
import { DataSourceOptions } from "devextreme/common/data";
import { Store } from "devextreme/data/store";
import { dxFilterBuilderOptions, dxFilterBuilderField, FieldInfo, dxFilterBuilderCustomOperation, GroupOperation, ContentReadyEvent as FilterBuilderContentReadyEvent, DisposingEvent as FilterBuilderDisposingEvent, EditorPreparedEvent as FilterBuilderEditorPreparedEvent, EditorPreparingEvent as FilterBuilderEditorPreparingEvent, InitializedEvent as FilterBuilderInitializedEvent, OptionChangedEvent as FilterBuilderOptionChangedEvent, ValueChangedEvent } from "devextreme/ui/filter_builder";
import { dxPopupOptions, ToolbarLocation } from "devextreme/ui/popup";
import { PagerBase } from "devextreme/ui/pagination";
import { AnimationConfig, CollisionResolution, PositionConfig, AnimationState, AnimationType, CollisionResolutionCombination } from "devextreme/common/core/animation";
import { dxFormSimpleItem, dxFormOptions, dxFormGroupItem, dxFormTabbedItem, dxFormEmptyItem, dxFormButtonItem, LabelLocation, FormLabelMode, ContentReadyEvent as FormContentReadyEvent, DisposingEvent as FormDisposingEvent, EditorEnterKeyEvent, FieldDataChangedEvent, InitializedEvent as FormInitializedEvent, OptionChangedEvent as FormOptionChangedEvent, FormItemComponent, FormItemType } from "devextreme/ui/form";
import { event } from "devextreme/events/events.types";
import { EventInfo } from "devextreme/common/core/events";
import { Component } from "devextreme/core/component";
import { LocateInMenuMode, ShowTextMode } from "devextreme/ui/toolbar";
import * as CommonTypes from "devextreme/common";
type AccessibleOptions = Pick<Properties, "accessKey" | "activeStateEnabled" | "allowColumnReordering" | "allowColumnResizing" | "autoNavigateToFocusedRow" | "cacheEnabled" | "cellHintEnabled" | "columnAutoWidth" | "columnChooser" | "columnFixing" | "columnHidingEnabled" | "columnMinWidth" | "columnResizingMode" | "columns" | "columnWidth" | "customizeColumns" | "dataRowTemplate" | "dataSource" | "dateSerializationFormat" | "disabled" | "editing" | "elementAttr" | "errorRowEnabled" | "export" | "filterBuilder" | "filterBuilderPopup" | "filterPanel" | "filterRow" | "filterSyncEnabled" | "filterValue" | "focusedColumnIndex" | "focusedRowEnabled" | "focusedRowIndex" | "focusedRowKey" | "grouping" | "groupPanel" | "headerFilter" | "height" | "highlightChanges" | "hint" | "hoverStateEnabled" | "keyboardNavigation" | "keyExpr" | "loadPanel" | "masterDetail" | "noDataText" | "onAdaptiveDetailRowPreparing" | "onCellClick" | "onCellDblClick" | "onCellHoverChanged" | "onCellPrepared" | "onContentReady" | "onContextMenuPreparing" | "onDataErrorOccurred" | "onDisposing" | "onEditCanceled" | "onEditCanceling" | "onEditingStart" | "onEditorPrepared" | "onEditorPreparing" | "onExporting" | "onFocusedCellChanged" | "onFocusedCellChanging" | "onFocusedRowChanged" | "onFocusedRowChanging" | "onInitialized" | "onInitNewRow" | "onKeyDown" | "onOptionChanged" | "onRowClick" | "onRowCollapsed" | "onRowCollapsing" | "onRowDblClick" | "onRowExpanded" | "onRowExpanding" | "onRowInserted" | "onRowInserting" | "onRowPrepared" | "onRowRemoved" | "onRowRemoving" | "onRowUpdated" | "onRowUpdating" | "onRowValidating" | "onSaved" | "onSaving" | "onSelectionChanged" | "onToolbarPreparing" | "pager" | "paging" | "remoteOperations" | "renderAsync" | "repaintChangesOnly" | "rowAlternationEnabled" | "rowDragging" | "rowTemplate" | "rtlEnabled" | "scrolling" | "searchPanel" | "selectedRowKeys" | "selection" | "selectionFilter" | "showBorders" | "showColumnHeaders" | "showColumnLines" | "showRowLines" | "sortByGroupSummaryInfo" | "sorting" | "stateStoring" | "summary" | "syncLookupFilterValues" | "tabIndex" | "toolbar" | "twoWayBindingEnabled" | "visible" | "width" | "wordWrapEnabled">;
interface DxDataGrid extends AccessibleOptions {
    readonly instance?: DataGrid;
}
declare const DxDataGrid: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowColumnReordering: BooleanConstructor;
    allowColumnResizing: BooleanConstructor;
    autoNavigateToFocusedRow: BooleanConstructor;
    cacheEnabled: BooleanConstructor;
    cellHintEnabled: BooleanConstructor;
    columnAutoWidth: BooleanConstructor;
    columnChooser: PropType<Record<string, any>>;
    columnFixing: PropType<Record<string, any>>;
    columnHidingEnabled: BooleanConstructor;
    columnMinWidth: NumberConstructor;
    columnResizingMode: PropType<ColumnResizeMode>;
    columns: PropType<(string | dxDataGridColumn<any, any>)[]>;
    columnWidth: PropType<number | "auto">;
    customizeColumns: PropType<(columns: Array<dxDataGridColumn>) => void>;
    dataRowTemplate: {};
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    dateSerializationFormat: StringConstructor;
    disabled: BooleanConstructor;
    editing: PropType<Record<string, any>>;
    elementAttr: PropType<Record<string, any>>;
    errorRowEnabled: BooleanConstructor;
    export: PropType<Record<string, any>>;
    filterBuilder: PropType<Record<string, any> | dxFilterBuilderOptions>;
    filterBuilderPopup: PropType<Record<string, any> | dxPopupOptions<any>>;
    filterPanel: PropType<Record<string, any>>;
    filterRow: PropType<Record<string, any>>;
    filterSyncEnabled: PropType<boolean | "auto">;
    filterValue: PropType<string | any[] | (() => any)>;
    focusedColumnIndex: NumberConstructor;
    focusedRowEnabled: BooleanConstructor;
    focusedRowIndex: NumberConstructor;
    focusedRowKey: {};
    grouping: PropType<Record<string, any>>;
    groupPanel: PropType<Record<string, any>>;
    headerFilter: PropType<Record<string, any>>;
    height: PropType<string | number | (() => number | string)>;
    highlightChanges: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    keyboardNavigation: PropType<Record<string, any>>;
    keyExpr: PropType<string | string[]>;
    loadPanel: PropType<Record<string, any>>;
    masterDetail: PropType<Record<string, any>>;
    noDataText: StringConstructor;
    onAdaptiveDetailRowPreparing: PropType<(e: AdaptiveDetailRowPreparingEvent) => void>;
    onCellClick: PropType<(e: CellClickEvent) => void>;
    onCellDblClick: PropType<(e: CellDblClickEvent) => void>;
    onCellHoverChanged: PropType<(e: CellHoverChangedEvent) => void>;
    onCellPrepared: PropType<(e: CellPreparedEvent) => void>;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onContextMenuPreparing: PropType<(e: ContextMenuPreparingEvent) => void>;
    onDataErrorOccurred: PropType<(e: DataErrorOccurredEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onEditCanceled: PropType<(e: EditCanceledEvent) => void>;
    onEditCanceling: PropType<(e: EditCancelingEvent) => void>;
    onEditingStart: PropType<(e: EditingStartEvent) => void>;
    onEditorPrepared: PropType<(e: EditorPreparedEvent) => void>;
    onEditorPreparing: PropType<(e: EditorPreparingEvent) => void>;
    onExporting: PropType<(e: ExportingEvent) => void>;
    onFocusedCellChanged: PropType<(e: FocusedCellChangedEvent) => void>;
    onFocusedCellChanging: PropType<(e: FocusedCellChangingEvent) => void>;
    onFocusedRowChanged: PropType<(e: FocusedRowChangedEvent) => void>;
    onFocusedRowChanging: PropType<(e: FocusedRowChangingEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onInitNewRow: PropType<(e: InitNewRowEvent) => void>;
    onKeyDown: PropType<(e: KeyDownEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onRowClick: PropType<(e: RowClickEvent) => void>;
    onRowCollapsed: PropType<(e: RowCollapsedEvent) => void>;
    onRowCollapsing: PropType<(e: RowCollapsingEvent) => void>;
    onRowDblClick: PropType<(e: RowDblClickEvent) => void>;
    onRowExpanded: PropType<(e: RowExpandedEvent) => void>;
    onRowExpanding: PropType<(e: RowExpandingEvent) => void>;
    onRowInserted: PropType<(e: RowInsertedEvent) => void>;
    onRowInserting: PropType<(e: RowInsertingEvent) => void>;
    onRowPrepared: PropType<(e: RowPreparedEvent) => void>;
    onRowRemoved: PropType<(e: RowRemovedEvent) => void>;
    onRowRemoving: PropType<(e: RowRemovingEvent) => void>;
    onRowUpdated: PropType<(e: RowUpdatedEvent) => void>;
    onRowUpdating: PropType<(e: RowUpdatingEvent) => void>;
    onRowValidating: PropType<(e: RowValidatingEvent) => void>;
    onSaved: PropType<(e: SavedEvent) => void>;
    onSaving: PropType<(e: SavingEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    onToolbarPreparing: PropType<(e: ToolbarPreparingEvent) => void>;
    pager: PropType<Record<string, any> | PagerBase | Pager>;
    paging: PropType<Record<string, any>>;
    remoteOperations: PropType<boolean | Record<string, any> | "auto">;
    renderAsync: BooleanConstructor;
    repaintChangesOnly: BooleanConstructor;
    rowAlternationEnabled: BooleanConstructor;
    rowDragging: PropType<Record<string, any>>;
    rowTemplate: {};
    rtlEnabled: BooleanConstructor;
    scrolling: PropType<Record<string, any>>;
    searchPanel: PropType<Record<string, any>>;
    selectedRowKeys: PropType<any[]>;
    selection: PropType<Record<string, any>>;
    selectionFilter: PropType<string | any[] | (() => any)>;
    showBorders: BooleanConstructor;
    showColumnHeaders: BooleanConstructor;
    showColumnLines: BooleanConstructor;
    showRowLines: BooleanConstructor;
    sortByGroupSummaryInfo: PropType<Record<string, any>[]>;
    sorting: PropType<Record<string, any>>;
    stateStoring: PropType<Record<string, any>>;
    summary: PropType<Record<string, any>>;
    syncLookupFilterValues: BooleanConstructor;
    tabIndex: NumberConstructor;
    toolbar: PropType<Record<string, any> | DxDataGridTypes.Toolbar>;
    twoWayBindingEnabled: BooleanConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
    wordWrapEnabled: BooleanConstructor;
}, unknown, unknown, {
    instance(): DataGrid;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:allowColumnReordering": null;
    "update:allowColumnResizing": null;
    "update:autoNavigateToFocusedRow": null;
    "update:cacheEnabled": null;
    "update:cellHintEnabled": null;
    "update:columnAutoWidth": null;
    "update:columnChooser": null;
    "update:columnFixing": null;
    "update:columnHidingEnabled": null;
    "update:columnMinWidth": null;
    "update:columnResizingMode": null;
    "update:columns": null;
    "update:columnWidth": null;
    "update:customizeColumns": null;
    "update:dataRowTemplate": null;
    "update:dataSource": null;
    "update:dateSerializationFormat": null;
    "update:disabled": null;
    "update:editing": null;
    "update:elementAttr": null;
    "update:errorRowEnabled": null;
    "update:export": null;
    "update:filterBuilder": null;
    "update:filterBuilderPopup": null;
    "update:filterPanel": null;
    "update:filterRow": null;
    "update:filterSyncEnabled": null;
    "update:filterValue": null;
    "update:focusedColumnIndex": null;
    "update:focusedRowEnabled": null;
    "update:focusedRowIndex": null;
    "update:focusedRowKey": null;
    "update:grouping": null;
    "update:groupPanel": null;
    "update:headerFilter": null;
    "update:height": null;
    "update:highlightChanges": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:keyboardNavigation": null;
    "update:keyExpr": null;
    "update:loadPanel": null;
    "update:masterDetail": null;
    "update:noDataText": null;
    "update:onAdaptiveDetailRowPreparing": null;
    "update:onCellClick": null;
    "update:onCellDblClick": null;
    "update:onCellHoverChanged": null;
    "update:onCellPrepared": null;
    "update:onContentReady": null;
    "update:onContextMenuPreparing": null;
    "update:onDataErrorOccurred": null;
    "update:onDisposing": null;
    "update:onEditCanceled": null;
    "update:onEditCanceling": null;
    "update:onEditingStart": null;
    "update:onEditorPrepared": null;
    "update:onEditorPreparing": null;
    "update:onExporting": null;
    "update:onFocusedCellChanged": null;
    "update:onFocusedCellChanging": null;
    "update:onFocusedRowChanged": null;
    "update:onFocusedRowChanging": null;
    "update:onInitialized": null;
    "update:onInitNewRow": null;
    "update:onKeyDown": null;
    "update:onOptionChanged": null;
    "update:onRowClick": null;
    "update:onRowCollapsed": null;
    "update:onRowCollapsing": null;
    "update:onRowDblClick": null;
    "update:onRowExpanded": null;
    "update:onRowExpanding": null;
    "update:onRowInserted": null;
    "update:onRowInserting": null;
    "update:onRowPrepared": null;
    "update:onRowRemoved": null;
    "update:onRowRemoving": null;
    "update:onRowUpdated": null;
    "update:onRowUpdating": null;
    "update:onRowValidating": null;
    "update:onSaved": null;
    "update:onSaving": null;
    "update:onSelectionChanged": null;
    "update:onToolbarPreparing": null;
    "update:pager": null;
    "update:paging": null;
    "update:remoteOperations": null;
    "update:renderAsync": null;
    "update:repaintChangesOnly": null;
    "update:rowAlternationEnabled": null;
    "update:rowDragging": null;
    "update:rowTemplate": null;
    "update:rtlEnabled": null;
    "update:scrolling": null;
    "update:searchPanel": null;
    "update:selectedRowKeys": null;
    "update:selection": null;
    "update:selectionFilter": null;
    "update:showBorders": null;
    "update:showColumnHeaders": null;
    "update:showColumnLines": null;
    "update:showRowLines": null;
    "update:sortByGroupSummaryInfo": null;
    "update:sorting": null;
    "update:stateStoring": null;
    "update:summary": null;
    "update:syncLookupFilterValues": null;
    "update:tabIndex": null;
    "update:toolbar": null;
    "update:twoWayBindingEnabled": null;
    "update:visible": null;
    "update:width": null;
    "update:wordWrapEnabled": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowColumnReordering: BooleanConstructor;
    allowColumnResizing: BooleanConstructor;
    autoNavigateToFocusedRow: BooleanConstructor;
    cacheEnabled: BooleanConstructor;
    cellHintEnabled: BooleanConstructor;
    columnAutoWidth: BooleanConstructor;
    columnChooser: PropType<Record<string, any>>;
    columnFixing: PropType<Record<string, any>>;
    columnHidingEnabled: BooleanConstructor;
    columnMinWidth: NumberConstructor;
    columnResizingMode: PropType<ColumnResizeMode>;
    columns: PropType<(string | dxDataGridColumn<any, any>)[]>;
    columnWidth: PropType<number | "auto">;
    customizeColumns: PropType<(columns: Array<dxDataGridColumn>) => void>;
    dataRowTemplate: {};
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    dateSerializationFormat: StringConstructor;
    disabled: BooleanConstructor;
    editing: PropType<Record<string, any>>;
    elementAttr: PropType<Record<string, any>>;
    errorRowEnabled: BooleanConstructor;
    export: PropType<Record<string, any>>;
    filterBuilder: PropType<Record<string, any> | dxFilterBuilderOptions>;
    filterBuilderPopup: PropType<Record<string, any> | dxPopupOptions<any>>;
    filterPanel: PropType<Record<string, any>>;
    filterRow: PropType<Record<string, any>>;
    filterSyncEnabled: PropType<boolean | "auto">;
    filterValue: PropType<string | any[] | (() => any)>;
    focusedColumnIndex: NumberConstructor;
    focusedRowEnabled: BooleanConstructor;
    focusedRowIndex: NumberConstructor;
    focusedRowKey: {};
    grouping: PropType<Record<string, any>>;
    groupPanel: PropType<Record<string, any>>;
    headerFilter: PropType<Record<string, any>>;
    height: PropType<string | number | (() => number | string)>;
    highlightChanges: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    keyboardNavigation: PropType<Record<string, any>>;
    keyExpr: PropType<string | string[]>;
    loadPanel: PropType<Record<string, any>>;
    masterDetail: PropType<Record<string, any>>;
    noDataText: StringConstructor;
    onAdaptiveDetailRowPreparing: PropType<(e: AdaptiveDetailRowPreparingEvent) => void>;
    onCellClick: PropType<(e: CellClickEvent) => void>;
    onCellDblClick: PropType<(e: CellDblClickEvent) => void>;
    onCellHoverChanged: PropType<(e: CellHoverChangedEvent) => void>;
    onCellPrepared: PropType<(e: CellPreparedEvent) => void>;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onContextMenuPreparing: PropType<(e: ContextMenuPreparingEvent) => void>;
    onDataErrorOccurred: PropType<(e: DataErrorOccurredEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onEditCanceled: PropType<(e: EditCanceledEvent) => void>;
    onEditCanceling: PropType<(e: EditCancelingEvent) => void>;
    onEditingStart: PropType<(e: EditingStartEvent) => void>;
    onEditorPrepared: PropType<(e: EditorPreparedEvent) => void>;
    onEditorPreparing: PropType<(e: EditorPreparingEvent) => void>;
    onExporting: PropType<(e: ExportingEvent) => void>;
    onFocusedCellChanged: PropType<(e: FocusedCellChangedEvent) => void>;
    onFocusedCellChanging: PropType<(e: FocusedCellChangingEvent) => void>;
    onFocusedRowChanged: PropType<(e: FocusedRowChangedEvent) => void>;
    onFocusedRowChanging: PropType<(e: FocusedRowChangingEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onInitNewRow: PropType<(e: InitNewRowEvent) => void>;
    onKeyDown: PropType<(e: KeyDownEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onRowClick: PropType<(e: RowClickEvent) => void>;
    onRowCollapsed: PropType<(e: RowCollapsedEvent) => void>;
    onRowCollapsing: PropType<(e: RowCollapsingEvent) => void>;
    onRowDblClick: PropType<(e: RowDblClickEvent) => void>;
    onRowExpanded: PropType<(e: RowExpandedEvent) => void>;
    onRowExpanding: PropType<(e: RowExpandingEvent) => void>;
    onRowInserted: PropType<(e: RowInsertedEvent) => void>;
    onRowInserting: PropType<(e: RowInsertingEvent) => void>;
    onRowPrepared: PropType<(e: RowPreparedEvent) => void>;
    onRowRemoved: PropType<(e: RowRemovedEvent) => void>;
    onRowRemoving: PropType<(e: RowRemovingEvent) => void>;
    onRowUpdated: PropType<(e: RowUpdatedEvent) => void>;
    onRowUpdating: PropType<(e: RowUpdatingEvent) => void>;
    onRowValidating: PropType<(e: RowValidatingEvent) => void>;
    onSaved: PropType<(e: SavedEvent) => void>;
    onSaving: PropType<(e: SavingEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    onToolbarPreparing: PropType<(e: ToolbarPreparingEvent) => void>;
    pager: PropType<Record<string, any> | PagerBase | Pager>;
    paging: PropType<Record<string, any>>;
    remoteOperations: PropType<boolean | Record<string, any> | "auto">;
    renderAsync: BooleanConstructor;
    repaintChangesOnly: BooleanConstructor;
    rowAlternationEnabled: BooleanConstructor;
    rowDragging: PropType<Record<string, any>>;
    rowTemplate: {};
    rtlEnabled: BooleanConstructor;
    scrolling: PropType<Record<string, any>>;
    searchPanel: PropType<Record<string, any>>;
    selectedRowKeys: PropType<any[]>;
    selection: PropType<Record<string, any>>;
    selectionFilter: PropType<string | any[] | (() => any)>;
    showBorders: BooleanConstructor;
    showColumnHeaders: BooleanConstructor;
    showColumnLines: BooleanConstructor;
    showRowLines: BooleanConstructor;
    sortByGroupSummaryInfo: PropType<Record<string, any>[]>;
    sorting: PropType<Record<string, any>>;
    stateStoring: PropType<Record<string, any>>;
    summary: PropType<Record<string, any>>;
    syncLookupFilterValues: BooleanConstructor;
    tabIndex: NumberConstructor;
    toolbar: PropType<Record<string, any> | DxDataGridTypes.Toolbar>;
    twoWayBindingEnabled: BooleanConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
    wordWrapEnabled: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:keyExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:noDataText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:repaintChangesOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onKeyDown"?: ((...args: any[]) => any) | undefined;
    "onUpdate:toolbar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:export"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onExporting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dateSerializationFormat"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowColumnReordering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowColumnResizing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:autoNavigateToFocusedRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cacheEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cellHintEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columnAutoWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columnChooser"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columnFixing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columnHidingEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columnMinWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columnResizingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columns"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columnWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeColumns"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataRowTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:errorRowEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterBuilder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterBuilderPopup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterPanel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterSyncEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusedColumnIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusedRowEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusedRowIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusedRowKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:grouping"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupPanel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:headerFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highlightChanges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:keyboardNavigation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:loadPanel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:masterDetail"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAdaptiveDetailRowPreparing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCellClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCellDblClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCellHoverChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCellPrepared"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContextMenuPreparing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDataErrorOccurred"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditCanceled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditCanceling"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditingStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditorPrepared"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditorPreparing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusedCellChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusedCellChanging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusedRowChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusedRowChanging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitNewRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowCollapsed"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowCollapsing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowDblClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowExpanded"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowExpanding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowInserted"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowInserting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowPrepared"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowRemoved"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowRemoving"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowUpdated"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowUpdating"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRowValidating"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSaved"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSaving"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onToolbarPreparing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pager"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:remoteOperations"?: ((...args: any[]) => any) | undefined;
    "onUpdate:renderAsync"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rowAlternationEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rowDragging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rowTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrolling"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchPanel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedRowKeys"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selection"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectionFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showBorders"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showColumnHeaders"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showColumnLines"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showRowLines"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortByGroupSummaryInfo"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sorting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stateStoring"?: ((...args: any[]) => any) | undefined;
    "onUpdate:summary"?: ((...args: any[]) => any) | undefined;
    "onUpdate:syncLookupFilterValues"?: ((...args: any[]) => any) | undefined;
    "onUpdate:twoWayBindingEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrapEnabled"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    hoverStateEnabled: boolean;
    repaintChangesOnly: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    allowColumnReordering: boolean;
    allowColumnResizing: boolean;
    autoNavigateToFocusedRow: boolean;
    cacheEnabled: boolean;
    cellHintEnabled: boolean;
    columnAutoWidth: boolean;
    columnHidingEnabled: boolean;
    errorRowEnabled: boolean;
    focusedRowEnabled: boolean;
    highlightChanges: boolean;
    renderAsync: boolean;
    rowAlternationEnabled: boolean;
    showBorders: boolean;
    showColumnHeaders: boolean;
    showColumnLines: boolean;
    showRowLines: boolean;
    twoWayBindingEnabled: boolean;
    wordWrapEnabled: boolean;
    syncLookupFilterValues: boolean;
}>;
declare const DxAnimation: import("@vue/runtime-core").DefineComponent<{
    hide: PropType<string | number | Record<string, any> | AnimationConfig>;
    show: PropType<string | number | Record<string, any> | AnimationConfig>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:hide": null;
    "update:show": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    hide: PropType<string | number | Record<string, any> | AnimationConfig>;
    show: PropType<string | number | Record<string, any> | AnimationConfig>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hide"?: ((...args: any[]) => any) | undefined;
    "onUpdate:show"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxAsyncRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => any>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:reevaluate": null;
    "update:type": null;
    "update:validationCallback": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => any>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationCallback"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
declare const DxAt: import("@vue/runtime-core").DefineComponent<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxBoundaryOffset: import("@vue/runtime-core").DefineComponent<{
    x: NumberConstructor;
    y: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: NumberConstructor;
    y: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxButton: import("@vue/runtime-core").DefineComponent<{
    cssClass: StringConstructor;
    disabled: PropType<boolean | ((options: {
        column: dxDataGridColumn;
        component: dxDataGrid;
        row: dxDataGridRowObject;
    }) => boolean)>;
    hint: StringConstructor;
    icon: StringConstructor;
    name: PropType<string>;
    onClick: PropType<(e: ColumnButtonClickEvent) => void>;
    template: {};
    text: StringConstructor;
    visible: PropType<boolean | ((options: {
        column: dxDataGridColumn;
        component: dxDataGrid;
        row: dxDataGridRowObject;
    }) => boolean)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:cssClass": null;
    "update:disabled": null;
    "update:hint": null;
    "update:icon": null;
    "update:name": null;
    "update:onClick": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    cssClass: StringConstructor;
    disabled: PropType<boolean | ((options: {
        column: dxDataGridColumn;
        component: dxDataGrid;
        row: dxDataGridRowObject;
    }) => boolean)>;
    hint: StringConstructor;
    icon: StringConstructor;
    name: PropType<string>;
    onClick: PropType<(e: ColumnButtonClickEvent) => void>;
    template: {};
    text: StringConstructor;
    visible: PropType<boolean | ((options: {
        column: dxDataGridColumn;
        component: dxDataGrid;
        row: dxDataGridRowObject;
    }) => boolean)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxChange: import("@vue/runtime-core").DefineComponent<{
    data: {};
    insertAfterKey: {};
    insertBeforeKey: {};
    type: PropType<DataChangeType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:data": null;
    "update:insertAfterKey": null;
    "update:insertBeforeKey": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    data: {};
    insertAfterKey: {};
    insertBeforeKey: {};
    type: PropType<DataChangeType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:data"?: ((...args: any[]) => any) | undefined;
    "onUpdate:insertAfterKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:insertBeforeKey"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxColCountByScreen: import("@vue/runtime-core").DefineComponent<{
    lg: NumberConstructor;
    md: NumberConstructor;
    sm: NumberConstructor;
    xs: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:lg": null;
    "update:md": null;
    "update:sm": null;
    "update:xs": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    lg: NumberConstructor;
    md: NumberConstructor;
    sm: NumberConstructor;
    xs: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lg"?: ((...args: any[]) => any) | undefined;
    "onUpdate:md"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sm"?: ((...args: any[]) => any) | undefined;
    "onUpdate:xs"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCollision: import("@vue/runtime-core").DefineComponent<{
    x: PropType<CollisionResolution>;
    y: PropType<CollisionResolution>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: PropType<CollisionResolution>;
    y: PropType<CollisionResolution>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxColumn: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    allowEditing: BooleanConstructor;
    allowExporting: BooleanConstructor;
    allowFiltering: BooleanConstructor;
    allowFixing: BooleanConstructor;
    allowGrouping: BooleanConstructor;
    allowHeaderFiltering: BooleanConstructor;
    allowHiding: BooleanConstructor;
    allowReordering: BooleanConstructor;
    allowResizing: BooleanConstructor;
    allowSearch: BooleanConstructor;
    allowSorting: BooleanConstructor;
    autoExpandGroup: BooleanConstructor;
    buttons: PropType<(DataGridPredefinedColumnButton | dxDataGridColumnButton<any, any>)[]>;
    calculateCellValue: PropType<(rowData: any) => any>;
    calculateDisplayValue: PropType<string | ((rowData: any) => any)>;
    calculateFilterExpression: PropType<(filterValue: any, selectedFilterOperation: string | null, target: string) => string | (() => any) | Array<any>>;
    calculateGroupValue: PropType<string | ((rowData: any) => any)>;
    calculateSortValue: PropType<string | ((rowData: any) => any)>;
    caption: StringConstructor;
    cellTemplate: {};
    columns: PropType<(string | dxDataGridColumn<any, any>)[]>;
    cssClass: StringConstructor;
    customizeText: PropType<(cellInfo: {
        groupInterval: string | number;
        target: string;
        value: any;
        valueText: string;
    }) => string>;
    dataField: StringConstructor;
    dataType: PropType<DataType>;
    editCellTemplate: {};
    editorOptions: {};
    encodeHtml: BooleanConstructor;
    falseText: StringConstructor;
    filterOperations: PropType<string[]>;
    filterType: PropType<FilterType>;
    filterValue: {};
    filterValues: PropType<any[]>;
    fixed: BooleanConstructor;
    fixedPosition: PropType<FixedPosition>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    formItem: PropType<Record<string, any> | dxFormSimpleItem>;
    groupCellTemplate: {};
    groupIndex: NumberConstructor;
    headerCellTemplate: {};
    headerFilter: PropType<Record<string, any>>;
    hidingPriority: NumberConstructor;
    isBand: BooleanConstructor;
    lookup: PropType<Record<string, any>>;
    minWidth: NumberConstructor;
    name: StringConstructor;
    ownerBand: NumberConstructor;
    renderAsync: BooleanConstructor;
    selectedFilterOperation: PropType<SelectedFilterOperation>;
    setCellValue: PropType<(newData: any, value: any, currentRowData: any) => any>;
    showEditorAlways: BooleanConstructor;
    showInColumnChooser: BooleanConstructor;
    showWhenGrouped: BooleanConstructor;
    sortIndex: NumberConstructor;
    sortingMethod: PropType<(value1: any, value2: any) => number>;
    sortOrder: PropType<SortOrder>;
    trueText: StringConstructor;
    type: PropType<DataGridCommandColumnType>;
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:allowEditing": null;
    "update:allowExporting": null;
    "update:allowFiltering": null;
    "update:allowFixing": null;
    "update:allowGrouping": null;
    "update:allowHeaderFiltering": null;
    "update:allowHiding": null;
    "update:allowReordering": null;
    "update:allowResizing": null;
    "update:allowSearch": null;
    "update:allowSorting": null;
    "update:autoExpandGroup": null;
    "update:buttons": null;
    "update:calculateCellValue": null;
    "update:calculateDisplayValue": null;
    "update:calculateFilterExpression": null;
    "update:calculateGroupValue": null;
    "update:calculateSortValue": null;
    "update:caption": null;
    "update:cellTemplate": null;
    "update:columns": null;
    "update:cssClass": null;
    "update:customizeText": null;
    "update:dataField": null;
    "update:dataType": null;
    "update:editCellTemplate": null;
    "update:editorOptions": null;
    "update:encodeHtml": null;
    "update:falseText": null;
    "update:filterOperations": null;
    "update:filterType": null;
    "update:filterValue": null;
    "update:filterValues": null;
    "update:fixed": null;
    "update:fixedPosition": null;
    "update:format": null;
    "update:formItem": null;
    "update:groupCellTemplate": null;
    "update:groupIndex": null;
    "update:headerCellTemplate": null;
    "update:headerFilter": null;
    "update:hidingPriority": null;
    "update:isBand": null;
    "update:lookup": null;
    "update:minWidth": null;
    "update:name": null;
    "update:ownerBand": null;
    "update:renderAsync": null;
    "update:selectedFilterOperation": null;
    "update:setCellValue": null;
    "update:showEditorAlways": null;
    "update:showInColumnChooser": null;
    "update:showWhenGrouped": null;
    "update:sortIndex": null;
    "update:sortingMethod": null;
    "update:sortOrder": null;
    "update:trueText": null;
    "update:type": null;
    "update:validationRules": null;
    "update:visible": null;
    "update:visibleIndex": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    allowEditing: BooleanConstructor;
    allowExporting: BooleanConstructor;
    allowFiltering: BooleanConstructor;
    allowFixing: BooleanConstructor;
    allowGrouping: BooleanConstructor;
    allowHeaderFiltering: BooleanConstructor;
    allowHiding: BooleanConstructor;
    allowReordering: BooleanConstructor;
    allowResizing: BooleanConstructor;
    allowSearch: BooleanConstructor;
    allowSorting: BooleanConstructor;
    autoExpandGroup: BooleanConstructor;
    buttons: PropType<(DataGridPredefinedColumnButton | dxDataGridColumnButton<any, any>)[]>;
    calculateCellValue: PropType<(rowData: any) => any>;
    calculateDisplayValue: PropType<string | ((rowData: any) => any)>;
    calculateFilterExpression: PropType<(filterValue: any, selectedFilterOperation: string | null, target: string) => string | (() => any) | Array<any>>;
    calculateGroupValue: PropType<string | ((rowData: any) => any)>;
    calculateSortValue: PropType<string | ((rowData: any) => any)>;
    caption: StringConstructor;
    cellTemplate: {};
    columns: PropType<(string | dxDataGridColumn<any, any>)[]>;
    cssClass: StringConstructor;
    customizeText: PropType<(cellInfo: {
        groupInterval: string | number;
        target: string;
        value: any;
        valueText: string;
    }) => string>;
    dataField: StringConstructor;
    dataType: PropType<DataType>;
    editCellTemplate: {};
    editorOptions: {};
    encodeHtml: BooleanConstructor;
    falseText: StringConstructor;
    filterOperations: PropType<string[]>;
    filterType: PropType<FilterType>;
    filterValue: {};
    filterValues: PropType<any[]>;
    fixed: BooleanConstructor;
    fixedPosition: PropType<FixedPosition>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    formItem: PropType<Record<string, any> | dxFormSimpleItem>;
    groupCellTemplate: {};
    groupIndex: NumberConstructor;
    headerCellTemplate: {};
    headerFilter: PropType<Record<string, any>>;
    hidingPriority: NumberConstructor;
    isBand: BooleanConstructor;
    lookup: PropType<Record<string, any>>;
    minWidth: NumberConstructor;
    name: StringConstructor;
    ownerBand: NumberConstructor;
    renderAsync: BooleanConstructor;
    selectedFilterOperation: PropType<SelectedFilterOperation>;
    setCellValue: PropType<(newData: any, value: any, currentRowData: any) => any>;
    showEditorAlways: BooleanConstructor;
    showInColumnChooser: BooleanConstructor;
    showWhenGrouped: BooleanConstructor;
    sortIndex: NumberConstructor;
    sortingMethod: PropType<(value1: any, value2: any) => number>;
    sortOrder: PropType<SortOrder>;
    trueText: StringConstructor;
    type: PropType<DataGridCommandColumnType>;
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:buttons"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:format"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortingMethod"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columns"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:headerFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:renderAsync"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowEditing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowExporting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowFiltering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowFixing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowGrouping"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowHeaderFiltering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowHiding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowReordering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowResizing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSearch"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSorting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:autoExpandGroup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateCellValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateDisplayValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateFilterExpression"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateGroupValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateSortValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:caption"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editCellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:encodeHtml"?: ((...args: any[]) => any) | undefined;
    "onUpdate:falseText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterOperations"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterValues"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fixed"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fixedPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formItem"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupCellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:headerCellTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hidingPriority"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isBand"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lookup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ownerBand"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedFilterOperation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:setCellValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showEditorAlways"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showInColumnChooser"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showWhenGrouped"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortOrder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trueText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationRules"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
}, {
    fixed: boolean;
    visible: boolean;
    renderAsync: boolean;
    allowEditing: boolean;
    allowExporting: boolean;
    allowFiltering: boolean;
    allowFixing: boolean;
    allowGrouping: boolean;
    allowHeaderFiltering: boolean;
    allowHiding: boolean;
    allowReordering: boolean;
    allowResizing: boolean;
    allowSearch: boolean;
    allowSorting: boolean;
    autoExpandGroup: boolean;
    encodeHtml: boolean;
    isBand: boolean;
    showEditorAlways: boolean;
    showInColumnChooser: boolean;
    showWhenGrouped: boolean;
}>;
declare const DxColumnChooser: import("@vue/runtime-core").DefineComponent<{
    allowSearch: BooleanConstructor;
    container: {};
    emptyPanelText: StringConstructor;
    enabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    mode: PropType<ColumnChooserMode>;
    position: PropType<Record<string, any> | PositionConfig>;
    search: PropType<Record<string, any> | ColumnChooserSearchConfig>;
    searchTimeout: NumberConstructor;
    selection: PropType<Record<string, any> | ColumnChooserSelectionConfig>;
    sortOrder: PropType<SortOrder>;
    title: StringConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSearch": null;
    "update:container": null;
    "update:emptyPanelText": null;
    "update:enabled": null;
    "update:height": null;
    "update:mode": null;
    "update:position": null;
    "update:search": null;
    "update:searchTimeout": null;
    "update:selection": null;
    "update:sortOrder": null;
    "update:title": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSearch: BooleanConstructor;
    container: {};
    emptyPanelText: StringConstructor;
    enabled: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    mode: PropType<ColumnChooserMode>;
    position: PropType<Record<string, any> | PositionConfig>;
    search: PropType<Record<string, any> | ColumnChooserSearchConfig>;
    searchTimeout: NumberConstructor;
    selection: PropType<Record<string, any> | ColumnChooserSelectionConfig>;
    sortOrder: PropType<SortOrder>;
    title: StringConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:container"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selection"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSearch"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortOrder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:emptyPanelText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:search"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
    allowSearch: boolean;
}>;
declare const DxColumnChooserSearch: import("@vue/runtime-core").DefineComponent<{
    editorOptions: {};
    enabled: BooleanConstructor;
    timeout: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:editorOptions": null;
    "update:enabled": null;
    "update:timeout": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    editorOptions: {};
    enabled: BooleanConstructor;
    timeout: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:timeout"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxColumnChooserSelection: import("@vue/runtime-core").DefineComponent<{
    allowSelectAll: BooleanConstructor;
    recursive: BooleanConstructor;
    selectByClick: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSelectAll": null;
    "update:recursive": null;
    "update:selectByClick": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSelectAll: BooleanConstructor;
    recursive: BooleanConstructor;
    selectByClick: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectByClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:recursive"?: ((...args: any[]) => any) | undefined;
}, {
    selectByClick: boolean;
    allowSelectAll: boolean;
    recursive: boolean;
}>;
declare const DxColumnFixing: import("@vue/runtime-core").DefineComponent<{
    enabled: BooleanConstructor;
    icons: PropType<Record<string, any>>;
    texts: PropType<Record<string, any>>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:enabled": null;
    "update:icons": null;
    "update:texts": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    enabled: BooleanConstructor;
    icons: PropType<Record<string, any>>;
    texts: PropType<Record<string, any>>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icons"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxColumnFixingTexts: import("@vue/runtime-core").DefineComponent<{
    fix: StringConstructor;
    leftPosition: StringConstructor;
    rightPosition: StringConstructor;
    stickyPosition: StringConstructor;
    unfix: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:fix": null;
    "update:leftPosition": null;
    "update:rightPosition": null;
    "update:stickyPosition": null;
    "update:unfix": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    fix: StringConstructor;
    leftPosition: StringConstructor;
    rightPosition: StringConstructor;
    stickyPosition: StringConstructor;
    unfix: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fix"?: ((...args: any[]) => any) | undefined;
    "onUpdate:leftPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rightPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stickyPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:unfix"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxColumnHeaderFilter: import("@vue/runtime-core").DefineComponent<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        component: Record<string, any>;
        dataSource: DataSourceOptions | null;
    }) => void) | null>;
    groupInterval: PropType<number | HeaderFilterGroupInterval>;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig | ColumnHeaderFilterSearchConfig>;
    searchMode: PropType<SearchMode>;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSearch": null;
    "update:allowSelectAll": null;
    "update:dataSource": null;
    "update:groupInterval": null;
    "update:height": null;
    "update:search": null;
    "update:searchMode": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        component: Record<string, any>;
        dataSource: DataSourceOptions | null;
    }) => void) | null>;
    groupInterval: PropType<number | HeaderFilterGroupInterval>;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig | ColumnHeaderFilterSearchConfig>;
    searchMode: PropType<SearchMode>;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSearch"?: ((...args: any[]) => any) | undefined;
    "onUpdate:search"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupInterval"?: ((...args: any[]) => any) | undefined;
}, {
    allowSearch: boolean;
    allowSelectAll: boolean;
}>;
declare const DxColumnHeaderFilterSearch: import("@vue/runtime-core").DefineComponent<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    timeout: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:editorOptions": null;
    "update:enabled": null;
    "update:mode": null;
    "update:searchExpr": null;
    "update:timeout": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    timeout: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:timeout"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxColumnLookup: import("@vue/runtime-core").DefineComponent<{
    allowClearing: BooleanConstructor;
    calculateCellValue: PropType<(rowData: any) => any>;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        data: Record<string, any>;
        key: any;
    }) => Array<any> | Store | DataSourceOptions) | null>;
    displayExpr: PropType<string | ((data: any) => string)>;
    valueExpr: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowClearing": null;
    "update:calculateCellValue": null;
    "update:dataSource": null;
    "update:displayExpr": null;
    "update:valueExpr": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowClearing: BooleanConstructor;
    calculateCellValue: PropType<(rowData: any) => any>;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        data: Record<string, any>;
        key: any;
    }) => Array<any> | Store | DataSourceOptions) | null>;
    displayExpr: PropType<string | ((data: any) => string)>;
    valueExpr: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateCellValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowClearing"?: ((...args: any[]) => any) | undefined;
}, {
    allowClearing: boolean;
}>;
declare const DxCompareRule: import("@vue/runtime-core").DefineComponent<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:comparisonTarget": null;
    "update:comparisonType": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonTarget"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonType"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxCursorOffset: import("@vue/runtime-core").DefineComponent<{
    x: NumberConstructor;
    y: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: NumberConstructor;
    y: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCustomOperation: import("@vue/runtime-core").DefineComponent<{
    calculateFilterExpression: PropType<(filterValue: any, field: dxFilterBuilderField) => string | (() => any) | Array<any>>;
    caption: StringConstructor;
    customizeText: PropType<(fieldInfo: FieldInfo) => string>;
    dataTypes: PropType<DataType[]>;
    editorTemplate: {};
    hasValue: BooleanConstructor;
    icon: StringConstructor;
    name: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:calculateFilterExpression": null;
    "update:caption": null;
    "update:customizeText": null;
    "update:dataTypes": null;
    "update:editorTemplate": null;
    "update:hasValue": null;
    "update:icon": null;
    "update:name": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    calculateFilterExpression: PropType<(filterValue: any, field: dxFilterBuilderField) => string | (() => any) | Array<any>>;
    caption: StringConstructor;
    customizeText: PropType<(fieldInfo: FieldInfo) => string>;
    dataTypes: PropType<DataType[]>;
    editorTemplate: {};
    hasValue: BooleanConstructor;
    icon: StringConstructor;
    name: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateFilterExpression"?: ((...args: any[]) => any) | undefined;
    "onUpdate:caption"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataTypes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hasValue"?: ((...args: any[]) => any) | undefined;
}, {
    hasValue: boolean;
}>;
declare const DxCustomRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:reevaluate": null;
    "update:type": null;
    "update:validationCallback": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationCallback"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
declare const DxDataGridHeaderFilter: import("@vue/runtime-core").DefineComponent<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig>;
    searchTimeout: NumberConstructor;
    texts: PropType<Record<string, any>>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSearch": null;
    "update:allowSelectAll": null;
    "update:height": null;
    "update:search": null;
    "update:searchTimeout": null;
    "update:texts": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig>;
    searchTimeout: NumberConstructor;
    texts: PropType<Record<string, any>>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSearch"?: ((...args: any[]) => any) | undefined;
    "onUpdate:search"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    allowSearch: boolean;
    allowSelectAll: boolean;
}>;
declare const DxDataGridHeaderFilterSearch: import("@vue/runtime-core").DefineComponent<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    timeout: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:editorOptions": null;
    "update:enabled": null;
    "update:mode": null;
    "update:timeout": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    timeout: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:timeout"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxDataGridHeaderFilterTexts: import("@vue/runtime-core").DefineComponent<{
    cancel: StringConstructor;
    emptyValue: StringConstructor;
    ok: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:cancel": null;
    "update:emptyValue": null;
    "update:ok": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    cancel: StringConstructor;
    emptyValue: StringConstructor;
    ok: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cancel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:emptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ok"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxDataGridSelection: import("@vue/runtime-core").DefineComponent<{
    allowSelectAll: BooleanConstructor;
    deferred: BooleanConstructor;
    mode: PropType<SingleMultipleOrNone>;
    selectAllMode: PropType<SelectAllMode>;
    sensitivity: PropType<SelectionSensitivity>;
    showCheckBoxesMode: PropType<SelectionColumnDisplayMode>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSelectAll": null;
    "update:deferred": null;
    "update:mode": null;
    "update:selectAllMode": null;
    "update:sensitivity": null;
    "update:showCheckBoxesMode": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSelectAll: BooleanConstructor;
    deferred: BooleanConstructor;
    mode: PropType<SingleMultipleOrNone>;
    selectAllMode: PropType<SelectAllMode>;
    sensitivity: PropType<SelectionSensitivity>;
    showCheckBoxesMode: PropType<SelectionColumnDisplayMode>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deferred"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectAllMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sensitivity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showCheckBoxesMode"?: ((...args: any[]) => any) | undefined;
}, {
    allowSelectAll: boolean;
    deferred: boolean;
}>;
declare const DxEditing: import("@vue/runtime-core").DefineComponent<{
    allowAdding: BooleanConstructor;
    allowDeleting: PropType<boolean | ((options: {
        component: dxDataGrid;
        row: dxDataGridRowObject;
    }) => boolean)>;
    allowUpdating: PropType<boolean | ((options: {
        component: dxDataGrid;
        row: dxDataGridRowObject;
    }) => boolean)>;
    changes: PropType<DataChange<any, any>[]>;
    confirmDelete: BooleanConstructor;
    editColumnName: StringConstructor;
    editRowKey: {};
    form: PropType<Record<string, any> | dxFormOptions>;
    mode: PropType<GridsEditMode>;
    newRowPosition: PropType<NewRowPosition>;
    popup: PropType<Record<string, any> | dxPopupOptions<any>>;
    refreshMode: PropType<GridsEditRefreshMode>;
    selectTextOnEditStart: BooleanConstructor;
    startEditAction: PropType<StartEditAction>;
    texts: {};
    useIcons: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowAdding": null;
    "update:allowDeleting": null;
    "update:allowUpdating": null;
    "update:changes": null;
    "update:confirmDelete": null;
    "update:editColumnName": null;
    "update:editRowKey": null;
    "update:form": null;
    "update:mode": null;
    "update:newRowPosition": null;
    "update:popup": null;
    "update:refreshMode": null;
    "update:selectTextOnEditStart": null;
    "update:startEditAction": null;
    "update:texts": null;
    "update:useIcons": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowAdding: BooleanConstructor;
    allowDeleting: PropType<boolean | ((options: {
        component: dxDataGrid;
        row: dxDataGridRowObject;
    }) => boolean)>;
    allowUpdating: PropType<boolean | ((options: {
        component: dxDataGrid;
        row: dxDataGridRowObject;
    }) => boolean)>;
    changes: PropType<DataChange<any, any>[]>;
    confirmDelete: BooleanConstructor;
    editColumnName: StringConstructor;
    editRowKey: {};
    form: PropType<Record<string, any> | dxFormOptions>;
    mode: PropType<GridsEditMode>;
    newRowPosition: PropType<NewRowPosition>;
    popup: PropType<Record<string, any> | dxPopupOptions<any>>;
    refreshMode: PropType<GridsEditRefreshMode>;
    selectTextOnEditStart: BooleanConstructor;
    startEditAction: PropType<StartEditAction>;
    texts: {};
    useIcons: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowAdding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowDeleting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowUpdating"?: ((...args: any[]) => any) | undefined;
    "onUpdate:changes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:confirmDelete"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editColumnName"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editRowKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:form"?: ((...args: any[]) => any) | undefined;
    "onUpdate:newRowPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:popup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:refreshMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectTextOnEditStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startEditAction"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useIcons"?: ((...args: any[]) => any) | undefined;
}, {
    allowAdding: boolean;
    confirmDelete: boolean;
    selectTextOnEditStart: boolean;
    useIcons: boolean;
}>;
declare const DxEditingTexts: import("@vue/runtime-core").DefineComponent<{
    addRow: StringConstructor;
    cancelAllChanges: StringConstructor;
    cancelRowChanges: StringConstructor;
    confirmDeleteMessage: StringConstructor;
    confirmDeleteTitle: StringConstructor;
    deleteRow: StringConstructor;
    editRow: StringConstructor;
    saveAllChanges: StringConstructor;
    saveRowChanges: StringConstructor;
    undeleteRow: StringConstructor;
    validationCancelChanges: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:addRow": null;
    "update:cancelAllChanges": null;
    "update:cancelRowChanges": null;
    "update:confirmDeleteMessage": null;
    "update:confirmDeleteTitle": null;
    "update:deleteRow": null;
    "update:editRow": null;
    "update:saveAllChanges": null;
    "update:saveRowChanges": null;
    "update:undeleteRow": null;
    "update:validationCancelChanges": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    addRow: StringConstructor;
    cancelAllChanges: StringConstructor;
    cancelRowChanges: StringConstructor;
    confirmDeleteMessage: StringConstructor;
    confirmDeleteTitle: StringConstructor;
    deleteRow: StringConstructor;
    editRow: StringConstructor;
    saveAllChanges: StringConstructor;
    saveRowChanges: StringConstructor;
    undeleteRow: StringConstructor;
    validationCancelChanges: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:addRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cancelAllChanges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cancelRowChanges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:confirmDeleteMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:confirmDeleteTitle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deleteRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:saveAllChanges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:saveRowChanges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:undeleteRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationCancelChanges"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxEmailRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxExport: import("@vue/runtime-core").DefineComponent<{
    allowExportSelectedData: BooleanConstructor;
    enabled: BooleanConstructor;
    formats: PropType<string[]>;
    texts: PropType<Record<string, any>>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowExportSelectedData": null;
    "update:enabled": null;
    "update:formats": null;
    "update:texts": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowExportSelectedData: BooleanConstructor;
    enabled: BooleanConstructor;
    formats: PropType<string[]>;
    texts: PropType<Record<string, any>>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formats"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowExportSelectedData"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
    allowExportSelectedData: boolean;
}>;
declare const DxExportTexts: import("@vue/runtime-core").DefineComponent<{
    exportAll: StringConstructor;
    exportSelectedRows: StringConstructor;
    exportTo: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:exportAll": null;
    "update:exportSelectedRows": null;
    "update:exportTo": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    exportAll: StringConstructor;
    exportSelectedRows: StringConstructor;
    exportTo: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:exportAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:exportSelectedRows"?: ((...args: any[]) => any) | undefined;
    "onUpdate:exportTo"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxField: import("@vue/runtime-core").DefineComponent<{
    calculateFilterExpression: PropType<(filterValue: any, selectedFilterOperation: string) => string | (() => any) | Array<any>>;
    caption: StringConstructor;
    customizeText: PropType<(fieldInfo: FieldInfo) => string>;
    dataField: StringConstructor;
    dataType: PropType<DataType>;
    editorOptions: {};
    editorTemplate: {};
    falseText: StringConstructor;
    filterOperations: PropType<string[]>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    lookup: PropType<Record<string, any>>;
    name: StringConstructor;
    trueText: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:calculateFilterExpression": null;
    "update:caption": null;
    "update:customizeText": null;
    "update:dataField": null;
    "update:dataType": null;
    "update:editorOptions": null;
    "update:editorTemplate": null;
    "update:falseText": null;
    "update:filterOperations": null;
    "update:format": null;
    "update:lookup": null;
    "update:name": null;
    "update:trueText": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    calculateFilterExpression: PropType<(filterValue: any, selectedFilterOperation: string) => string | (() => any) | Array<any>>;
    caption: StringConstructor;
    customizeText: PropType<(fieldInfo: FieldInfo) => string>;
    dataField: StringConstructor;
    dataType: PropType<DataType>;
    editorOptions: {};
    editorTemplate: {};
    falseText: StringConstructor;
    filterOperations: PropType<string[]>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    lookup: PropType<Record<string, any>>;
    name: StringConstructor;
    trueText: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:format"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateFilterExpression"?: ((...args: any[]) => any) | undefined;
    "onUpdate:caption"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:falseText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterOperations"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lookup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trueText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorTemplate"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxFieldLookup: import("@vue/runtime-core").DefineComponent<{
    allowClearing: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any>>;
    displayExpr: PropType<string | ((data: any) => string)>;
    valueExpr: PropType<string | ((data: any) => string | number | boolean)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowClearing": null;
    "update:dataSource": null;
    "update:displayExpr": null;
    "update:valueExpr": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowClearing: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any>>;
    displayExpr: PropType<string | ((data: any) => string)>;
    valueExpr: PropType<string | ((data: any) => string | number | boolean)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowClearing"?: ((...args: any[]) => any) | undefined;
}, {
    allowClearing: boolean;
}>;
declare const DxFilterBuilder: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowHierarchicalFields: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    customOperations: PropType<dxFilterBuilderCustomOperation[]>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    fields: PropType<dxFilterBuilderField[]>;
    filterOperationDescriptions: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    groupOperationDescriptions: PropType<Record<string, any>>;
    groupOperations: PropType<GroupOperation[]>;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    maxGroupLevel: NumberConstructor;
    onContentReady: PropType<(e: FilterBuilderContentReadyEvent) => void>;
    onDisposing: PropType<(e: FilterBuilderDisposingEvent) => void>;
    onEditorPrepared: PropType<(e: FilterBuilderEditorPreparedEvent) => void>;
    onEditorPreparing: PropType<(e: FilterBuilderEditorPreparingEvent) => void>;
    onInitialized: PropType<(e: FilterBuilderInitializedEvent) => void>;
    onOptionChanged: PropType<(e: FilterBuilderOptionChangedEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    tabIndex: NumberConstructor;
    value: PropType<string | any[] | (() => any)>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:allowHierarchicalFields": null;
    "update:bindingOptions": null;
    "update:customOperations": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:fields": null;
    "update:filterOperationDescriptions": null;
    "update:focusStateEnabled": null;
    "update:groupOperationDescriptions": null;
    "update:groupOperations": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:maxGroupLevel": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onEditorPrepared": null;
    "update:onEditorPreparing": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:onValueChanged": null;
    "update:rtlEnabled": null;
    "update:tabIndex": null;
    "update:value": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowHierarchicalFields: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    customOperations: PropType<dxFilterBuilderCustomOperation[]>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    fields: PropType<dxFilterBuilderField[]>;
    filterOperationDescriptions: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    groupOperationDescriptions: PropType<Record<string, any>>;
    groupOperations: PropType<GroupOperation[]>;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    maxGroupLevel: NumberConstructor;
    onContentReady: PropType<(e: FilterBuilderContentReadyEvent) => void>;
    onDisposing: PropType<(e: FilterBuilderDisposingEvent) => void>;
    onEditorPrepared: PropType<(e: FilterBuilderEditorPreparedEvent) => void>;
    onEditorPreparing: PropType<(e: FilterBuilderEditorPreparingEvent) => void>;
    onInitialized: PropType<(e: FilterBuilderInitializedEvent) => void>;
    onOptionChanged: PropType<(e: FilterBuilderOptionChangedEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    tabIndex: NumberConstructor;
    value: PropType<string | any[] | (() => any)>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onValueChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditorPrepared"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditorPreparing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowHierarchicalFields"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customOperations"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fields"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterOperationDescriptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupOperationDescriptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupOperations"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxGroupLevel"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    allowHierarchicalFields: boolean;
}>;
declare const DxFilterBuilderPopup: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    animation: PropType<Record<string, any>>;
    bindingOptions: PropType<Record<string, any>>;
    closeOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    container: {};
    contentTemplate: {};
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    dragAndResizeArea: {};
    dragEnabled: BooleanConstructor;
    dragOutsideBoundary: BooleanConstructor;
    enableBodyScroll: BooleanConstructor;
    focusStateEnabled: BooleanConstructor;
    fullScreen: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hideOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    hideOnParentScroll: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    maxHeight: PropType<string | number | (() => number | string)>;
    maxWidth: PropType<string | number | (() => number | string)>;
    minHeight: PropType<string | number | (() => number | string)>;
    minWidth: PropType<string | number | (() => number | string)>;
    onContentReady: PropType<(e: EventInfo<any>) => void>;
    onDisposing: PropType<(e: EventInfo<any>) => void>;
    onHidden: PropType<(e: EventInfo<any>) => void>;
    onHiding: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onInitialized: PropType<(e: {
        component: Component<any>;
        element: any;
    }) => void>;
    onOptionChanged: PropType<(e: {
        component: DOMComponent;
        element: any;
        fullName: string;
        model: any;
        name: string;
        previousValue: any;
        value: any;
    }) => void>;
    onResize: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeEnd: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeStart: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onShowing: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onShown: PropType<(e: EventInfo<any>) => void>;
    onTitleRendered: PropType<(e: {
        component: dxPopup;
        element: any;
        model: any;
        titleElement: any;
    }) => void>;
    position: PropType<Record<string, any> | PositionAlignment | PositionConfig | (() => void)>;
    resizeEnabled: BooleanConstructor;
    restorePosition: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    shading: BooleanConstructor;
    shadingColor: StringConstructor;
    showCloseButton: BooleanConstructor;
    showTitle: BooleanConstructor;
    tabIndex: NumberConstructor;
    title: StringConstructor;
    titleTemplate: {};
    toolbarItems: PropType<import("devextreme/artifacts/npm/devextreme/ui/popup").ToolbarItem[]>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
    wrapperAttr: {};
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:animation": null;
    "update:bindingOptions": null;
    "update:closeOnOutsideClick": null;
    "update:container": null;
    "update:contentTemplate": null;
    "update:deferRendering": null;
    "update:disabled": null;
    "update:dragAndResizeArea": null;
    "update:dragEnabled": null;
    "update:dragOutsideBoundary": null;
    "update:enableBodyScroll": null;
    "update:focusStateEnabled": null;
    "update:fullScreen": null;
    "update:height": null;
    "update:hideOnOutsideClick": null;
    "update:hideOnParentScroll": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:maxHeight": null;
    "update:maxWidth": null;
    "update:minHeight": null;
    "update:minWidth": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onHidden": null;
    "update:onHiding": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:onResize": null;
    "update:onResizeEnd": null;
    "update:onResizeStart": null;
    "update:onShowing": null;
    "update:onShown": null;
    "update:onTitleRendered": null;
    "update:position": null;
    "update:resizeEnabled": null;
    "update:restorePosition": null;
    "update:rtlEnabled": null;
    "update:shading": null;
    "update:shadingColor": null;
    "update:showCloseButton": null;
    "update:showTitle": null;
    "update:tabIndex": null;
    "update:title": null;
    "update:titleTemplate": null;
    "update:toolbarItems": null;
    "update:visible": null;
    "update:width": null;
    "update:wrapperAttr": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    animation: PropType<Record<string, any>>;
    bindingOptions: PropType<Record<string, any>>;
    closeOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    container: {};
    contentTemplate: {};
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    dragAndResizeArea: {};
    dragEnabled: BooleanConstructor;
    dragOutsideBoundary: BooleanConstructor;
    enableBodyScroll: BooleanConstructor;
    focusStateEnabled: BooleanConstructor;
    fullScreen: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hideOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    hideOnParentScroll: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    maxHeight: PropType<string | number | (() => number | string)>;
    maxWidth: PropType<string | number | (() => number | string)>;
    minHeight: PropType<string | number | (() => number | string)>;
    minWidth: PropType<string | number | (() => number | string)>;
    onContentReady: PropType<(e: EventInfo<any>) => void>;
    onDisposing: PropType<(e: EventInfo<any>) => void>;
    onHidden: PropType<(e: EventInfo<any>) => void>;
    onHiding: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onInitialized: PropType<(e: {
        component: Component<any>;
        element: any;
    }) => void>;
    onOptionChanged: PropType<(e: {
        component: DOMComponent;
        element: any;
        fullName: string;
        model: any;
        name: string;
        previousValue: any;
        value: any;
    }) => void>;
    onResize: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeEnd: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeStart: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onShowing: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onShown: PropType<(e: EventInfo<any>) => void>;
    onTitleRendered: PropType<(e: {
        component: dxPopup;
        element: any;
        model: any;
        titleElement: any;
    }) => void>;
    position: PropType<Record<string, any> | PositionAlignment | PositionConfig | (() => void)>;
    resizeEnabled: BooleanConstructor;
    restorePosition: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    shading: BooleanConstructor;
    shadingColor: StringConstructor;
    showCloseButton: BooleanConstructor;
    showTitle: BooleanConstructor;
    tabIndex: NumberConstructor;
    title: StringConstructor;
    titleTemplate: {};
    toolbarItems: PropType<import("devextreme/artifacts/npm/devextreme/ui/popup").ToolbarItem[]>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
    wrapperAttr: {};
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deferRendering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:titleTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showTitle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:animation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:closeOnOutsideClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:container"?: ((...args: any[]) => any) | undefined;
    "onUpdate:contentTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragAndResizeArea"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragOutsideBoundary"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enableBodyScroll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fullScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hideOnOutsideClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hideOnParentScroll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxHeight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minHeight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onHidden"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onHiding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResizeEnd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResizeStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onShowing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onShown"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onTitleRendered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:resizeEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:restorePosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shading"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shadingColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showCloseButton"?: ((...args: any[]) => any) | undefined;
    "onUpdate:toolbarItems"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wrapperAttr"?: ((...args: any[]) => any) | undefined;
}, {
    deferRendering: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    showTitle: boolean;
    dragEnabled: boolean;
    dragOutsideBoundary: boolean;
    enableBodyScroll: boolean;
    fullScreen: boolean;
    hideOnParentScroll: boolean;
    resizeEnabled: boolean;
    restorePosition: boolean;
    shading: boolean;
    showCloseButton: boolean;
}>;
declare const DxFilterOperationDescriptions: import("@vue/runtime-core").DefineComponent<{
    between: StringConstructor;
    contains: StringConstructor;
    endsWith: StringConstructor;
    equal: StringConstructor;
    greaterThan: StringConstructor;
    greaterThanOrEqual: StringConstructor;
    isBlank: StringConstructor;
    isNotBlank: StringConstructor;
    lessThan: StringConstructor;
    lessThanOrEqual: StringConstructor;
    notContains: StringConstructor;
    notEqual: StringConstructor;
    startsWith: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:between": null;
    "update:contains": null;
    "update:endsWith": null;
    "update:equal": null;
    "update:greaterThan": null;
    "update:greaterThanOrEqual": null;
    "update:isBlank": null;
    "update:isNotBlank": null;
    "update:lessThan": null;
    "update:lessThanOrEqual": null;
    "update:notContains": null;
    "update:notEqual": null;
    "update:startsWith": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    between: StringConstructor;
    contains: StringConstructor;
    endsWith: StringConstructor;
    equal: StringConstructor;
    greaterThan: StringConstructor;
    greaterThanOrEqual: StringConstructor;
    isBlank: StringConstructor;
    isNotBlank: StringConstructor;
    lessThan: StringConstructor;
    lessThanOrEqual: StringConstructor;
    notContains: StringConstructor;
    notEqual: StringConstructor;
    startsWith: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:between"?: ((...args: any[]) => any) | undefined;
    "onUpdate:contains"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endsWith"?: ((...args: any[]) => any) | undefined;
    "onUpdate:equal"?: ((...args: any[]) => any) | undefined;
    "onUpdate:greaterThan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:greaterThanOrEqual"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isBlank"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isNotBlank"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lessThan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lessThanOrEqual"?: ((...args: any[]) => any) | undefined;
    "onUpdate:notContains"?: ((...args: any[]) => any) | undefined;
    "onUpdate:notEqual"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startsWith"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxFilterPanel: import("@vue/runtime-core").DefineComponent<{
    customizeText: PropType<(e: {
        component: GridBase;
        filterValue: Record<string, any>;
        text: string;
    }) => string>;
    filterEnabled: BooleanConstructor;
    texts: PropType<Record<string, any>>;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:customizeText": null;
    "update:filterEnabled": null;
    "update:texts": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    customizeText: PropType<(e: {
        component: GridBase;
        filterValue: Record<string, any>;
        text: string;
    }) => string>;
    filterEnabled: BooleanConstructor;
    texts: PropType<Record<string, any>>;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterEnabled"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    filterEnabled: boolean;
}>;
declare const DxFilterPanelTexts: import("@vue/runtime-core").DefineComponent<{
    clearFilter: StringConstructor;
    createFilter: StringConstructor;
    filterEnabledHint: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:clearFilter": null;
    "update:createFilter": null;
    "update:filterEnabledHint": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    clearFilter: StringConstructor;
    createFilter: StringConstructor;
    filterEnabledHint: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:clearFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:createFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterEnabledHint"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxFilterRow: import("@vue/runtime-core").DefineComponent<{
    applyFilter: PropType<ApplyFilterMode>;
    applyFilterText: StringConstructor;
    betweenEndText: StringConstructor;
    betweenStartText: StringConstructor;
    operationDescriptions: PropType<Record<string, any>>;
    resetOperationText: StringConstructor;
    showAllText: StringConstructor;
    showOperationChooser: BooleanConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:applyFilter": null;
    "update:applyFilterText": null;
    "update:betweenEndText": null;
    "update:betweenStartText": null;
    "update:operationDescriptions": null;
    "update:resetOperationText": null;
    "update:showAllText": null;
    "update:showOperationChooser": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    applyFilter: PropType<ApplyFilterMode>;
    applyFilterText: StringConstructor;
    betweenEndText: StringConstructor;
    betweenStartText: StringConstructor;
    operationDescriptions: PropType<Record<string, any>>;
    resetOperationText: StringConstructor;
    showAllText: StringConstructor;
    showOperationChooser: BooleanConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:applyFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:applyFilterText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:betweenEndText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:betweenStartText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:operationDescriptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:resetOperationText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showAllText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showOperationChooser"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    showOperationChooser: boolean;
}>;
declare const DxForm: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    alignItemLabels: BooleanConstructor;
    alignItemLabelsInAllGroups: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    colCount: PropType<number | "auto">;
    colCountByScreen: PropType<Record<string, any>>;
    customizeItem: PropType<(item: dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem) => void>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    formData: {};
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    isDirty: BooleanConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    labelLocation: PropType<LabelLocation>;
    labelMode: PropType<FormLabelMode>;
    minColWidth: NumberConstructor;
    onContentReady: PropType<(e: FormContentReadyEvent) => void>;
    onDisposing: PropType<(e: FormDisposingEvent) => void>;
    onEditorEnterKey: PropType<(e: EditorEnterKeyEvent) => void>;
    onFieldDataChanged: PropType<(e: FieldDataChangedEvent) => void>;
    onInitialized: PropType<(e: FormInitializedEvent) => void>;
    onOptionChanged: PropType<(e: FormOptionChangedEvent) => void>;
    optionalMark: StringConstructor;
    readOnly: BooleanConstructor;
    requiredMark: StringConstructor;
    requiredMessage: StringConstructor;
    rtlEnabled: BooleanConstructor;
    screenByWidth: PropType<() => void>;
    scrollingEnabled: BooleanConstructor;
    showColonAfterLabel: BooleanConstructor;
    showOptionalMark: BooleanConstructor;
    showRequiredMark: BooleanConstructor;
    showValidationSummary: BooleanConstructor;
    tabIndex: NumberConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:alignItemLabels": null;
    "update:alignItemLabelsInAllGroups": null;
    "update:bindingOptions": null;
    "update:colCount": null;
    "update:colCountByScreen": null;
    "update:customizeItem": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:formData": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:isDirty": null;
    "update:items": null;
    "update:labelLocation": null;
    "update:labelMode": null;
    "update:minColWidth": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onEditorEnterKey": null;
    "update:onFieldDataChanged": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:optionalMark": null;
    "update:readOnly": null;
    "update:requiredMark": null;
    "update:requiredMessage": null;
    "update:rtlEnabled": null;
    "update:screenByWidth": null;
    "update:scrollingEnabled": null;
    "update:showColonAfterLabel": null;
    "update:showOptionalMark": null;
    "update:showRequiredMark": null;
    "update:showValidationSummary": null;
    "update:tabIndex": null;
    "update:validationGroup": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    alignItemLabels: BooleanConstructor;
    alignItemLabelsInAllGroups: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    colCount: PropType<number | "auto">;
    colCountByScreen: PropType<Record<string, any>>;
    customizeItem: PropType<(item: dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem) => void>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    formData: {};
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    isDirty: BooleanConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    labelLocation: PropType<LabelLocation>;
    labelMode: PropType<FormLabelMode>;
    minColWidth: NumberConstructor;
    onContentReady: PropType<(e: FormContentReadyEvent) => void>;
    onDisposing: PropType<(e: FormDisposingEvent) => void>;
    onEditorEnterKey: PropType<(e: EditorEnterKeyEvent) => void>;
    onFieldDataChanged: PropType<(e: FieldDataChangedEvent) => void>;
    onInitialized: PropType<(e: FormInitializedEvent) => void>;
    onOptionChanged: PropType<(e: FormOptionChangedEvent) => void>;
    optionalMark: StringConstructor;
    readOnly: BooleanConstructor;
    requiredMark: StringConstructor;
    requiredMessage: StringConstructor;
    rtlEnabled: BooleanConstructor;
    screenByWidth: PropType<() => void>;
    scrollingEnabled: BooleanConstructor;
    showColonAfterLabel: BooleanConstructor;
    showOptionalMark: BooleanConstructor;
    showRequiredMark: BooleanConstructor;
    showValidationSummary: BooleanConstructor;
    tabIndex: NumberConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isDirty"?: ((...args: any[]) => any) | undefined;
    "onUpdate:labelMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:readOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationGroup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabels"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabelsInAllGroups"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCountByScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeItem"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formData"?: ((...args: any[]) => any) | undefined;
    "onUpdate:labelLocation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minColWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditorEnterKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFieldDataChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:optionalMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:requiredMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:requiredMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:screenByWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollingEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showColonAfterLabel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showOptionalMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showRequiredMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showValidationSummary"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    isDirty: boolean;
    readOnly: boolean;
    alignItemLabels: boolean;
    alignItemLabelsInAllGroups: boolean;
    scrollingEnabled: boolean;
    showColonAfterLabel: boolean;
    showOptionalMark: boolean;
    showRequiredMark: boolean;
    showValidationSummary: boolean;
}>;
declare const DxFormat: import("@vue/runtime-core").DefineComponent<{
    currency: StringConstructor;
    formatter: PropType<(value: number | Date) => string>;
    parser: PropType<(value: string) => number | Date>;
    precision: NumberConstructor;
    type: PropType<string>;
    useCurrencyAccountingStyle: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:currency": null;
    "update:formatter": null;
    "update:parser": null;
    "update:precision": null;
    "update:type": null;
    "update:useCurrencyAccountingStyle": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    currency: StringConstructor;
    formatter: PropType<(value: number | Date) => string>;
    parser: PropType<(value: string) => number | Date>;
    precision: NumberConstructor;
    type: PropType<string>;
    useCurrencyAccountingStyle: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:currency"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formatter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:parser"?: ((...args: any[]) => any) | undefined;
    "onUpdate:precision"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useCurrencyAccountingStyle"?: ((...args: any[]) => any) | undefined;
}, {
    useCurrencyAccountingStyle: boolean;
}>;
declare const DxFormItem: import("@vue/runtime-core").DefineComponent<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    isRequired: BooleanConstructor;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    name: StringConstructor;
    template: {};
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:dataField": null;
    "update:editorOptions": null;
    "update:editorType": null;
    "update:helpText": null;
    "update:isRequired": null;
    "update:itemType": null;
    "update:label": null;
    "update:name": null;
    "update:template": null;
    "update:validationRules": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    isRequired: BooleanConstructor;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    name: StringConstructor;
    template: {};
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationRules"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:helpText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isRequired"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    isRequired: boolean;
}>;
declare const DxFrom: import("@vue/runtime-core").DefineComponent<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:left": null;
    "update:opacity": null;
    "update:position": null;
    "update:scale": null;
    "update:top": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:left"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scale"?: ((...args: any[]) => any) | undefined;
    "onUpdate:top"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxGrouping: import("@vue/runtime-core").DefineComponent<{
    allowCollapsing: BooleanConstructor;
    autoExpandAll: BooleanConstructor;
    contextMenuEnabled: BooleanConstructor;
    expandMode: PropType<GroupExpandMode>;
    texts: PropType<Record<string, any>>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowCollapsing": null;
    "update:autoExpandAll": null;
    "update:contextMenuEnabled": null;
    "update:expandMode": null;
    "update:texts": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowCollapsing: BooleanConstructor;
    autoExpandAll: BooleanConstructor;
    contextMenuEnabled: BooleanConstructor;
    expandMode: PropType<GroupExpandMode>;
    texts: PropType<Record<string, any>>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowCollapsing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:autoExpandAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:contextMenuEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:expandMode"?: ((...args: any[]) => any) | undefined;
}, {
    allowCollapsing: boolean;
    autoExpandAll: boolean;
    contextMenuEnabled: boolean;
}>;
declare const DxGroupingTexts: import("@vue/runtime-core").DefineComponent<{
    groupByThisColumn: StringConstructor;
    groupContinuedMessage: StringConstructor;
    groupContinuesMessage: StringConstructor;
    ungroup: StringConstructor;
    ungroupAll: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:groupByThisColumn": null;
    "update:groupContinuedMessage": null;
    "update:groupContinuesMessage": null;
    "update:ungroup": null;
    "update:ungroupAll": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    groupByThisColumn: StringConstructor;
    groupContinuedMessage: StringConstructor;
    groupContinuesMessage: StringConstructor;
    ungroup: StringConstructor;
    ungroupAll: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupByThisColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupContinuedMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupContinuesMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ungroup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ungroupAll"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxGroupItem: import("@vue/runtime-core").DefineComponent<{
    alignByColumn: BooleanConstructor;
    column: StringConstructor;
    customizeText: PropType<(itemInfo: {
        value: string | number | Date;
        valueText: string;
    }) => string>;
    displayFormat: StringConstructor;
    name: StringConstructor;
    showInColumn: StringConstructor;
    showInGroupFooter: BooleanConstructor;
    skipEmptyValues: BooleanConstructor;
    summaryType: PropType<string>;
    valueFormat: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignByColumn": null;
    "update:column": null;
    "update:customizeText": null;
    "update:displayFormat": null;
    "update:name": null;
    "update:showInColumn": null;
    "update:showInGroupFooter": null;
    "update:skipEmptyValues": null;
    "update:summaryType": null;
    "update:valueFormat": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignByColumn: BooleanConstructor;
    column: StringConstructor;
    customizeText: PropType<(itemInfo: {
        value: string | number | Date;
        valueText: string;
    }) => string>;
    displayFormat: StringConstructor;
    name: StringConstructor;
    showInColumn: StringConstructor;
    showInGroupFooter: BooleanConstructor;
    skipEmptyValues: BooleanConstructor;
    summaryType: PropType<string>;
    valueFormat: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayFormat"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignByColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:column"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showInColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showInGroupFooter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:skipEmptyValues"?: ((...args: any[]) => any) | undefined;
    "onUpdate:summaryType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueFormat"?: ((...args: any[]) => any) | undefined;
}, {
    alignByColumn: boolean;
    showInGroupFooter: boolean;
    skipEmptyValues: boolean;
}>;
declare const DxGroupOperationDescriptions: import("@vue/runtime-core").DefineComponent<{
    and: StringConstructor;
    notAnd: StringConstructor;
    notOr: StringConstructor;
    or: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:and": null;
    "update:notAnd": null;
    "update:notOr": null;
    "update:or": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    and: StringConstructor;
    notAnd: StringConstructor;
    notOr: StringConstructor;
    or: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:and"?: ((...args: any[]) => any) | undefined;
    "onUpdate:notAnd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:notOr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:or"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxGroupPanel: import("@vue/runtime-core").DefineComponent<{
    allowColumnDragging: BooleanConstructor;
    emptyPanelText: StringConstructor;
    visible: PropType<boolean | "auto">;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowColumnDragging": null;
    "update:emptyPanelText": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowColumnDragging: BooleanConstructor;
    emptyPanelText: StringConstructor;
    visible: PropType<boolean | "auto">;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:emptyPanelText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowColumnDragging"?: ((...args: any[]) => any) | undefined;
}, {
    allowColumnDragging: boolean;
}>;
declare const DxHeaderFilter: import("@vue/runtime-core").DefineComponent<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        component: Record<string, any>;
        dataSource: DataSourceOptions | null;
    }) => void) | null>;
    groupInterval: PropType<number | HeaderFilterGroupInterval>;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig | ColumnHeaderFilterSearchConfig>;
    searchMode: PropType<SearchMode>;
    searchTimeout: NumberConstructor;
    texts: PropType<Record<string, any>>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSearch": null;
    "update:allowSelectAll": null;
    "update:dataSource": null;
    "update:groupInterval": null;
    "update:height": null;
    "update:search": null;
    "update:searchMode": null;
    "update:searchTimeout": null;
    "update:texts": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSearch: BooleanConstructor;
    allowSelectAll: BooleanConstructor;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        component: Record<string, any>;
        dataSource: DataSourceOptions | null;
    }) => void) | null>;
    groupInterval: PropType<number | HeaderFilterGroupInterval>;
    height: (NumberConstructor | StringConstructor)[];
    search: PropType<Record<string, any> | HeaderFilterSearchConfig | ColumnHeaderFilterSearchConfig>;
    searchMode: PropType<SearchMode>;
    searchTimeout: NumberConstructor;
    texts: PropType<Record<string, any>>;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSearch"?: ((...args: any[]) => any) | undefined;
    "onUpdate:search"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupInterval"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    allowSearch: boolean;
    allowSelectAll: boolean;
}>;
declare const DxHide: import("@vue/runtime-core").DefineComponent<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:complete": null;
    "update:delay": null;
    "update:direction": null;
    "update:duration": null;
    "update:easing": null;
    "update:from": null;
    "update:staggerDelay": null;
    "update:start": null;
    "update:to": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:complete"?: ((...args: any[]) => any) | undefined;
    "onUpdate:delay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:direction"?: ((...args: any[]) => any) | undefined;
    "onUpdate:duration"?: ((...args: any[]) => any) | undefined;
    "onUpdate:easing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:from"?: ((...args: any[]) => any) | undefined;
    "onUpdate:staggerDelay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:start"?: ((...args: any[]) => any) | undefined;
    "onUpdate:to"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxIcons: import("@vue/runtime-core").DefineComponent<{
    fix: StringConstructor;
    leftPosition: StringConstructor;
    rightPosition: StringConstructor;
    stickyPosition: StringConstructor;
    unfix: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:fix": null;
    "update:leftPosition": null;
    "update:rightPosition": null;
    "update:stickyPosition": null;
    "update:unfix": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    fix: StringConstructor;
    leftPosition: StringConstructor;
    rightPosition: StringConstructor;
    stickyPosition: StringConstructor;
    unfix: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fix"?: ((...args: any[]) => any) | undefined;
    "onUpdate:leftPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rightPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stickyPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:unfix"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxItem: import("@vue/runtime-core").DefineComponent<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:cssClass": null;
    "update:disabled": null;
    "update:html": null;
    "update:locateInMenu": null;
    "update:location": null;
    "update:menuItemTemplate": null;
    "update:name": null;
    "update:options": null;
    "update:showText": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
    "update:widget": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:locateInMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuItemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:widget"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxKeyboardNavigation: import("@vue/runtime-core").DefineComponent<{
    editOnKeyPress: BooleanConstructor;
    enabled: BooleanConstructor;
    enterKeyAction: PropType<EnterKeyAction>;
    enterKeyDirection: PropType<EnterKeyDirection>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:editOnKeyPress": null;
    "update:enabled": null;
    "update:enterKeyAction": null;
    "update:enterKeyDirection": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    editOnKeyPress: BooleanConstructor;
    enabled: BooleanConstructor;
    enterKeyAction: PropType<EnterKeyAction>;
    enterKeyDirection: PropType<EnterKeyDirection>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editOnKeyPress"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enterKeyAction"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enterKeyDirection"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
    editOnKeyPress: boolean;
}>;
declare const DxLabel: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    location: PropType<LabelLocation>;
    showColon: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:location": null;
    "update:showColon": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    location: PropType<LabelLocation>;
    showColon: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showColon"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    showColon: boolean;
}>;
declare const DxLoadPanel: import("@vue/runtime-core").DefineComponent<{
    enabled: PropType<boolean | "auto">;
    height: (NumberConstructor | StringConstructor)[];
    indicatorSrc: StringConstructor;
    shading: BooleanConstructor;
    shadingColor: StringConstructor;
    showIndicator: BooleanConstructor;
    showPane: BooleanConstructor;
    text: StringConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:enabled": null;
    "update:height": null;
    "update:indicatorSrc": null;
    "update:shading": null;
    "update:shadingColor": null;
    "update:showIndicator": null;
    "update:showPane": null;
    "update:text": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    enabled: PropType<boolean | "auto">;
    height: (NumberConstructor | StringConstructor)[];
    indicatorSrc: StringConstructor;
    shading: BooleanConstructor;
    shadingColor: StringConstructor;
    showIndicator: BooleanConstructor;
    showPane: BooleanConstructor;
    text: StringConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shading"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shadingColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:indicatorSrc"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showIndicator"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showPane"?: ((...args: any[]) => any) | undefined;
}, {
    shading: boolean;
    showIndicator: boolean;
    showPane: boolean;
}>;
declare const DxLookup: import("@vue/runtime-core").DefineComponent<{
    allowClearing: BooleanConstructor;
    calculateCellValue: PropType<(rowData: any) => any>;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        data: Record<string, any>;
        key: any;
    }) => Array<any> | Store | DataSourceOptions) | null>;
    displayExpr: PropType<string | ((data: any) => string)>;
    valueExpr: PropType<string | ((data: any) => string | number | boolean)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowClearing": null;
    "update:calculateCellValue": null;
    "update:dataSource": null;
    "update:displayExpr": null;
    "update:valueExpr": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowClearing: BooleanConstructor;
    calculateCellValue: PropType<(rowData: any) => any>;
    dataSource: PropType<any[] | Record<string, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | ((options: {
        data: Record<string, any>;
        key: any;
    }) => Array<any> | Store | DataSourceOptions) | null>;
    displayExpr: PropType<string | ((data: any) => string)>;
    valueExpr: PropType<string | ((data: any) => string | number | boolean)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateCellValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowClearing"?: ((...args: any[]) => any) | undefined;
}, {
    allowClearing: boolean;
}>;
declare const DxMasterDetail: import("@vue/runtime-core").DefineComponent<{
    autoExpandAll: BooleanConstructor;
    enabled: BooleanConstructor;
    template: {};
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:autoExpandAll": null;
    "update:enabled": null;
    "update:template": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    autoExpandAll: BooleanConstructor;
    enabled: BooleanConstructor;
    template: {};
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:autoExpandAll"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
    autoExpandAll: boolean;
}>;
declare const DxMy: import("@vue/runtime-core").DefineComponent<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxNumericRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxOffset: import("@vue/runtime-core").DefineComponent<{
    x: NumberConstructor;
    y: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: NumberConstructor;
    y: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxOperationDescriptions: import("@vue/runtime-core").DefineComponent<{
    between: StringConstructor;
    contains: StringConstructor;
    endsWith: StringConstructor;
    equal: StringConstructor;
    greaterThan: StringConstructor;
    greaterThanOrEqual: StringConstructor;
    lessThan: StringConstructor;
    lessThanOrEqual: StringConstructor;
    notContains: StringConstructor;
    notEqual: StringConstructor;
    startsWith: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:between": null;
    "update:contains": null;
    "update:endsWith": null;
    "update:equal": null;
    "update:greaterThan": null;
    "update:greaterThanOrEqual": null;
    "update:lessThan": null;
    "update:lessThanOrEqual": null;
    "update:notContains": null;
    "update:notEqual": null;
    "update:startsWith": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    between: StringConstructor;
    contains: StringConstructor;
    endsWith: StringConstructor;
    equal: StringConstructor;
    greaterThan: StringConstructor;
    greaterThanOrEqual: StringConstructor;
    lessThan: StringConstructor;
    lessThanOrEqual: StringConstructor;
    notContains: StringConstructor;
    notEqual: StringConstructor;
    startsWith: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:between"?: ((...args: any[]) => any) | undefined;
    "onUpdate:contains"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endsWith"?: ((...args: any[]) => any) | undefined;
    "onUpdate:equal"?: ((...args: any[]) => any) | undefined;
    "onUpdate:greaterThan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:greaterThanOrEqual"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lessThan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lessThanOrEqual"?: ((...args: any[]) => any) | undefined;
    "onUpdate:notContains"?: ((...args: any[]) => any) | undefined;
    "onUpdate:notEqual"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startsWith"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxPager: import("@vue/runtime-core").DefineComponent<{
    allowedPageSizes: PropType<"auto" | (number | PagerPageSize)[]>;
    displayMode: PropType<DisplayMode>;
    infoText: StringConstructor;
    label: StringConstructor;
    showInfo: BooleanConstructor;
    showNavigationButtons: BooleanConstructor;
    showPageSizeSelector: BooleanConstructor;
    visible: PropType<boolean | "auto">;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowedPageSizes": null;
    "update:displayMode": null;
    "update:infoText": null;
    "update:label": null;
    "update:showInfo": null;
    "update:showNavigationButtons": null;
    "update:showPageSizeSelector": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowedPageSizes: PropType<"auto" | (number | PagerPageSize)[]>;
    displayMode: PropType<DisplayMode>;
    infoText: StringConstructor;
    label: StringConstructor;
    showInfo: BooleanConstructor;
    showNavigationButtons: BooleanConstructor;
    showPageSizeSelector: BooleanConstructor;
    visible: PropType<boolean | "auto">;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowedPageSizes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:infoText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showInfo"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showNavigationButtons"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showPageSizeSelector"?: ((...args: any[]) => any) | undefined;
}, {
    showInfo: boolean;
    showNavigationButtons: boolean;
    showPageSizeSelector: boolean;
}>;
declare const DxPaging: import("@vue/runtime-core").DefineComponent<{
    enabled: BooleanConstructor;
    pageIndex: NumberConstructor;
    pageSize: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:enabled": null;
    "update:pageIndex": null;
    "update:pageSize": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    enabled: BooleanConstructor;
    pageIndex: NumberConstructor;
    pageSize: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pageIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pageSize"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxPatternRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    pattern: (StringConstructor | RegExpConstructor)[];
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:pattern": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    pattern: (StringConstructor | RegExpConstructor)[];
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pattern"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxPopup: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    animation: PropType<Record<string, any>>;
    bindingOptions: PropType<Record<string, any>>;
    closeOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    container: {};
    contentTemplate: {};
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    dragAndResizeArea: {};
    dragEnabled: BooleanConstructor;
    dragOutsideBoundary: BooleanConstructor;
    enableBodyScroll: BooleanConstructor;
    focusStateEnabled: BooleanConstructor;
    fullScreen: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hideOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    hideOnParentScroll: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    maxHeight: PropType<string | number | (() => number | string)>;
    maxWidth: PropType<string | number | (() => number | string)>;
    minHeight: PropType<string | number | (() => number | string)>;
    minWidth: PropType<string | number | (() => number | string)>;
    onContentReady: PropType<(e: EventInfo<any>) => void>;
    onDisposing: PropType<(e: EventInfo<any>) => void>;
    onHidden: PropType<(e: EventInfo<any>) => void>;
    onHiding: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onInitialized: PropType<(e: {
        component: Component<any>;
        element: any;
    }) => void>;
    onOptionChanged: PropType<(e: {
        component: DOMComponent;
        element: any;
        fullName: string;
        model: any;
        name: string;
        previousValue: any;
        value: any;
    }) => void>;
    onResize: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeEnd: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeStart: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onShowing: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onShown: PropType<(e: EventInfo<any>) => void>;
    onTitleRendered: PropType<(e: {
        component: dxPopup;
        element: any;
        model: any;
        titleElement: any;
    }) => void>;
    position: PropType<Record<string, any> | PositionAlignment | PositionConfig | (() => void)>;
    resizeEnabled: BooleanConstructor;
    restorePosition: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    shading: BooleanConstructor;
    shadingColor: StringConstructor;
    showCloseButton: BooleanConstructor;
    showTitle: BooleanConstructor;
    tabIndex: NumberConstructor;
    title: StringConstructor;
    titleTemplate: {};
    toolbarItems: PropType<import("devextreme/artifacts/npm/devextreme/ui/popup").ToolbarItem[]>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
    wrapperAttr: {};
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:animation": null;
    "update:bindingOptions": null;
    "update:closeOnOutsideClick": null;
    "update:container": null;
    "update:contentTemplate": null;
    "update:deferRendering": null;
    "update:disabled": null;
    "update:dragAndResizeArea": null;
    "update:dragEnabled": null;
    "update:dragOutsideBoundary": null;
    "update:enableBodyScroll": null;
    "update:focusStateEnabled": null;
    "update:fullScreen": null;
    "update:height": null;
    "update:hideOnOutsideClick": null;
    "update:hideOnParentScroll": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:maxHeight": null;
    "update:maxWidth": null;
    "update:minHeight": null;
    "update:minWidth": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onHidden": null;
    "update:onHiding": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:onResize": null;
    "update:onResizeEnd": null;
    "update:onResizeStart": null;
    "update:onShowing": null;
    "update:onShown": null;
    "update:onTitleRendered": null;
    "update:position": null;
    "update:resizeEnabled": null;
    "update:restorePosition": null;
    "update:rtlEnabled": null;
    "update:shading": null;
    "update:shadingColor": null;
    "update:showCloseButton": null;
    "update:showTitle": null;
    "update:tabIndex": null;
    "update:title": null;
    "update:titleTemplate": null;
    "update:toolbarItems": null;
    "update:visible": null;
    "update:width": null;
    "update:wrapperAttr": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    animation: PropType<Record<string, any>>;
    bindingOptions: PropType<Record<string, any>>;
    closeOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    container: {};
    contentTemplate: {};
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    dragAndResizeArea: {};
    dragEnabled: BooleanConstructor;
    dragOutsideBoundary: BooleanConstructor;
    enableBodyScroll: BooleanConstructor;
    focusStateEnabled: BooleanConstructor;
    fullScreen: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hideOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    hideOnParentScroll: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    maxHeight: PropType<string | number | (() => number | string)>;
    maxWidth: PropType<string | number | (() => number | string)>;
    minHeight: PropType<string | number | (() => number | string)>;
    minWidth: PropType<string | number | (() => number | string)>;
    onContentReady: PropType<(e: EventInfo<any>) => void>;
    onDisposing: PropType<(e: EventInfo<any>) => void>;
    onHidden: PropType<(e: EventInfo<any>) => void>;
    onHiding: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onInitialized: PropType<(e: {
        component: Component<any>;
        element: any;
    }) => void>;
    onOptionChanged: PropType<(e: {
        component: DOMComponent;
        element: any;
        fullName: string;
        model: any;
        name: string;
        previousValue: any;
        value: any;
    }) => void>;
    onResize: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeEnd: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeStart: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onShowing: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onShown: PropType<(e: EventInfo<any>) => void>;
    onTitleRendered: PropType<(e: {
        component: dxPopup;
        element: any;
        model: any;
        titleElement: any;
    }) => void>;
    position: PropType<Record<string, any> | PositionAlignment | PositionConfig | (() => void)>;
    resizeEnabled: BooleanConstructor;
    restorePosition: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    shading: BooleanConstructor;
    shadingColor: StringConstructor;
    showCloseButton: BooleanConstructor;
    showTitle: BooleanConstructor;
    tabIndex: NumberConstructor;
    title: StringConstructor;
    titleTemplate: {};
    toolbarItems: PropType<import("devextreme/artifacts/npm/devextreme/ui/popup").ToolbarItem[]>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
    wrapperAttr: {};
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deferRendering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:titleTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showTitle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:animation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:closeOnOutsideClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:container"?: ((...args: any[]) => any) | undefined;
    "onUpdate:contentTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragAndResizeArea"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragOutsideBoundary"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enableBodyScroll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fullScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hideOnOutsideClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hideOnParentScroll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxHeight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minHeight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onHidden"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onHiding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResizeEnd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResizeStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onShowing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onShown"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onTitleRendered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:resizeEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:restorePosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shading"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shadingColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showCloseButton"?: ((...args: any[]) => any) | undefined;
    "onUpdate:toolbarItems"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wrapperAttr"?: ((...args: any[]) => any) | undefined;
}, {
    deferRendering: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    showTitle: boolean;
    dragEnabled: boolean;
    dragOutsideBoundary: boolean;
    enableBodyScroll: boolean;
    fullScreen: boolean;
    hideOnParentScroll: boolean;
    resizeEnabled: boolean;
    restorePosition: boolean;
    shading: boolean;
    showCloseButton: boolean;
}>;
declare const DxPosition: import("@vue/runtime-core").DefineComponent<{
    at: PropType<Record<string, any> | PositionAlignment>;
    boundary: {};
    boundaryOffset: PropType<string | Record<string, any>>;
    collision: PropType<Record<string, any> | CollisionResolutionCombination>;
    my: PropType<Record<string, any> | PositionAlignment>;
    of: {};
    offset: PropType<string | Record<string, any>>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:at": null;
    "update:boundary": null;
    "update:boundaryOffset": null;
    "update:collision": null;
    "update:my": null;
    "update:of": null;
    "update:offset": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    at: PropType<Record<string, any> | PositionAlignment>;
    boundary: {};
    boundaryOffset: PropType<string | Record<string, any>>;
    collision: PropType<Record<string, any> | CollisionResolutionCombination>;
    my: PropType<Record<string, any> | PositionAlignment>;
    of: {};
    offset: PropType<string | Record<string, any>>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:at"?: ((...args: any[]) => any) | undefined;
    "onUpdate:boundary"?: ((...args: any[]) => any) | undefined;
    "onUpdate:boundaryOffset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:collision"?: ((...args: any[]) => any) | undefined;
    "onUpdate:my"?: ((...args: any[]) => any) | undefined;
    "onUpdate:of"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offset"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxRangeRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:max": null;
    "update:message": null;
    "update:min": null;
    "update:reevaluate": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
declare const DxRemoteOperations: import("@vue/runtime-core").DefineComponent<{
    filtering: BooleanConstructor;
    grouping: BooleanConstructor;
    groupPaging: BooleanConstructor;
    paging: BooleanConstructor;
    sorting: BooleanConstructor;
    summary: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:filtering": null;
    "update:grouping": null;
    "update:groupPaging": null;
    "update:paging": null;
    "update:sorting": null;
    "update:summary": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    filtering: BooleanConstructor;
    grouping: BooleanConstructor;
    groupPaging: BooleanConstructor;
    paging: BooleanConstructor;
    sorting: BooleanConstructor;
    summary: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:grouping"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sorting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:summary"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filtering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupPaging"?: ((...args: any[]) => any) | undefined;
}, {
    summary: boolean;
    grouping: boolean;
    paging: boolean;
    sorting: boolean;
    filtering: boolean;
    groupPaging: boolean;
}>;
declare const DxRequiredRule: import("@vue/runtime-core").DefineComponent<{
    message: StringConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:message": null;
    "update:trim": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    message: StringConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trim"?: ((...args: any[]) => any) | undefined;
}, {
    trim: boolean;
}>;
declare const DxRowDragging: import("@vue/runtime-core").DefineComponent<{
    allowDropInsideItem: BooleanConstructor;
    allowReordering: BooleanConstructor;
    autoScroll: BooleanConstructor;
    boundary: {};
    container: {};
    cursorOffset: PropType<string | Record<string, any>>;
    data: {};
    dragDirection: PropType<DragDirection>;
    dragTemplate: {};
    dropFeedbackMode: PropType<DragHighlight>;
    filter: StringConstructor;
    group: StringConstructor;
    handle: StringConstructor;
    onAdd: PropType<(e: {
        component: GridBase;
        dropInsideItem: boolean;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    onDragChange: PropType<(e: {
        cancel: boolean;
        component: GridBase;
        dropInsideItem: boolean;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    onDragEnd: PropType<(e: {
        cancel: boolean;
        component: GridBase;
        dropInsideItem: boolean;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    onDragMove: PropType<(e: {
        cancel: boolean;
        component: GridBase;
        dropInsideItem: boolean;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    onDragStart: PropType<(e: {
        cancel: boolean;
        component: GridBase;
        event: event;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
    }) => void>;
    onRemove: PropType<(e: {
        component: GridBase;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    onReorder: PropType<(e: {
        component: GridBase;
        dropInsideItem: boolean;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        promise: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    scrollSensitivity: NumberConstructor;
    scrollSpeed: NumberConstructor;
    showDragIcons: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowDropInsideItem": null;
    "update:allowReordering": null;
    "update:autoScroll": null;
    "update:boundary": null;
    "update:container": null;
    "update:cursorOffset": null;
    "update:data": null;
    "update:dragDirection": null;
    "update:dragTemplate": null;
    "update:dropFeedbackMode": null;
    "update:filter": null;
    "update:group": null;
    "update:handle": null;
    "update:onAdd": null;
    "update:onDragChange": null;
    "update:onDragEnd": null;
    "update:onDragMove": null;
    "update:onDragStart": null;
    "update:onRemove": null;
    "update:onReorder": null;
    "update:scrollSensitivity": null;
    "update:scrollSpeed": null;
    "update:showDragIcons": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowDropInsideItem: BooleanConstructor;
    allowReordering: BooleanConstructor;
    autoScroll: BooleanConstructor;
    boundary: {};
    container: {};
    cursorOffset: PropType<string | Record<string, any>>;
    data: {};
    dragDirection: PropType<DragDirection>;
    dragTemplate: {};
    dropFeedbackMode: PropType<DragHighlight>;
    filter: StringConstructor;
    group: StringConstructor;
    handle: StringConstructor;
    onAdd: PropType<(e: {
        component: GridBase;
        dropInsideItem: boolean;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    onDragChange: PropType<(e: {
        cancel: boolean;
        component: GridBase;
        dropInsideItem: boolean;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    onDragEnd: PropType<(e: {
        cancel: boolean;
        component: GridBase;
        dropInsideItem: boolean;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    onDragMove: PropType<(e: {
        cancel: boolean;
        component: GridBase;
        dropInsideItem: boolean;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    onDragStart: PropType<(e: {
        cancel: boolean;
        component: GridBase;
        event: event;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
    }) => void>;
    onRemove: PropType<(e: {
        component: GridBase;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    onReorder: PropType<(e: {
        component: GridBase;
        dropInsideItem: boolean;
        event: event;
        fromComponent: dxSortable | dxDraggable;
        fromData: any;
        fromIndex: number;
        itemData: any;
        itemElement: any;
        promise: any;
        toComponent: dxSortable | dxDraggable;
        toData: any;
        toIndex: number;
    }) => void>;
    scrollSensitivity: NumberConstructor;
    scrollSpeed: NumberConstructor;
    showDragIcons: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:container"?: ((...args: any[]) => any) | undefined;
    "onUpdate:boundary"?: ((...args: any[]) => any) | undefined;
    "onUpdate:data"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowReordering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowDropInsideItem"?: ((...args: any[]) => any) | undefined;
    "onUpdate:autoScroll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cursorOffset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragDirection"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dropFeedbackMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:group"?: ((...args: any[]) => any) | undefined;
    "onUpdate:handle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAdd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragChange"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragEnd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragMove"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRemove"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onReorder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollSensitivity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollSpeed"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showDragIcons"?: ((...args: any[]) => any) | undefined;
}, {
    allowReordering: boolean;
    allowDropInsideItem: boolean;
    autoScroll: boolean;
    showDragIcons: boolean;
}>;
declare const DxScrolling: import("@vue/runtime-core").DefineComponent<{
    columnRenderingMode: PropType<DataRenderMode>;
    mode: PropType<DataGridScrollMode>;
    preloadEnabled: BooleanConstructor;
    renderAsync: BooleanConstructor;
    rowRenderingMode: PropType<DataRenderMode>;
    scrollByContent: BooleanConstructor;
    scrollByThumb: BooleanConstructor;
    showScrollbar: PropType<ScrollbarMode>;
    useNative: PropType<boolean | "auto">;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:columnRenderingMode": null;
    "update:mode": null;
    "update:preloadEnabled": null;
    "update:renderAsync": null;
    "update:rowRenderingMode": null;
    "update:scrollByContent": null;
    "update:scrollByThumb": null;
    "update:showScrollbar": null;
    "update:useNative": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    columnRenderingMode: PropType<DataRenderMode>;
    mode: PropType<DataGridScrollMode>;
    preloadEnabled: BooleanConstructor;
    renderAsync: BooleanConstructor;
    rowRenderingMode: PropType<DataRenderMode>;
    scrollByContent: BooleanConstructor;
    scrollByThumb: BooleanConstructor;
    showScrollbar: PropType<ScrollbarMode>;
    useNative: PropType<boolean | "auto">;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:renderAsync"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columnRenderingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:preloadEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rowRenderingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollByContent"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollByThumb"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showScrollbar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useNative"?: ((...args: any[]) => any) | undefined;
}, {
    renderAsync: boolean;
    preloadEnabled: boolean;
    scrollByContent: boolean;
    scrollByThumb: boolean;
}>;
declare const DxSearch: import("@vue/runtime-core").DefineComponent<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    timeout: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:editorOptions": null;
    "update:enabled": null;
    "update:mode": null;
    "update:searchExpr": null;
    "update:timeout": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    editorOptions: {};
    enabled: BooleanConstructor;
    mode: PropType<SearchMode>;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    timeout: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:timeout"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxSearchPanel: import("@vue/runtime-core").DefineComponent<{
    highlightCaseSensitive: BooleanConstructor;
    highlightSearchText: BooleanConstructor;
    placeholder: StringConstructor;
    searchVisibleColumnsOnly: BooleanConstructor;
    text: StringConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:highlightCaseSensitive": null;
    "update:highlightSearchText": null;
    "update:placeholder": null;
    "update:searchVisibleColumnsOnly": null;
    "update:text": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    highlightCaseSensitive: BooleanConstructor;
    highlightSearchText: BooleanConstructor;
    placeholder: StringConstructor;
    searchVisibleColumnsOnly: BooleanConstructor;
    text: StringConstructor;
    visible: BooleanConstructor;
    width: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highlightCaseSensitive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highlightSearchText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchVisibleColumnsOnly"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    highlightCaseSensitive: boolean;
    highlightSearchText: boolean;
    searchVisibleColumnsOnly: boolean;
}>;
declare const DxSelection: import("@vue/runtime-core").DefineComponent<{
    allowSelectAll: BooleanConstructor;
    deferred: BooleanConstructor;
    mode: PropType<SingleMultipleOrNone>;
    recursive: BooleanConstructor;
    selectAllMode: PropType<SelectAllMode>;
    selectByClick: BooleanConstructor;
    sensitivity: PropType<SelectionSensitivity>;
    showCheckBoxesMode: PropType<SelectionColumnDisplayMode>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowSelectAll": null;
    "update:deferred": null;
    "update:mode": null;
    "update:recursive": null;
    "update:selectAllMode": null;
    "update:selectByClick": null;
    "update:sensitivity": null;
    "update:showCheckBoxesMode": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowSelectAll: BooleanConstructor;
    deferred: BooleanConstructor;
    mode: PropType<SingleMultipleOrNone>;
    recursive: BooleanConstructor;
    selectAllMode: PropType<SelectAllMode>;
    selectByClick: BooleanConstructor;
    sensitivity: PropType<SelectionSensitivity>;
    showCheckBoxesMode: PropType<SelectionColumnDisplayMode>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectByClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSelectAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:recursive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deferred"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectAllMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sensitivity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showCheckBoxesMode"?: ((...args: any[]) => any) | undefined;
}, {
    selectByClick: boolean;
    allowSelectAll: boolean;
    recursive: boolean;
    deferred: boolean;
}>;
declare const DxShow: import("@vue/runtime-core").DefineComponent<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:complete": null;
    "update:delay": null;
    "update:direction": null;
    "update:duration": null;
    "update:easing": null;
    "update:from": null;
    "update:staggerDelay": null;
    "update:start": null;
    "update:to": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:complete"?: ((...args: any[]) => any) | undefined;
    "onUpdate:delay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:direction"?: ((...args: any[]) => any) | undefined;
    "onUpdate:duration"?: ((...args: any[]) => any) | undefined;
    "onUpdate:easing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:from"?: ((...args: any[]) => any) | undefined;
    "onUpdate:staggerDelay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:start"?: ((...args: any[]) => any) | undefined;
    "onUpdate:to"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxSortByGroupSummaryInfo: import("@vue/runtime-core").DefineComponent<{
    groupColumn: StringConstructor;
    sortOrder: PropType<SortOrder>;
    summaryItem: (NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:groupColumn": null;
    "update:sortOrder": null;
    "update:summaryItem": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    groupColumn: StringConstructor;
    sortOrder: PropType<SortOrder>;
    summaryItem: (NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortOrder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:summaryItem"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxSorting: import("@vue/runtime-core").DefineComponent<{
    ascendingText: StringConstructor;
    clearText: StringConstructor;
    descendingText: StringConstructor;
    mode: PropType<SingleMultipleOrNone>;
    showSortIndexes: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ascendingText": null;
    "update:clearText": null;
    "update:descendingText": null;
    "update:mode": null;
    "update:showSortIndexes": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ascendingText: StringConstructor;
    clearText: StringConstructor;
    descendingText: StringConstructor;
    mode: PropType<SingleMultipleOrNone>;
    showSortIndexes: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ascendingText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:clearText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:descendingText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showSortIndexes"?: ((...args: any[]) => any) | undefined;
}, {
    showSortIndexes: boolean;
}>;
declare const DxStateStoring: import("@vue/runtime-core").DefineComponent<{
    customLoad: PropType<() => any>;
    customSave: PropType<(gridState: any) => void>;
    enabled: BooleanConstructor;
    savingTimeout: NumberConstructor;
    storageKey: StringConstructor;
    type: PropType<StateStoreType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:customLoad": null;
    "update:customSave": null;
    "update:enabled": null;
    "update:savingTimeout": null;
    "update:storageKey": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    customLoad: PropType<() => any>;
    customSave: PropType<(gridState: any) => void>;
    enabled: BooleanConstructor;
    savingTimeout: NumberConstructor;
    storageKey: StringConstructor;
    type: PropType<StateStoreType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customLoad"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customSave"?: ((...args: any[]) => any) | undefined;
    "onUpdate:savingTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:storageKey"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxStringLengthRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    max: NumberConstructor;
    message: StringConstructor;
    min: NumberConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:max": null;
    "update:message": null;
    "update:min": null;
    "update:trim": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    max: NumberConstructor;
    message: StringConstructor;
    min: NumberConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trim"?: ((...args: any[]) => any) | undefined;
}, {
    trim: boolean;
    ignoreEmptyValue: boolean;
}>;
declare const DxSummary: import("@vue/runtime-core").DefineComponent<{
    calculateCustomSummary: PropType<(options: {
        component: dxDataGrid;
        groupIndex: number;
        name: string;
        summaryProcess: string;
        totalValue: any;
        value: any;
    }) => void>;
    groupItems: PropType<Record<string, any>[]>;
    recalculateWhileEditing: BooleanConstructor;
    skipEmptyValues: BooleanConstructor;
    texts: PropType<Record<string, any>>;
    totalItems: PropType<Record<string, any>[]>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:calculateCustomSummary": null;
    "update:groupItems": null;
    "update:recalculateWhileEditing": null;
    "update:skipEmptyValues": null;
    "update:texts": null;
    "update:totalItems": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    calculateCustomSummary: PropType<(options: {
        component: dxDataGrid;
        groupIndex: number;
        name: string;
        summaryProcess: string;
        totalValue: any;
        value: any;
    }) => void>;
    groupItems: PropType<Record<string, any>[]>;
    recalculateWhileEditing: BooleanConstructor;
    skipEmptyValues: BooleanConstructor;
    texts: PropType<Record<string, any>>;
    totalItems: PropType<Record<string, any>[]>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:texts"?: ((...args: any[]) => any) | undefined;
    "onUpdate:skipEmptyValues"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculateCustomSummary"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupItems"?: ((...args: any[]) => any) | undefined;
    "onUpdate:recalculateWhileEditing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:totalItems"?: ((...args: any[]) => any) | undefined;
}, {
    skipEmptyValues: boolean;
    recalculateWhileEditing: boolean;
}>;
declare const DxSummaryTexts: import("@vue/runtime-core").DefineComponent<{
    avg: StringConstructor;
    avgOtherColumn: StringConstructor;
    count: StringConstructor;
    max: StringConstructor;
    maxOtherColumn: StringConstructor;
    min: StringConstructor;
    minOtherColumn: StringConstructor;
    sum: StringConstructor;
    sumOtherColumn: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:avg": null;
    "update:avgOtherColumn": null;
    "update:count": null;
    "update:max": null;
    "update:maxOtherColumn": null;
    "update:min": null;
    "update:minOtherColumn": null;
    "update:sum": null;
    "update:sumOtherColumn": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    avg: StringConstructor;
    avgOtherColumn: StringConstructor;
    count: StringConstructor;
    max: StringConstructor;
    maxOtherColumn: StringConstructor;
    min: StringConstructor;
    minOtherColumn: StringConstructor;
    sum: StringConstructor;
    sumOtherColumn: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:avg"?: ((...args: any[]) => any) | undefined;
    "onUpdate:avgOtherColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:count"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxOtherColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minOtherColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sum"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sumOtherColumn"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxTexts: import("@vue/runtime-core").DefineComponent<{
    addRow: StringConstructor;
    avg: StringConstructor;
    avgOtherColumn: StringConstructor;
    cancel: StringConstructor;
    cancelAllChanges: StringConstructor;
    cancelRowChanges: StringConstructor;
    clearFilter: StringConstructor;
    confirmDeleteMessage: StringConstructor;
    confirmDeleteTitle: StringConstructor;
    count: StringConstructor;
    createFilter: StringConstructor;
    deleteRow: StringConstructor;
    editRow: StringConstructor;
    emptyValue: StringConstructor;
    exportAll: StringConstructor;
    exportSelectedRows: StringConstructor;
    exportTo: StringConstructor;
    filterEnabledHint: StringConstructor;
    fix: StringConstructor;
    groupByThisColumn: StringConstructor;
    groupContinuedMessage: StringConstructor;
    groupContinuesMessage: StringConstructor;
    leftPosition: StringConstructor;
    max: StringConstructor;
    maxOtherColumn: StringConstructor;
    min: StringConstructor;
    minOtherColumn: StringConstructor;
    ok: StringConstructor;
    rightPosition: StringConstructor;
    saveAllChanges: StringConstructor;
    saveRowChanges: StringConstructor;
    stickyPosition: StringConstructor;
    sum: StringConstructor;
    sumOtherColumn: StringConstructor;
    undeleteRow: StringConstructor;
    unfix: StringConstructor;
    ungroup: StringConstructor;
    ungroupAll: StringConstructor;
    validationCancelChanges: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:addRow": null;
    "update:avg": null;
    "update:avgOtherColumn": null;
    "update:cancel": null;
    "update:cancelAllChanges": null;
    "update:cancelRowChanges": null;
    "update:clearFilter": null;
    "update:confirmDeleteMessage": null;
    "update:confirmDeleteTitle": null;
    "update:count": null;
    "update:createFilter": null;
    "update:deleteRow": null;
    "update:editRow": null;
    "update:emptyValue": null;
    "update:exportAll": null;
    "update:exportSelectedRows": null;
    "update:exportTo": null;
    "update:filterEnabledHint": null;
    "update:fix": null;
    "update:groupByThisColumn": null;
    "update:groupContinuedMessage": null;
    "update:groupContinuesMessage": null;
    "update:leftPosition": null;
    "update:max": null;
    "update:maxOtherColumn": null;
    "update:min": null;
    "update:minOtherColumn": null;
    "update:ok": null;
    "update:rightPosition": null;
    "update:saveAllChanges": null;
    "update:saveRowChanges": null;
    "update:stickyPosition": null;
    "update:sum": null;
    "update:sumOtherColumn": null;
    "update:undeleteRow": null;
    "update:unfix": null;
    "update:ungroup": null;
    "update:ungroupAll": null;
    "update:validationCancelChanges": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    addRow: StringConstructor;
    avg: StringConstructor;
    avgOtherColumn: StringConstructor;
    cancel: StringConstructor;
    cancelAllChanges: StringConstructor;
    cancelRowChanges: StringConstructor;
    clearFilter: StringConstructor;
    confirmDeleteMessage: StringConstructor;
    confirmDeleteTitle: StringConstructor;
    count: StringConstructor;
    createFilter: StringConstructor;
    deleteRow: StringConstructor;
    editRow: StringConstructor;
    emptyValue: StringConstructor;
    exportAll: StringConstructor;
    exportSelectedRows: StringConstructor;
    exportTo: StringConstructor;
    filterEnabledHint: StringConstructor;
    fix: StringConstructor;
    groupByThisColumn: StringConstructor;
    groupContinuedMessage: StringConstructor;
    groupContinuesMessage: StringConstructor;
    leftPosition: StringConstructor;
    max: StringConstructor;
    maxOtherColumn: StringConstructor;
    min: StringConstructor;
    minOtherColumn: StringConstructor;
    ok: StringConstructor;
    rightPosition: StringConstructor;
    saveAllChanges: StringConstructor;
    saveRowChanges: StringConstructor;
    stickyPosition: StringConstructor;
    sum: StringConstructor;
    sumOtherColumn: StringConstructor;
    undeleteRow: StringConstructor;
    unfix: StringConstructor;
    ungroup: StringConstructor;
    ungroupAll: StringConstructor;
    validationCancelChanges: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fix"?: ((...args: any[]) => any) | undefined;
    "onUpdate:leftPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rightPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stickyPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:unfix"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cancel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:emptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ok"?: ((...args: any[]) => any) | undefined;
    "onUpdate:addRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cancelAllChanges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cancelRowChanges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:confirmDeleteMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:confirmDeleteTitle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deleteRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:saveAllChanges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:saveRowChanges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:undeleteRow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationCancelChanges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:exportAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:exportSelectedRows"?: ((...args: any[]) => any) | undefined;
    "onUpdate:exportTo"?: ((...args: any[]) => any) | undefined;
    "onUpdate:clearFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:createFilter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filterEnabledHint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupByThisColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupContinuedMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupContinuesMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ungroup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ungroupAll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:avg"?: ((...args: any[]) => any) | undefined;
    "onUpdate:avgOtherColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:count"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxOtherColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minOtherColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sum"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sumOtherColumn"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxTo: import("@vue/runtime-core").DefineComponent<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:left": null;
    "update:opacity": null;
    "update:position": null;
    "update:scale": null;
    "update:top": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:left"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scale"?: ((...args: any[]) => any) | undefined;
    "onUpdate:top"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxToolbar: import("@vue/runtime-core").DefineComponent<{
    disabled: BooleanConstructor;
    items: PropType<(DataGridPredefinedToolbarItem | DxDataGridTypes.ToolbarItem)[]>;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:disabled": null;
    "update:items": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    disabled: BooleanConstructor;
    items: PropType<(DataGridPredefinedToolbarItem | DxDataGridTypes.ToolbarItem)[]>;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxToolbarItem: import("@vue/runtime-core").DefineComponent<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    toolbar: PropType<ToolbarLocation>;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:cssClass": null;
    "update:disabled": null;
    "update:html": null;
    "update:locateInMenu": null;
    "update:location": null;
    "update:menuItemTemplate": null;
    "update:options": null;
    "update:showText": null;
    "update:template": null;
    "update:text": null;
    "update:toolbar": null;
    "update:visible": null;
    "update:widget": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    toolbar: PropType<ToolbarLocation>;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:locateInMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuItemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:toolbar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:widget"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxTotalItem: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    column: StringConstructor;
    cssClass: StringConstructor;
    customizeText: PropType<(itemInfo: {
        value: string | number | Date;
        valueText: string;
    }) => string>;
    displayFormat: StringConstructor;
    name: StringConstructor;
    showInColumn: StringConstructor;
    skipEmptyValues: BooleanConstructor;
    summaryType: PropType<string>;
    valueFormat: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:column": null;
    "update:cssClass": null;
    "update:customizeText": null;
    "update:displayFormat": null;
    "update:name": null;
    "update:showInColumn": null;
    "update:skipEmptyValues": null;
    "update:summaryType": null;
    "update:valueFormat": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    column: StringConstructor;
    cssClass: StringConstructor;
    customizeText: PropType<(itemInfo: {
        value: string | number | Date;
        valueText: string;
    }) => string>;
    displayFormat: StringConstructor;
    name: StringConstructor;
    showInColumn: StringConstructor;
    skipEmptyValues: BooleanConstructor;
    summaryType: PropType<string>;
    valueFormat: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayFormat"?: ((...args: any[]) => any) | undefined;
    "onUpdate:column"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showInColumn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:skipEmptyValues"?: ((...args: any[]) => any) | undefined;
    "onUpdate:summaryType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueFormat"?: ((...args: any[]) => any) | undefined;
}, {
    skipEmptyValues: boolean;
}>;
declare const DxValidationRule: import("@vue/runtime-core").DefineComponent<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    pattern: (StringConstructor | RegExpConstructor)[];
    reevaluate: BooleanConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:comparisonTarget": null;
    "update:comparisonType": null;
    "update:ignoreEmptyValue": null;
    "update:max": null;
    "update:message": null;
    "update:min": null;
    "update:pattern": null;
    "update:reevaluate": null;
    "update:trim": null;
    "update:type": null;
    "update:validationCallback": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    pattern: (StringConstructor | RegExpConstructor)[];
    reevaluate: BooleanConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationCallback"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonTarget"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pattern"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trim"?: ((...args: any[]) => any) | undefined;
}, {
    trim: boolean;
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
declare const DxValueFormat: import("@vue/runtime-core").DefineComponent<{
    currency: StringConstructor;
    formatter: PropType<(value: number | Date) => string>;
    parser: PropType<(value: string) => number | Date>;
    precision: NumberConstructor;
    type: PropType<string>;
    useCurrencyAccountingStyle: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:currency": null;
    "update:formatter": null;
    "update:parser": null;
    "update:precision": null;
    "update:type": null;
    "update:useCurrencyAccountingStyle": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    currency: StringConstructor;
    formatter: PropType<(value: number | Date) => string>;
    parser: PropType<(value: string) => number | Date>;
    precision: NumberConstructor;
    type: PropType<string>;
    useCurrencyAccountingStyle: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:currency"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formatter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:parser"?: ((...args: any[]) => any) | undefined;
    "onUpdate:precision"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useCurrencyAccountingStyle"?: ((...args: any[]) => any) | undefined;
}, {
    useCurrencyAccountingStyle: boolean;
}>;
export default DxDataGrid;
export { DxDataGrid, DxAnimation, DxAsyncRule, DxAt, DxBoundaryOffset, DxButton, DxChange, DxColCountByScreen, DxCollision, DxColumn, DxColumnChooser, DxColumnChooserSearch, DxColumnChooserSelection, DxColumnFixing, DxColumnFixingTexts, DxColumnHeaderFilter, DxColumnHeaderFilterSearch, DxColumnLookup, DxCompareRule, DxCursorOffset, DxCustomOperation, DxCustomRule, DxDataGridHeaderFilter, DxDataGridHeaderFilterSearch, DxDataGridHeaderFilterTexts, DxDataGridSelection, DxEditing, DxEditingTexts, DxEmailRule, DxExport, DxExportTexts, DxField, DxFieldLookup, DxFilterBuilder, DxFilterBuilderPopup, DxFilterOperationDescriptions, DxFilterPanel, DxFilterPanelTexts, DxFilterRow, DxForm, DxFormat, DxFormItem, DxFrom, DxGrouping, DxGroupingTexts, DxGroupItem, DxGroupOperationDescriptions, DxGroupPanel, DxHeaderFilter, DxHide, DxIcons, DxItem, DxKeyboardNavigation, DxLabel, DxLoadPanel, DxLookup, DxMasterDetail, DxMy, DxNumericRule, DxOffset, DxOperationDescriptions, DxPager, DxPaging, DxPatternRule, DxPopup, DxPosition, DxRangeRule, DxRemoteOperations, DxRequiredRule, DxRowDragging, DxScrolling, DxSearch, DxSearchPanel, DxSelection, DxShow, DxSortByGroupSummaryInfo, DxSorting, DxStateStoring, DxStringLengthRule, DxSummary, DxSummaryTexts, DxTexts, DxTo, DxToolbar, DxToolbarItem, DxTotalItem, DxValidationRule, DxValueFormat };
import type * as DxDataGridTypes from "devextreme/ui/data_grid_types";
export { DxDataGridTypes };
