/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { PropType } from "vue";
import FileUploader, { Properties } from "devextreme/ui/file_uploader";
import UploadInfo from "devextreme/file_management/upload_info";
import { BeforeSendEvent, ContentReadyEvent, DisposingEvent, DropZoneEnterEvent, DropZoneLeaveEvent, FilesUploadedEvent, InitializedEvent, OptionChangedEvent, ProgressEvent, UploadAbortedEvent, UploadedEvent, UploadErrorEvent, UploadStartedEvent, ValueChangedEvent, UploadHttpMethod, FileUploadMode } from "devextreme/ui/file_uploader";
import { ValidationStatus } from "devextreme/common";
type AccessibleOptions = Pick<Properties, "abortUpload" | "accept" | "accessKey" | "activeStateEnabled" | "allowCanceling" | "allowedFileExtensions" | "chunkSize" | "dialogTrigger" | "disabled" | "dropZone" | "elementAttr" | "focusStateEnabled" | "height" | "hint" | "hoverStateEnabled" | "inputAttr" | "invalidFileExtensionMessage" | "invalidMaxFileSizeMessage" | "invalidMinFileSizeMessage" | "isDirty" | "isValid" | "labelText" | "maxFileSize" | "minFileSize" | "multiple" | "name" | "onBeforeSend" | "onContentReady" | "onDisposing" | "onDropZoneEnter" | "onDropZoneLeave" | "onFilesUploaded" | "onInitialized" | "onOptionChanged" | "onProgress" | "onUploadAborted" | "onUploaded" | "onUploadError" | "onUploadStarted" | "onValueChanged" | "progress" | "readOnly" | "readyToUploadMessage" | "rtlEnabled" | "selectButtonText" | "showFileList" | "tabIndex" | "uploadAbortedMessage" | "uploadButtonText" | "uploadChunk" | "uploadCustomData" | "uploadedMessage" | "uploadFailedMessage" | "uploadFile" | "uploadHeaders" | "uploadMethod" | "uploadMode" | "uploadUrl" | "validationError" | "validationErrors" | "validationStatus" | "value" | "visible" | "width">;
interface DxFileUploader extends AccessibleOptions {
    readonly instance?: FileUploader;
}
declare const DxFileUploader: import("@vue/runtime-core").DefineComponent<{
    abortUpload: PropType<(file: any, uploadInfo?: UploadInfo) => any>;
    accept: StringConstructor;
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowCanceling: BooleanConstructor;
    allowedFileExtensions: PropType<string[]>;
    chunkSize: NumberConstructor;
    dialogTrigger: {};
    disabled: BooleanConstructor;
    dropZone: {};
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    inputAttr: {};
    invalidFileExtensionMessage: StringConstructor;
    invalidMaxFileSizeMessage: StringConstructor;
    invalidMinFileSizeMessage: StringConstructor;
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    labelText: StringConstructor;
    maxFileSize: NumberConstructor;
    minFileSize: NumberConstructor;
    multiple: BooleanConstructor;
    name: StringConstructor;
    onBeforeSend: PropType<(e: BeforeSendEvent) => void>;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onDropZoneEnter: PropType<(e: DropZoneEnterEvent) => void>;
    onDropZoneLeave: PropType<(e: DropZoneLeaveEvent) => void>;
    onFilesUploaded: PropType<(e: FilesUploadedEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onProgress: PropType<(e: ProgressEvent) => void>;
    onUploadAborted: PropType<(e: UploadAbortedEvent) => void>;
    onUploaded: PropType<(e: UploadedEvent) => void>;
    onUploadError: PropType<(e: UploadErrorEvent) => void>;
    onUploadStarted: PropType<(e: UploadStartedEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    progress: NumberConstructor;
    readOnly: BooleanConstructor;
    readyToUploadMessage: StringConstructor;
    rtlEnabled: BooleanConstructor;
    selectButtonText: StringConstructor;
    showFileList: BooleanConstructor;
    tabIndex: NumberConstructor;
    uploadAbortedMessage: StringConstructor;
    uploadButtonText: StringConstructor;
    uploadChunk: PropType<(file: any, uploadInfo: UploadInfo) => any>;
    uploadCustomData: {};
    uploadedMessage: StringConstructor;
    uploadFailedMessage: StringConstructor;
    uploadFile: PropType<(file: any, progressCallback: (() => void)) => any>;
    uploadHeaders: {};
    uploadMethod: PropType<UploadHttpMethod>;
    uploadMode: PropType<FileUploadMode>;
    uploadUrl: StringConstructor;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationStatus: PropType<ValidationStatus>;
    value: PropType<any[]>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {
    instance(): FileUploader;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:abortUpload": null;
    "update:accept": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:allowCanceling": null;
    "update:allowedFileExtensions": null;
    "update:chunkSize": null;
    "update:dialogTrigger": null;
    "update:disabled": null;
    "update:dropZone": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:inputAttr": null;
    "update:invalidFileExtensionMessage": null;
    "update:invalidMaxFileSizeMessage": null;
    "update:invalidMinFileSizeMessage": null;
    "update:isDirty": null;
    "update:isValid": null;
    "update:labelText": null;
    "update:maxFileSize": null;
    "update:minFileSize": null;
    "update:multiple": null;
    "update:name": null;
    "update:onBeforeSend": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onDropZoneEnter": null;
    "update:onDropZoneLeave": null;
    "update:onFilesUploaded": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:onProgress": null;
    "update:onUploadAborted": null;
    "update:onUploaded": null;
    "update:onUploadError": null;
    "update:onUploadStarted": null;
    "update:onValueChanged": null;
    "update:progress": null;
    "update:readOnly": null;
    "update:readyToUploadMessage": null;
    "update:rtlEnabled": null;
    "update:selectButtonText": null;
    "update:showFileList": null;
    "update:tabIndex": null;
    "update:uploadAbortedMessage": null;
    "update:uploadButtonText": null;
    "update:uploadChunk": null;
    "update:uploadCustomData": null;
    "update:uploadedMessage": null;
    "update:uploadFailedMessage": null;
    "update:uploadFile": null;
    "update:uploadHeaders": null;
    "update:uploadMethod": null;
    "update:uploadMode": null;
    "update:uploadUrl": null;
    "update:validationError": null;
    "update:validationErrors": null;
    "update:validationStatus": null;
    "update:value": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    abortUpload: PropType<(file: any, uploadInfo?: UploadInfo) => any>;
    accept: StringConstructor;
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowCanceling: BooleanConstructor;
    allowedFileExtensions: PropType<string[]>;
    chunkSize: NumberConstructor;
    dialogTrigger: {};
    disabled: BooleanConstructor;
    dropZone: {};
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    inputAttr: {};
    invalidFileExtensionMessage: StringConstructor;
    invalidMaxFileSizeMessage: StringConstructor;
    invalidMinFileSizeMessage: StringConstructor;
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    labelText: StringConstructor;
    maxFileSize: NumberConstructor;
    minFileSize: NumberConstructor;
    multiple: BooleanConstructor;
    name: StringConstructor;
    onBeforeSend: PropType<(e: BeforeSendEvent) => void>;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onDropZoneEnter: PropType<(e: DropZoneEnterEvent) => void>;
    onDropZoneLeave: PropType<(e: DropZoneLeaveEvent) => void>;
    onFilesUploaded: PropType<(e: FilesUploadedEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onProgress: PropType<(e: ProgressEvent) => void>;
    onUploadAborted: PropType<(e: UploadAbortedEvent) => void>;
    onUploaded: PropType<(e: UploadedEvent) => void>;
    onUploadError: PropType<(e: UploadErrorEvent) => void>;
    onUploadStarted: PropType<(e: UploadStartedEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    progress: NumberConstructor;
    readOnly: BooleanConstructor;
    readyToUploadMessage: StringConstructor;
    rtlEnabled: BooleanConstructor;
    selectButtonText: StringConstructor;
    showFileList: BooleanConstructor;
    tabIndex: NumberConstructor;
    uploadAbortedMessage: StringConstructor;
    uploadButtonText: StringConstructor;
    uploadChunk: PropType<(file: any, uploadInfo: UploadInfo) => any>;
    uploadCustomData: {};
    uploadedMessage: StringConstructor;
    uploadFailedMessage: StringConstructor;
    uploadFile: PropType<(file: any, progressCallback: (() => void)) => any>;
    uploadHeaders: {};
    uploadMethod: PropType<UploadHttpMethod>;
    uploadMode: PropType<FileUploadMode>;
    uploadUrl: StringConstructor;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationStatus: PropType<ValidationStatus>;
    value: PropType<any[]>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:multiple"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:inputAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isDirty"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isValid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onValueChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:readOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationError"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationErrors"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationStatus"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowedFileExtensions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:chunkSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxFileSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:abortUpload"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accept"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowCanceling"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dialogTrigger"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dropZone"?: ((...args: any[]) => any) | undefined;
    "onUpdate:invalidFileExtensionMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:invalidMaxFileSizeMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:invalidMinFileSizeMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:labelText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minFileSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onBeforeSend"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDropZoneEnter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDropZoneLeave"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFilesUploaded"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onProgress"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onUploadAborted"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onUploaded"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onUploadError"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onUploadStarted"?: ((...args: any[]) => any) | undefined;
    "onUpdate:progress"?: ((...args: any[]) => any) | undefined;
    "onUpdate:readyToUploadMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectButtonText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showFileList"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadAbortedMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadButtonText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadChunk"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadCustomData"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadedMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadFailedMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadFile"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadHeaders"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadMethod"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadUrl"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    multiple: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    isDirty: boolean;
    isValid: boolean;
    readOnly: boolean;
    allowCanceling: boolean;
    showFileList: boolean;
}>;
export default DxFileUploader;
export { DxFileUploader };
import type * as DxFileUploaderTypes from "devextreme/ui/file_uploader_types";
export { DxFileUploaderTypes };
