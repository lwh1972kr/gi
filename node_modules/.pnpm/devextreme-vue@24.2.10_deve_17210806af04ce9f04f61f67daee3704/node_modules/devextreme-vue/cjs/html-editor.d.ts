/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { PropType } from "vue";
import HtmlEditor, { Properties } from "devextreme/ui/html_editor";
import UploadInfo from "devextreme/file_management/upload_info";
import DataSource from "devextreme/data/data_source";
import { Converter, dxHtmlEditorImageUpload, dxHtmlEditorMediaResizing, dxHtmlEditorMention, ContentReadyEvent, DisposingEvent, FocusInEvent, FocusOutEvent, InitializedEvent, OptionChangedEvent, ValueChangedEvent, dxHtmlEditorTableContextMenu, dxHtmlEditorTableResizing, dxHtmlEditorToolbar, dxHtmlEditorVariables, HtmlEditorImageUploadMode, dxHtmlEditorImageUploadTabItem, HtmlEditorImageUploadTab, dxHtmlEditorTableContextMenuItem, HtmlEditorPredefinedContextMenuItem, HtmlEditorPredefinedToolbarItem, dxHtmlEditorToolbarItem } from "devextreme/ui/html_editor";
import { EditorStyle, ValidationMessageMode, Position, ValidationStatus, ToolbarItemLocation, ToolbarItemComponent } from "devextreme/common";
import { BeforeSendEvent, ContentReadyEvent as FileUploaderContentReadyEvent, DisposingEvent as FileUploaderDisposingEvent, DropZoneEnterEvent, DropZoneLeaveEvent, FilesUploadedEvent, InitializedEvent as FileUploaderInitializedEvent, OptionChangedEvent as FileUploaderOptionChangedEvent, ProgressEvent, UploadAbortedEvent, UploadedEvent, UploadErrorEvent, UploadStartedEvent, ValueChangedEvent as FileUploaderValueChangedEvent, UploadHttpMethod, FileUploadMode, dxFileUploaderOptions } from "devextreme/ui/file_uploader";
import { LocateInMenuMode, ShowTextMode } from "devextreme/ui/toolbar";
import { DataSourceOptions } from "devextreme/common/data";
import { Store } from "devextreme/data/store";
type AccessibleOptions = Pick<Properties, "accessKey" | "activeStateEnabled" | "allowSoftLineBreak" | "converter" | "customizeModules" | "disabled" | "elementAttr" | "focusStateEnabled" | "height" | "hint" | "hoverStateEnabled" | "imageUpload" | "isDirty" | "isValid" | "mediaResizing" | "mentions" | "name" | "onContentReady" | "onDisposing" | "onFocusIn" | "onFocusOut" | "onInitialized" | "onOptionChanged" | "onValueChanged" | "placeholder" | "readOnly" | "rtlEnabled" | "stylingMode" | "tabIndex" | "tableContextMenu" | "tableResizing" | "toolbar" | "validationError" | "validationErrors" | "validationMessageMode" | "validationMessagePosition" | "validationStatus" | "value" | "variables" | "visible" | "width">;
interface DxHtmlEditor extends AccessibleOptions {
    readonly instance?: HtmlEditor;
}
declare const DxHtmlEditor: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowSoftLineBreak: BooleanConstructor;
    converter: PropType<Record<string, any> | Converter>;
    customizeModules: PropType<(config: any) => void>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    imageUpload: PropType<Record<string, any> | dxHtmlEditorImageUpload>;
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    mediaResizing: PropType<Record<string, any> | dxHtmlEditorMediaResizing>;
    mentions: PropType<dxHtmlEditorMention[]>;
    name: StringConstructor;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onFocusIn: PropType<(e: FocusInEvent) => void>;
    onFocusOut: PropType<(e: FocusOutEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    placeholder: StringConstructor;
    readOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<EditorStyle>;
    tabIndex: NumberConstructor;
    tableContextMenu: PropType<Record<string, any> | dxHtmlEditorTableContextMenu>;
    tableResizing: PropType<Record<string, any> | dxHtmlEditorTableResizing>;
    toolbar: PropType<Record<string, any> | dxHtmlEditorToolbar>;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationMessageMode: PropType<ValidationMessageMode>;
    validationMessagePosition: PropType<Position>;
    validationStatus: PropType<ValidationStatus>;
    value: {};
    variables: PropType<Record<string, any> | dxHtmlEditorVariables>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {
    instance(): HtmlEditor;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:allowSoftLineBreak": null;
    "update:converter": null;
    "update:customizeModules": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:imageUpload": null;
    "update:isDirty": null;
    "update:isValid": null;
    "update:mediaResizing": null;
    "update:mentions": null;
    "update:name": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onFocusIn": null;
    "update:onFocusOut": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:onValueChanged": null;
    "update:placeholder": null;
    "update:readOnly": null;
    "update:rtlEnabled": null;
    "update:stylingMode": null;
    "update:tabIndex": null;
    "update:tableContextMenu": null;
    "update:tableResizing": null;
    "update:toolbar": null;
    "update:validationError": null;
    "update:validationErrors": null;
    "update:validationMessageMode": null;
    "update:validationMessagePosition": null;
    "update:validationStatus": null;
    "update:value": null;
    "update:variables": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowSoftLineBreak: BooleanConstructor;
    converter: PropType<Record<string, any> | Converter>;
    customizeModules: PropType<(config: any) => void>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    imageUpload: PropType<Record<string, any> | dxHtmlEditorImageUpload>;
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    mediaResizing: PropType<Record<string, any> | dxHtmlEditorMediaResizing>;
    mentions: PropType<dxHtmlEditorMention[]>;
    name: StringConstructor;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onFocusIn: PropType<(e: FocusInEvent) => void>;
    onFocusOut: PropType<(e: FocusOutEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    placeholder: StringConstructor;
    readOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<EditorStyle>;
    tabIndex: NumberConstructor;
    tableContextMenu: PropType<Record<string, any> | dxHtmlEditorTableContextMenu>;
    tableResizing: PropType<Record<string, any> | dxHtmlEditorTableResizing>;
    toolbar: PropType<Record<string, any> | dxHtmlEditorToolbar>;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationMessageMode: PropType<ValidationMessageMode>;
    validationMessagePosition: PropType<Position>;
    validationStatus: PropType<ValidationStatus>;
    value: {};
    variables: PropType<Record<string, any> | dxHtmlEditorVariables>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isDirty"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isValid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusIn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusOut"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onValueChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:readOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationError"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationErrors"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationMessageMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationMessagePosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationStatus"?: ((...args: any[]) => any) | undefined;
    "onUpdate:toolbar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowSoftLineBreak"?: ((...args: any[]) => any) | undefined;
    "onUpdate:converter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeModules"?: ((...args: any[]) => any) | undefined;
    "onUpdate:imageUpload"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mediaResizing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mentions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tableContextMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tableResizing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:variables"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    isDirty: boolean;
    isValid: boolean;
    readOnly: boolean;
    allowSoftLineBreak: boolean;
}>;
declare const DxConverter: import("@vue/runtime-core").DefineComponent<{
    fromHtml: PropType<(value: string) => string>;
    toHtml: PropType<(value: string) => string>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:fromHtml": null;
    "update:toHtml": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    fromHtml: PropType<(value: string) => string>;
    toHtml: PropType<(value: string) => string>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fromHtml"?: ((...args: any[]) => any) | undefined;
    "onUpdate:toHtml"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxFileUploaderOptions: import("@vue/runtime-core").DefineComponent<{
    abortUpload: PropType<(file: any, uploadInfo?: UploadInfo) => any>;
    accept: StringConstructor;
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowCanceling: BooleanConstructor;
    allowedFileExtensions: PropType<string[]>;
    bindingOptions: PropType<Record<string, any>>;
    chunkSize: NumberConstructor;
    dialogTrigger: {};
    disabled: BooleanConstructor;
    dropZone: {};
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    inputAttr: {};
    invalidFileExtensionMessage: StringConstructor;
    invalidMaxFileSizeMessage: StringConstructor;
    invalidMinFileSizeMessage: StringConstructor;
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    labelText: StringConstructor;
    maxFileSize: NumberConstructor;
    minFileSize: NumberConstructor;
    multiple: BooleanConstructor;
    name: StringConstructor;
    onBeforeSend: PropType<(e: BeforeSendEvent) => void>;
    onContentReady: PropType<(e: FileUploaderContentReadyEvent) => void>;
    onDisposing: PropType<(e: FileUploaderDisposingEvent) => void>;
    onDropZoneEnter: PropType<(e: DropZoneEnterEvent) => void>;
    onDropZoneLeave: PropType<(e: DropZoneLeaveEvent) => void>;
    onFilesUploaded: PropType<(e: FilesUploadedEvent) => void>;
    onInitialized: PropType<(e: FileUploaderInitializedEvent) => void>;
    onOptionChanged: PropType<(e: FileUploaderOptionChangedEvent) => void>;
    onProgress: PropType<(e: ProgressEvent) => void>;
    onUploadAborted: PropType<(e: UploadAbortedEvent) => void>;
    onUploaded: PropType<(e: UploadedEvent) => void>;
    onUploadError: PropType<(e: UploadErrorEvent) => void>;
    onUploadStarted: PropType<(e: UploadStartedEvent) => void>;
    onValueChanged: PropType<(e: FileUploaderValueChangedEvent) => void>;
    progress: NumberConstructor;
    readOnly: BooleanConstructor;
    readyToUploadMessage: StringConstructor;
    rtlEnabled: BooleanConstructor;
    selectButtonText: StringConstructor;
    showFileList: BooleanConstructor;
    tabIndex: NumberConstructor;
    uploadAbortedMessage: StringConstructor;
    uploadButtonText: StringConstructor;
    uploadChunk: PropType<(file: any, uploadInfo: UploadInfo) => any>;
    uploadCustomData: {};
    uploadedMessage: StringConstructor;
    uploadFailedMessage: StringConstructor;
    uploadFile: PropType<(file: any, progressCallback: (() => void)) => any>;
    uploadHeaders: {};
    uploadMethod: PropType<UploadHttpMethod>;
    uploadMode: PropType<FileUploadMode>;
    uploadUrl: StringConstructor;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationStatus: PropType<ValidationStatus>;
    value: PropType<any[]>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:abortUpload": null;
    "update:accept": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:allowCanceling": null;
    "update:allowedFileExtensions": null;
    "update:bindingOptions": null;
    "update:chunkSize": null;
    "update:dialogTrigger": null;
    "update:disabled": null;
    "update:dropZone": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:inputAttr": null;
    "update:invalidFileExtensionMessage": null;
    "update:invalidMaxFileSizeMessage": null;
    "update:invalidMinFileSizeMessage": null;
    "update:isDirty": null;
    "update:isValid": null;
    "update:labelText": null;
    "update:maxFileSize": null;
    "update:minFileSize": null;
    "update:multiple": null;
    "update:name": null;
    "update:onBeforeSend": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onDropZoneEnter": null;
    "update:onDropZoneLeave": null;
    "update:onFilesUploaded": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:onProgress": null;
    "update:onUploadAborted": null;
    "update:onUploaded": null;
    "update:onUploadError": null;
    "update:onUploadStarted": null;
    "update:onValueChanged": null;
    "update:progress": null;
    "update:readOnly": null;
    "update:readyToUploadMessage": null;
    "update:rtlEnabled": null;
    "update:selectButtonText": null;
    "update:showFileList": null;
    "update:tabIndex": null;
    "update:uploadAbortedMessage": null;
    "update:uploadButtonText": null;
    "update:uploadChunk": null;
    "update:uploadCustomData": null;
    "update:uploadedMessage": null;
    "update:uploadFailedMessage": null;
    "update:uploadFile": null;
    "update:uploadHeaders": null;
    "update:uploadMethod": null;
    "update:uploadMode": null;
    "update:uploadUrl": null;
    "update:validationError": null;
    "update:validationErrors": null;
    "update:validationStatus": null;
    "update:value": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    abortUpload: PropType<(file: any, uploadInfo?: UploadInfo) => any>;
    accept: StringConstructor;
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowCanceling: BooleanConstructor;
    allowedFileExtensions: PropType<string[]>;
    bindingOptions: PropType<Record<string, any>>;
    chunkSize: NumberConstructor;
    dialogTrigger: {};
    disabled: BooleanConstructor;
    dropZone: {};
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    inputAttr: {};
    invalidFileExtensionMessage: StringConstructor;
    invalidMaxFileSizeMessage: StringConstructor;
    invalidMinFileSizeMessage: StringConstructor;
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    labelText: StringConstructor;
    maxFileSize: NumberConstructor;
    minFileSize: NumberConstructor;
    multiple: BooleanConstructor;
    name: StringConstructor;
    onBeforeSend: PropType<(e: BeforeSendEvent) => void>;
    onContentReady: PropType<(e: FileUploaderContentReadyEvent) => void>;
    onDisposing: PropType<(e: FileUploaderDisposingEvent) => void>;
    onDropZoneEnter: PropType<(e: DropZoneEnterEvent) => void>;
    onDropZoneLeave: PropType<(e: DropZoneLeaveEvent) => void>;
    onFilesUploaded: PropType<(e: FilesUploadedEvent) => void>;
    onInitialized: PropType<(e: FileUploaderInitializedEvent) => void>;
    onOptionChanged: PropType<(e: FileUploaderOptionChangedEvent) => void>;
    onProgress: PropType<(e: ProgressEvent) => void>;
    onUploadAborted: PropType<(e: UploadAbortedEvent) => void>;
    onUploaded: PropType<(e: UploadedEvent) => void>;
    onUploadError: PropType<(e: UploadErrorEvent) => void>;
    onUploadStarted: PropType<(e: UploadStartedEvent) => void>;
    onValueChanged: PropType<(e: FileUploaderValueChangedEvent) => void>;
    progress: NumberConstructor;
    readOnly: BooleanConstructor;
    readyToUploadMessage: StringConstructor;
    rtlEnabled: BooleanConstructor;
    selectButtonText: StringConstructor;
    showFileList: BooleanConstructor;
    tabIndex: NumberConstructor;
    uploadAbortedMessage: StringConstructor;
    uploadButtonText: StringConstructor;
    uploadChunk: PropType<(file: any, uploadInfo: UploadInfo) => any>;
    uploadCustomData: {};
    uploadedMessage: StringConstructor;
    uploadFailedMessage: StringConstructor;
    uploadFile: PropType<(file: any, progressCallback: (() => void)) => any>;
    uploadHeaders: {};
    uploadMethod: PropType<UploadHttpMethod>;
    uploadMode: PropType<FileUploadMode>;
    uploadUrl: StringConstructor;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationStatus: PropType<ValidationStatus>;
    value: PropType<any[]>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:multiple"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:inputAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isDirty"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isValid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onValueChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:readOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationError"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationErrors"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationStatus"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowedFileExtensions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:chunkSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxFileSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:abortUpload"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accept"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowCanceling"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dialogTrigger"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dropZone"?: ((...args: any[]) => any) | undefined;
    "onUpdate:invalidFileExtensionMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:invalidMaxFileSizeMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:invalidMinFileSizeMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:labelText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minFileSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onBeforeSend"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDropZoneEnter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDropZoneLeave"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFilesUploaded"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onProgress"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onUploadAborted"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onUploaded"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onUploadError"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onUploadStarted"?: ((...args: any[]) => any) | undefined;
    "onUpdate:progress"?: ((...args: any[]) => any) | undefined;
    "onUpdate:readyToUploadMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectButtonText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showFileList"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadAbortedMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadButtonText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadChunk"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadCustomData"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadedMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadFailedMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadFile"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadHeaders"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadMethod"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadUrl"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    multiple: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    isDirty: boolean;
    isValid: boolean;
    readOnly: boolean;
    allowCanceling: boolean;
    showFileList: boolean;
}>;
declare const DxImageUpload: import("@vue/runtime-core").DefineComponent<{
    fileUploaderOptions: PropType<Record<string, any> | dxFileUploaderOptions>;
    fileUploadMode: PropType<HtmlEditorImageUploadMode>;
    tabs: PropType<(dxHtmlEditorImageUploadTabItem | HtmlEditorImageUploadTab)[]>;
    uploadDirectory: StringConstructor;
    uploadUrl: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:fileUploaderOptions": null;
    "update:fileUploadMode": null;
    "update:tabs": null;
    "update:uploadDirectory": null;
    "update:uploadUrl": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    fileUploaderOptions: PropType<Record<string, any> | dxFileUploaderOptions>;
    fileUploadMode: PropType<HtmlEditorImageUploadMode>;
    tabs: PropType<(dxHtmlEditorImageUploadTabItem | HtmlEditorImageUploadTab)[]>;
    uploadDirectory: StringConstructor;
    uploadUrl: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabs"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadUrl"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fileUploaderOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fileUploadMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:uploadDirectory"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxItem: import("@vue/runtime-core").DefineComponent<{
    acceptedValues: PropType<(string | number | boolean)[]>;
    beginGroup: BooleanConstructor;
    closeMenuOnClick: BooleanConstructor;
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    formatName: PropType<string>;
    formatValues: PropType<(string | number | boolean)[]>;
    html: StringConstructor;
    icon: StringConstructor;
    items: PropType<(dxHtmlEditorTableContextMenuItem | HtmlEditorPredefinedContextMenuItem)[]>;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    selectable: BooleanConstructor;
    selected: BooleanConstructor;
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:acceptedValues": null;
    "update:beginGroup": null;
    "update:closeMenuOnClick": null;
    "update:cssClass": null;
    "update:disabled": null;
    "update:formatName": null;
    "update:formatValues": null;
    "update:html": null;
    "update:icon": null;
    "update:items": null;
    "update:locateInMenu": null;
    "update:location": null;
    "update:menuItemTemplate": null;
    "update:name": null;
    "update:options": null;
    "update:selectable": null;
    "update:selected": null;
    "update:showText": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
    "update:widget": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    acceptedValues: PropType<(string | number | boolean)[]>;
    beginGroup: BooleanConstructor;
    closeMenuOnClick: BooleanConstructor;
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    formatName: PropType<string>;
    formatValues: PropType<(string | number | boolean)[]>;
    html: StringConstructor;
    icon: StringConstructor;
    items: PropType<(dxHtmlEditorTableContextMenuItem | HtmlEditorPredefinedContextMenuItem)[]>;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    selectable: BooleanConstructor;
    selected: BooleanConstructor;
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:locateInMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuItemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:widget"?: ((...args: any[]) => any) | undefined;
    "onUpdate:beginGroup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:closeMenuOnClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectable"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selected"?: ((...args: any[]) => any) | undefined;
    "onUpdate:acceptedValues"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formatName"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formatValues"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
    beginGroup: boolean;
    closeMenuOnClick: boolean;
    selectable: boolean;
    selected: boolean;
}>;
declare const DxMediaResizing: import("@vue/runtime-core").DefineComponent<{
    allowedTargets: PropType<string[]>;
    enabled: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowedTargets": null;
    "update:enabled": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowedTargets: PropType<string[]>;
    enabled: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowedTargets"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxMention: import("@vue/runtime-core").DefineComponent<{
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    displayExpr: PropType<string | ((item: any) => string)>;
    itemTemplate: {};
    marker: StringConstructor;
    minSearchLength: NumberConstructor;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    searchTimeout: NumberConstructor;
    template: {};
    valueExpr: PropType<string | (() => void)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:dataSource": null;
    "update:displayExpr": null;
    "update:itemTemplate": null;
    "update:marker": null;
    "update:minSearchLength": null;
    "update:searchExpr": null;
    "update:searchTimeout": null;
    "update:template": null;
    "update:valueExpr": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    displayExpr: PropType<string | ((item: any) => string)>;
    itemTemplate: {};
    marker: StringConstructor;
    minSearchLength: NumberConstructor;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    searchTimeout: NumberConstructor;
    template: {};
    valueExpr: PropType<string | (() => void)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minSearchLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:marker"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxTab: import("@vue/runtime-core").DefineComponent<{
    name: PropType<HtmlEditorImageUploadTab>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:name": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    name: PropType<HtmlEditorImageUploadTab>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxTableContextMenu: import("@vue/runtime-core").DefineComponent<{
    enabled: BooleanConstructor;
    items: PropType<(dxHtmlEditorTableContextMenuItem | HtmlEditorPredefinedContextMenuItem)[]>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:enabled": null;
    "update:items": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    enabled: BooleanConstructor;
    items: PropType<(dxHtmlEditorTableContextMenuItem | HtmlEditorPredefinedContextMenuItem)[]>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxTableContextMenuItem: import("@vue/runtime-core").DefineComponent<{
    beginGroup: BooleanConstructor;
    closeMenuOnClick: BooleanConstructor;
    disabled: BooleanConstructor;
    icon: StringConstructor;
    items: PropType<(dxHtmlEditorTableContextMenuItem | HtmlEditorPredefinedContextMenuItem)[]>;
    name: PropType<HtmlEditorPredefinedContextMenuItem>;
    selectable: BooleanConstructor;
    selected: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:beginGroup": null;
    "update:closeMenuOnClick": null;
    "update:disabled": null;
    "update:icon": null;
    "update:items": null;
    "update:name": null;
    "update:selectable": null;
    "update:selected": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    beginGroup: BooleanConstructor;
    closeMenuOnClick: BooleanConstructor;
    disabled: BooleanConstructor;
    icon: StringConstructor;
    items: PropType<(dxHtmlEditorTableContextMenuItem | HtmlEditorPredefinedContextMenuItem)[]>;
    name: PropType<HtmlEditorPredefinedContextMenuItem>;
    selectable: BooleanConstructor;
    selected: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:beginGroup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:closeMenuOnClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectable"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selected"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
    beginGroup: boolean;
    closeMenuOnClick: boolean;
    selectable: boolean;
    selected: boolean;
}>;
declare const DxTableResizing: import("@vue/runtime-core").DefineComponent<{
    enabled: BooleanConstructor;
    minColumnWidth: NumberConstructor;
    minRowHeight: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:enabled": null;
    "update:minColumnWidth": null;
    "update:minRowHeight": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    enabled: BooleanConstructor;
    minColumnWidth: NumberConstructor;
    minRowHeight: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minColumnWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minRowHeight"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxToolbar: import("@vue/runtime-core").DefineComponent<{
    container: {};
    items: PropType<(HtmlEditorPredefinedToolbarItem | dxHtmlEditorToolbarItem)[]>;
    multiline: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:container": null;
    "update:items": null;
    "update:multiline": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    container: {};
    items: PropType<(HtmlEditorPredefinedToolbarItem | dxHtmlEditorToolbarItem)[]>;
    multiline: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:container"?: ((...args: any[]) => any) | undefined;
    "onUpdate:multiline"?: ((...args: any[]) => any) | undefined;
}, {
    multiline: boolean;
}>;
declare const DxToolbarItem: import("@vue/runtime-core").DefineComponent<{
    acceptedValues: PropType<(string | number | boolean)[]>;
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    formatName: PropType<string>;
    formatValues: PropType<(string | number | boolean)[]>;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:acceptedValues": null;
    "update:cssClass": null;
    "update:disabled": null;
    "update:formatName": null;
    "update:formatValues": null;
    "update:html": null;
    "update:locateInMenu": null;
    "update:location": null;
    "update:menuItemTemplate": null;
    "update:name": null;
    "update:options": null;
    "update:showText": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
    "update:widget": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    acceptedValues: PropType<(string | number | boolean)[]>;
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    formatName: PropType<string>;
    formatValues: PropType<(string | number | boolean)[]>;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    name: PropType<string>;
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:locateInMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuItemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:widget"?: ((...args: any[]) => any) | undefined;
    "onUpdate:acceptedValues"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formatName"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formatValues"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxVariables: import("@vue/runtime-core").DefineComponent<{
    dataSource: PropType<string | string[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    escapeChar: PropType<string | string[]>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:dataSource": null;
    "update:escapeChar": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    dataSource: PropType<string | string[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    escapeChar: PropType<string | string[]>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:escapeChar"?: ((...args: any[]) => any) | undefined;
}, {}>;
export default DxHtmlEditor;
export { DxHtmlEditor, DxConverter, DxFileUploaderOptions, DxImageUpload, DxItem, DxMediaResizing, DxMention, DxTab, DxTableContextMenu, DxTableContextMenuItem, DxTableResizing, DxToolbar, DxToolbarItem, DxVariables };
import type * as DxHtmlEditorTypes from "devextreme/ui/html_editor_types";
export { DxHtmlEditorTypes };
