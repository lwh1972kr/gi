/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { PropType } from "vue";
import Resizable, { Properties } from "devextreme/ui/resizable";
import { DisposingEvent, InitializedEvent, OptionChangedEvent, ResizeEvent, ResizeEndEvent, ResizeStartEvent } from "devextreme/ui/resizable";
type AccessibleOptions = Pick<Properties, "area" | "elementAttr" | "handles" | "height" | "keepAspectRatio" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "onDisposing" | "onInitialized" | "onOptionChanged" | "onResize" | "onResizeEnd" | "onResizeStart" | "rtlEnabled" | "width">;
interface DxResizable extends AccessibleOptions {
    readonly instance?: Resizable;
}
declare const DxResizable: import("@vue/runtime-core").DefineComponent<{
    area: {};
    elementAttr: PropType<Record<string, any>>;
    handles: PropType<string>;
    height: PropType<string | number | (() => number | string)>;
    keepAspectRatio: BooleanConstructor;
    maxHeight: NumberConstructor;
    maxWidth: NumberConstructor;
    minHeight: NumberConstructor;
    minWidth: NumberConstructor;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onResize: PropType<(e: ResizeEvent) => void>;
    onResizeEnd: PropType<(e: ResizeEndEvent) => void>;
    onResizeStart: PropType<(e: ResizeStartEvent) => void>;
    rtlEnabled: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {
    instance(): Resizable;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:area": null;
    "update:elementAttr": null;
    "update:handles": null;
    "update:height": null;
    "update:keepAspectRatio": null;
    "update:maxHeight": null;
    "update:maxWidth": null;
    "update:minHeight": null;
    "update:minWidth": null;
    "update:onDisposing": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:onResize": null;
    "update:onResizeEnd": null;
    "update:onResizeStart": null;
    "update:rtlEnabled": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    area: {};
    elementAttr: PropType<Record<string, any>>;
    handles: PropType<string>;
    height: PropType<string | number | (() => number | string)>;
    keepAspectRatio: BooleanConstructor;
    maxHeight: NumberConstructor;
    maxWidth: NumberConstructor;
    minHeight: NumberConstructor;
    minWidth: NumberConstructor;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onResize: PropType<(e: ResizeEvent) => void>;
    onResizeEnd: PropType<(e: ResizeEndEvent) => void>;
    onResizeStart: PropType<(e: ResizeStartEvent) => void>;
    rtlEnabled: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxHeight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minHeight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResizeEnd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResizeStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:area"?: ((...args: any[]) => any) | undefined;
    "onUpdate:handles"?: ((...args: any[]) => any) | undefined;
    "onUpdate:keepAspectRatio"?: ((...args: any[]) => any) | undefined;
}, {
    rtlEnabled: boolean;
    keepAspectRatio: boolean;
}>;
export default DxResizable;
export { DxResizable };
import type * as DxResizableTypes from "devextreme/ui/resizable_types";
export { DxResizableTypes };
