/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { defineComponent } from "vue";
import { prepareComponentConfig } from "./core/index";
import Chat from "devextreme/ui/chat";
import { prepareConfigurationComponentConfig } from "./core/index";
const componentConfig = {
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        alerts: Array,
        dataSource: [Array, Object, String],
        dayHeaderFormat: [Object, String, Function],
        disabled: Boolean,
        elementAttr: Object,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        items: Array,
        messageTemplate: {},
        messageTimestampFormat: [Object, String, Function],
        onDisposing: Function,
        onInitialized: Function,
        onMessageEntered: Function,
        onOptionChanged: Function,
        onTypingEnd: Function,
        onTypingStart: Function,
        reloadOnChange: Boolean,
        rtlEnabled: Boolean,
        showAvatar: Boolean,
        showDayHeaders: Boolean,
        showMessageTimestamp: Boolean,
        showUserName: Boolean,
        typingUsers: Array,
        user: Object,
        visible: Boolean,
        width: [Function, Number, String]
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:alerts": null,
        "update:dataSource": null,
        "update:dayHeaderFormat": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:items": null,
        "update:messageTemplate": null,
        "update:messageTimestampFormat": null,
        "update:onDisposing": null,
        "update:onInitialized": null,
        "update:onMessageEntered": null,
        "update:onOptionChanged": null,
        "update:onTypingEnd": null,
        "update:onTypingStart": null,
        "update:reloadOnChange": null,
        "update:rtlEnabled": null,
        "update:showAvatar": null,
        "update:showDayHeaders": null,
        "update:showMessageTimestamp": null,
        "update:showUserName": null,
        "update:typingUsers": null,
        "update:user": null,
        "update:visible": null,
        "update:width": null,
    },
    computed: {
        instance() {
            return this.$_instance;
        }
    },
    beforeCreate() {
        this.$_WidgetClass = Chat;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            alert: { isCollectionItem: true, optionName: "alerts" },
            dayHeaderFormat: { isCollectionItem: false, optionName: "dayHeaderFormat" },
            item: { isCollectionItem: true, optionName: "items" },
            messageTimestampFormat: { isCollectionItem: false, optionName: "messageTimestampFormat" },
            typingUser: { isCollectionItem: true, optionName: "typingUsers" },
            user: { isCollectionItem: false, optionName: "user" }
        };
    }
};
prepareComponentConfig(componentConfig);
const DxChat = defineComponent(componentConfig);
const DxAlertConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:id": null,
        "update:message": null,
    },
    props: {
        id: [Number, String],
        message: String
    }
};
prepareConfigurationComponentConfig(DxAlertConfig);
const DxAlert = defineComponent(DxAlertConfig);
DxAlert.$_optionName = "alerts";
DxAlert.$_isCollectionItem = true;
const DxAuthorConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:avatarAlt": null,
        "update:avatarUrl": null,
        "update:id": null,
        "update:name": null,
    },
    props: {
        avatarAlt: String,
        avatarUrl: String,
        id: [Number, String],
        name: String
    }
};
prepareConfigurationComponentConfig(DxAuthorConfig);
const DxAuthor = defineComponent(DxAuthorConfig);
DxAuthor.$_optionName = "author";
const DxDayHeaderFormatConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
};
prepareConfigurationComponentConfig(DxDayHeaderFormatConfig);
const DxDayHeaderFormat = defineComponent(DxDayHeaderFormatConfig);
DxDayHeaderFormat.$_optionName = "dayHeaderFormat";
const DxItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:author": null,
        "update:id": null,
        "update:text": null,
        "update:timestamp": null,
    },
    props: {
        author: Object,
        id: [Number, String],
        text: String,
        timestamp: [Date, Number, String]
    }
};
prepareConfigurationComponentConfig(DxItemConfig);
const DxItem = defineComponent(DxItemConfig);
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
DxItem.$_expectedChildren = {
    author: { isCollectionItem: false, optionName: "author" }
};
const DxMessageTimestampFormatConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
};
prepareConfigurationComponentConfig(DxMessageTimestampFormatConfig);
const DxMessageTimestampFormat = defineComponent(DxMessageTimestampFormatConfig);
DxMessageTimestampFormat.$_optionName = "messageTimestampFormat";
const DxTypingUserConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:avatarAlt": null,
        "update:avatarUrl": null,
        "update:id": null,
        "update:name": null,
    },
    props: {
        avatarAlt: String,
        avatarUrl: String,
        id: [Number, String],
        name: String
    }
};
prepareConfigurationComponentConfig(DxTypingUserConfig);
const DxTypingUser = defineComponent(DxTypingUserConfig);
DxTypingUser.$_optionName = "typingUsers";
DxTypingUser.$_isCollectionItem = true;
const DxUserConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:avatarAlt": null,
        "update:avatarUrl": null,
        "update:id": null,
        "update:name": null,
    },
    props: {
        avatarAlt: String,
        avatarUrl: String,
        id: [Number, String],
        name: String
    }
};
prepareConfigurationComponentConfig(DxUserConfig);
const DxUser = defineComponent(DxUserConfig);
DxUser.$_optionName = "user";
export default DxChat;
export { DxChat, DxAlert, DxAuthor, DxDayHeaderFormat, DxItem, DxMessageTimestampFormat, DxTypingUser, DxUser };
