/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { defineComponent } from "vue";
import { prepareComponentConfig } from "./core/index";
import Lookup from "devextreme/ui/lookup";
import { prepareConfigurationComponentConfig } from "./core/index";
const componentConfig = {
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        applyButtonText: String,
        applyValueMode: String,
        cancelButtonText: String,
        cleanSearchOnOpening: Boolean,
        clearButtonText: String,
        dataSource: [Array, Object, String],
        deferRendering: Boolean,
        disabled: Boolean,
        displayExpr: [Function, String],
        displayValue: String,
        dropDownCentered: Boolean,
        dropDownOptions: Object,
        elementAttr: Object,
        fieldTemplate: {},
        focusStateEnabled: Boolean,
        fullScreen: Boolean,
        grouped: Boolean,
        groupTemplate: {},
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        inputAttr: {},
        isDirty: Boolean,
        isValid: Boolean,
        items: Array,
        itemTemplate: {},
        label: String,
        labelMode: String,
        minSearchLength: Number,
        name: String,
        nextButtonText: String,
        noDataText: String,
        onClosed: Function,
        onContentReady: Function,
        onDisposing: Function,
        onInitialized: Function,
        onItemClick: Function,
        onOpened: Function,
        onOptionChanged: Function,
        onPageLoading: Function,
        onPullRefresh: Function,
        onScroll: Function,
        onSelectionChanged: Function,
        onValueChanged: Function,
        opened: Boolean,
        pageLoadingText: String,
        pageLoadMode: String,
        placeholder: String,
        pulledDownText: String,
        pullingDownText: String,
        pullRefreshEnabled: Boolean,
        refreshingText: String,
        rtlEnabled: Boolean,
        searchEnabled: Boolean,
        searchExpr: [Array, Function, String],
        searchMode: String,
        searchPlaceholder: String,
        searchStartEvent: String,
        searchTimeout: Number,
        selectedItem: {},
        showCancelButton: Boolean,
        showClearButton: Boolean,
        showDataBeforeSearch: Boolean,
        stylingMode: String,
        tabIndex: Number,
        text: String,
        useItemTextAsTitle: Boolean,
        useNativeScrolling: Boolean,
        usePopover: Boolean,
        validationError: {},
        validationErrors: Array,
        validationMessageMode: String,
        validationMessagePosition: String,
        validationStatus: String,
        value: {},
        valueChangeEvent: String,
        valueExpr: [Function, String],
        visible: Boolean,
        width: [Function, Number, String],
        wrapItemText: Boolean
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:applyButtonText": null,
        "update:applyValueMode": null,
        "update:cancelButtonText": null,
        "update:cleanSearchOnOpening": null,
        "update:clearButtonText": null,
        "update:dataSource": null,
        "update:deferRendering": null,
        "update:disabled": null,
        "update:displayExpr": null,
        "update:displayValue": null,
        "update:dropDownCentered": null,
        "update:dropDownOptions": null,
        "update:elementAttr": null,
        "update:fieldTemplate": null,
        "update:focusStateEnabled": null,
        "update:fullScreen": null,
        "update:grouped": null,
        "update:groupTemplate": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:inputAttr": null,
        "update:isDirty": null,
        "update:isValid": null,
        "update:items": null,
        "update:itemTemplate": null,
        "update:label": null,
        "update:labelMode": null,
        "update:minSearchLength": null,
        "update:name": null,
        "update:nextButtonText": null,
        "update:noDataText": null,
        "update:onClosed": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onInitialized": null,
        "update:onItemClick": null,
        "update:onOpened": null,
        "update:onOptionChanged": null,
        "update:onPageLoading": null,
        "update:onPullRefresh": null,
        "update:onScroll": null,
        "update:onSelectionChanged": null,
        "update:onValueChanged": null,
        "update:opened": null,
        "update:pageLoadingText": null,
        "update:pageLoadMode": null,
        "update:placeholder": null,
        "update:pulledDownText": null,
        "update:pullingDownText": null,
        "update:pullRefreshEnabled": null,
        "update:refreshingText": null,
        "update:rtlEnabled": null,
        "update:searchEnabled": null,
        "update:searchExpr": null,
        "update:searchMode": null,
        "update:searchPlaceholder": null,
        "update:searchStartEvent": null,
        "update:searchTimeout": null,
        "update:selectedItem": null,
        "update:showCancelButton": null,
        "update:showClearButton": null,
        "update:showDataBeforeSearch": null,
        "update:stylingMode": null,
        "update:tabIndex": null,
        "update:text": null,
        "update:useItemTextAsTitle": null,
        "update:useNativeScrolling": null,
        "update:usePopover": null,
        "update:validationError": null,
        "update:validationErrors": null,
        "update:validationMessageMode": null,
        "update:validationMessagePosition": null,
        "update:validationStatus": null,
        "update:value": null,
        "update:valueChangeEvent": null,
        "update:valueExpr": null,
        "update:visible": null,
        "update:width": null,
        "update:wrapItemText": null,
    },
    model: { prop: "value", event: "update:value" },
    computed: {
        instance() {
            return this.$_instance;
        }
    },
    beforeCreate() {
        this.$_WidgetClass = Lookup;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            dropDownOptions: { isCollectionItem: false, optionName: "dropDownOptions" },
            item: { isCollectionItem: true, optionName: "items" }
        };
    }
};
prepareComponentConfig(componentConfig);
const DxLookup = defineComponent(componentConfig);
const DxAnimationConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:hide": null,
        "update:show": null,
    },
    props: {
        hide: [Object, Number, String],
        show: [Object, Number, String]
    }
};
prepareConfigurationComponentConfig(DxAnimationConfig);
const DxAnimation = defineComponent(DxAnimationConfig);
DxAnimation.$_optionName = "animation";
DxAnimation.$_expectedChildren = {
    hide: { isCollectionItem: false, optionName: "hide" },
    show: { isCollectionItem: false, optionName: "show" }
};
const DxAtConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
};
prepareConfigurationComponentConfig(DxAtConfig);
const DxAt = defineComponent(DxAtConfig);
DxAt.$_optionName = "at";
const DxBoundaryOffsetConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
};
prepareConfigurationComponentConfig(DxBoundaryOffsetConfig);
const DxBoundaryOffset = defineComponent(DxBoundaryOffsetConfig);
DxBoundaryOffset.$_optionName = "boundaryOffset";
const DxCollisionConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
};
prepareConfigurationComponentConfig(DxCollisionConfig);
const DxCollision = defineComponent(DxCollisionConfig);
DxCollision.$_optionName = "collision";
const DxDropDownOptionsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:animation": null,
        "update:bindingOptions": null,
        "update:closeOnOutsideClick": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:deferRendering": null,
        "update:disabled": null,
        "update:enableBodyScroll": null,
        "update:height": null,
        "update:hideEvent": null,
        "update:hideOnOutsideClick": null,
        "update:hideOnParentScroll": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:maxHeight": null,
        "update:maxWidth": null,
        "update:minHeight": null,
        "update:minWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onHidden": null,
        "update:onHiding": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onShowing": null,
        "update:onShown": null,
        "update:onTitleRendered": null,
        "update:position": null,
        "update:rtlEnabled": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showCloseButton": null,
        "update:showEvent": null,
        "update:showTitle": null,
        "update:target": null,
        "update:title": null,
        "update:titleTemplate": null,
        "update:toolbarItems": null,
        "update:visible": null,
        "update:width": null,
        "update:wrapperAttr": null,
    },
    props: {
        animation: Object,
        bindingOptions: Object,
        closeOnOutsideClick: [Boolean, Function],
        container: {},
        contentTemplate: {},
        deferRendering: Boolean,
        disabled: Boolean,
        enableBodyScroll: Boolean,
        height: [Function, Number, String],
        hideEvent: [Object, String],
        hideOnOutsideClick: [Boolean, Function],
        hideOnParentScroll: Boolean,
        hint: String,
        hoverStateEnabled: Boolean,
        maxHeight: [Function, Number, String],
        maxWidth: [Function, Number, String],
        minHeight: [Function, Number, String],
        minWidth: [Function, Number, String],
        onContentReady: Function,
        onDisposing: Function,
        onHidden: Function,
        onHiding: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onShowing: Function,
        onShown: Function,
        onTitleRendered: Function,
        position: [String, Object],
        rtlEnabled: Boolean,
        shading: Boolean,
        shadingColor: String,
        showCloseButton: Boolean,
        showEvent: [Object, String],
        showTitle: Boolean,
        target: {},
        title: String,
        titleTemplate: {},
        toolbarItems: Array,
        visible: Boolean,
        width: [Function, Number, String],
        wrapperAttr: {}
    }
};
prepareConfigurationComponentConfig(DxDropDownOptionsConfig);
const DxDropDownOptions = defineComponent(DxDropDownOptionsConfig);
DxDropDownOptions.$_optionName = "dropDownOptions";
DxDropDownOptions.$_expectedChildren = {
    animation: { isCollectionItem: false, optionName: "animation" },
    hideEvent: { isCollectionItem: false, optionName: "hideEvent" },
    position: { isCollectionItem: false, optionName: "position" },
    showEvent: { isCollectionItem: false, optionName: "showEvent" },
    toolbarItem: { isCollectionItem: true, optionName: "toolbarItems" }
};
const DxFromConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:left": null,
        "update:opacity": null,
        "update:position": null,
        "update:scale": null,
        "update:top": null,
    },
    props: {
        left: Number,
        opacity: Number,
        position: Object,
        scale: Number,
        top: Number
    }
};
prepareConfigurationComponentConfig(DxFromConfig);
const DxFrom = defineComponent(DxFromConfig);
DxFrom.$_optionName = "from";
DxFrom.$_expectedChildren = {
    position: { isCollectionItem: false, optionName: "position" }
};
const DxHideConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: Object,
        staggerDelay: Number,
        start: Function,
        to: Object,
        type: String
    }
};
prepareConfigurationComponentConfig(DxHideConfig);
const DxHide = defineComponent(DxHideConfig);
DxHide.$_optionName = "hide";
DxHide.$_expectedChildren = {
    from: { isCollectionItem: false, optionName: "from" },
    to: { isCollectionItem: false, optionName: "to" }
};
const DxHideEventConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:delay": null,
        "update:name": null,
    },
    props: {
        delay: Number,
        name: String
    }
};
prepareConfigurationComponentConfig(DxHideEventConfig);
const DxHideEvent = defineComponent(DxHideEventConfig);
DxHideEvent.$_optionName = "hideEvent";
const DxItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:disabled": null,
        "update:html": null,
        "update:template": null,
        "update:text": null,
        "update:visible": null,
    },
    props: {
        disabled: Boolean,
        html: String,
        template: {},
        text: String,
        visible: Boolean
    }
};
prepareConfigurationComponentConfig(DxItemConfig);
const DxItem = defineComponent(DxItemConfig);
DxItem.$_optionName = "items";
DxItem.$_isCollectionItem = true;
const DxMyConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
};
prepareConfigurationComponentConfig(DxMyConfig);
const DxMy = defineComponent(DxMyConfig);
DxMy.$_optionName = "my";
const DxOffsetConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
};
prepareConfigurationComponentConfig(DxOffsetConfig);
const DxOffset = defineComponent(DxOffsetConfig);
DxOffset.$_optionName = "offset";
const DxPositionConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:at": null,
        "update:boundary": null,
        "update:boundaryOffset": null,
        "update:collision": null,
        "update:my": null,
        "update:of": null,
        "update:offset": null,
    },
    props: {
        at: [Object, String],
        boundary: {},
        boundaryOffset: [Object, String],
        collision: [String, Object],
        my: [Object, String],
        of: {},
        offset: [Object, String]
    }
};
prepareConfigurationComponentConfig(DxPositionConfig);
const DxPosition = defineComponent(DxPositionConfig);
DxPosition.$_optionName = "position";
DxPosition.$_expectedChildren = {
    at: { isCollectionItem: false, optionName: "at" },
    boundaryOffset: { isCollectionItem: false, optionName: "boundaryOffset" },
    collision: { isCollectionItem: false, optionName: "collision" },
    my: { isCollectionItem: false, optionName: "my" },
    offset: { isCollectionItem: false, optionName: "offset" }
};
const DxShowConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: Object,
        staggerDelay: Number,
        start: Function,
        to: Object,
        type: String
    }
};
prepareConfigurationComponentConfig(DxShowConfig);
const DxShow = defineComponent(DxShowConfig);
DxShow.$_optionName = "show";
DxShow.$_expectedChildren = {
    from: { isCollectionItem: false, optionName: "from" },
    to: { isCollectionItem: false, optionName: "to" }
};
const DxShowEventConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:delay": null,
        "update:name": null,
    },
    props: {
        delay: Number,
        name: String
    }
};
prepareConfigurationComponentConfig(DxShowEventConfig);
const DxShowEvent = defineComponent(DxShowEventConfig);
DxShowEvent.$_optionName = "showEvent";
const DxToConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:left": null,
        "update:opacity": null,
        "update:position": null,
        "update:scale": null,
        "update:top": null,
    },
    props: {
        left: Number,
        opacity: Number,
        position: Object,
        scale: Number,
        top: Number
    }
};
prepareConfigurationComponentConfig(DxToConfig);
const DxTo = defineComponent(DxToConfig);
DxTo.$_optionName = "to";
DxTo.$_expectedChildren = {
    position: { isCollectionItem: false, optionName: "position" }
};
const DxToolbarItemConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cssClass": null,
        "update:disabled": null,
        "update:html": null,
        "update:locateInMenu": null,
        "update:location": null,
        "update:menuItemTemplate": null,
        "update:options": null,
        "update:showText": null,
        "update:template": null,
        "update:text": null,
        "update:toolbar": null,
        "update:visible": null,
        "update:widget": null,
    },
    props: {
        cssClass: String,
        disabled: Boolean,
        html: String,
        locateInMenu: String,
        location: String,
        menuItemTemplate: {},
        options: {},
        showText: String,
        template: {},
        text: String,
        toolbar: String,
        visible: Boolean,
        widget: String
    }
};
prepareConfigurationComponentConfig(DxToolbarItemConfig);
const DxToolbarItem = defineComponent(DxToolbarItemConfig);
DxToolbarItem.$_optionName = "toolbarItems";
DxToolbarItem.$_isCollectionItem = true;
export default DxLookup;
export { DxLookup, DxAnimation, DxAt, DxBoundaryOffset, DxCollision, DxDropDownOptions, DxFrom, DxHide, DxHideEvent, DxItem, DxMy, DxOffset, DxPosition, DxShow, DxShowEvent, DxTo, DxToolbarItem };
