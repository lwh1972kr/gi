/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { defineComponent } from "vue";
import { prepareComponentConfig } from "./core/index";
import PieChart from "devextreme/viz/pie_chart";
import { prepareConfigurationComponentConfig } from "./core/index";
const componentConfig = {
    props: {
        adaptiveLayout: Object,
        animation: [Boolean, Object],
        annotations: Array,
        centerTemplate: {},
        commonAnnotationSettings: Object,
        commonSeriesSettings: {},
        customizeAnnotation: Function,
        customizeLabel: Function,
        customizePoint: Function,
        dataSource: [Array, Object, String],
        diameter: Number,
        disabled: Boolean,
        elementAttr: Object,
        export: Object,
        innerRadius: Number,
        legend: Object,
        loadingIndicator: Object,
        margin: Object,
        minDiameter: Number,
        onDisposing: Function,
        onDone: Function,
        onDrawn: Function,
        onExported: Function,
        onExporting: Function,
        onFileSaving: Function,
        onIncidentOccurred: Function,
        onInitialized: Function,
        onLegendClick: Function,
        onOptionChanged: Function,
        onPointClick: Function,
        onPointHoverChanged: Function,
        onPointSelectionChanged: Function,
        onTooltipHidden: Function,
        onTooltipShown: Function,
        palette: [Array, String],
        paletteExtensionMode: String,
        pathModified: Boolean,
        pointSelectionMode: String,
        redrawOnResize: Boolean,
        resolveLabelOverlapping: String,
        rtlEnabled: Boolean,
        segmentsDirection: String,
        series: [Array, Object],
        seriesTemplate: Object,
        size: Object,
        sizeGroup: String,
        startAngle: Number,
        theme: String,
        title: [Object, String],
        tooltip: Object,
        type: String
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:adaptiveLayout": null,
        "update:animation": null,
        "update:annotations": null,
        "update:centerTemplate": null,
        "update:commonAnnotationSettings": null,
        "update:commonSeriesSettings": null,
        "update:customizeAnnotation": null,
        "update:customizeLabel": null,
        "update:customizePoint": null,
        "update:dataSource": null,
        "update:diameter": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:export": null,
        "update:innerRadius": null,
        "update:legend": null,
        "update:loadingIndicator": null,
        "update:margin": null,
        "update:minDiameter": null,
        "update:onDisposing": null,
        "update:onDone": null,
        "update:onDrawn": null,
        "update:onExported": null,
        "update:onExporting": null,
        "update:onFileSaving": null,
        "update:onIncidentOccurred": null,
        "update:onInitialized": null,
        "update:onLegendClick": null,
        "update:onOptionChanged": null,
        "update:onPointClick": null,
        "update:onPointHoverChanged": null,
        "update:onPointSelectionChanged": null,
        "update:onTooltipHidden": null,
        "update:onTooltipShown": null,
        "update:palette": null,
        "update:paletteExtensionMode": null,
        "update:pathModified": null,
        "update:pointSelectionMode": null,
        "update:redrawOnResize": null,
        "update:resolveLabelOverlapping": null,
        "update:rtlEnabled": null,
        "update:segmentsDirection": null,
        "update:series": null,
        "update:seriesTemplate": null,
        "update:size": null,
        "update:sizeGroup": null,
        "update:startAngle": null,
        "update:theme": null,
        "update:title": null,
        "update:tooltip": null,
        "update:type": null,
    },
    computed: {
        instance() {
            return this.$_instance;
        }
    },
    beforeCreate() {
        this.$_WidgetClass = PieChart;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            adaptiveLayout: { isCollectionItem: false, optionName: "adaptiveLayout" },
            animation: { isCollectionItem: false, optionName: "animation" },
            annotation: { isCollectionItem: true, optionName: "annotations" },
            commonAnnotationSettings: { isCollectionItem: false, optionName: "commonAnnotationSettings" },
            commonSeriesSettings: { isCollectionItem: false, optionName: "commonSeriesSettings" },
            export: { isCollectionItem: false, optionName: "export" },
            legend: { isCollectionItem: false, optionName: "legend" },
            loadingIndicator: { isCollectionItem: false, optionName: "loadingIndicator" },
            margin: { isCollectionItem: false, optionName: "margin" },
            pieChartTitle: { isCollectionItem: false, optionName: "title" },
            series: { isCollectionItem: true, optionName: "series" },
            seriesTemplate: { isCollectionItem: false, optionName: "seriesTemplate" },
            size: { isCollectionItem: false, optionName: "size" },
            title: { isCollectionItem: false, optionName: "title" },
            tooltip: { isCollectionItem: false, optionName: "tooltip" }
        };
    }
};
prepareComponentConfig(componentConfig);
const DxPieChart = defineComponent(componentConfig);
const DxAdaptiveLayoutConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:keepLabels": null,
        "update:width": null,
    },
    props: {
        height: Number,
        keepLabels: Boolean,
        width: Number
    }
};
prepareConfigurationComponentConfig(DxAdaptiveLayoutConfig);
const DxAdaptiveLayout = defineComponent(DxAdaptiveLayoutConfig);
DxAdaptiveLayout.$_optionName = "adaptiveLayout";
const DxAnimationConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:duration": null,
        "update:easing": null,
        "update:enabled": null,
        "update:maxPointCountSupported": null,
    },
    props: {
        duration: Number,
        easing: String,
        enabled: Boolean,
        maxPointCountSupported: Number
    }
};
prepareConfigurationComponentConfig(DxAnimationConfig);
const DxAnimation = defineComponent(DxAnimationConfig);
DxAnimation.$_optionName = "animation";
const DxAnnotationConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDragging": null,
        "update:argument": null,
        "update:arrowLength": null,
        "update:arrowWidth": null,
        "update:border": null,
        "update:color": null,
        "update:customizeTooltip": null,
        "update:data": null,
        "update:description": null,
        "update:font": null,
        "update:height": null,
        "update:image": null,
        "update:location": null,
        "update:name": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:series": null,
        "update:shadow": null,
        "update:template": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:tooltipEnabled": null,
        "update:tooltipTemplate": null,
        "update:type": null,
        "update:width": null,
        "update:wordWrap": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        allowDragging: Boolean,
        argument: [Date, Number, String],
        arrowLength: Number,
        arrowWidth: Number,
        border: Object,
        color: String,
        customizeTooltip: Function,
        data: {},
        description: String,
        font: Object,
        height: Number,
        image: [Object, String],
        location: String,
        name: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        series: String,
        shadow: Object,
        template: {},
        text: String,
        textOverflow: String,
        tooltipEnabled: Boolean,
        tooltipTemplate: {},
        type: String,
        width: Number,
        wordWrap: String,
        x: Number,
        y: Number
    }
};
prepareConfigurationComponentConfig(DxAnnotationConfig);
const DxAnnotation = defineComponent(DxAnnotationConfig);
DxAnnotation.$_optionName = "annotations";
DxAnnotation.$_isCollectionItem = true;
DxAnnotation.$_expectedChildren = {
    annotationBorder: { isCollectionItem: false, optionName: "border" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    image: { isCollectionItem: false, optionName: "image" },
    shadow: { isCollectionItem: false, optionName: "shadow" }
};
const DxAnnotationBorderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
};
prepareConfigurationComponentConfig(DxAnnotationBorderConfig);
const DxAnnotationBorder = defineComponent(DxAnnotationBorderConfig);
DxAnnotationBorder.$_optionName = "border";
const DxArgumentFormatConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
};
prepareConfigurationComponentConfig(DxArgumentFormatConfig);
const DxArgumentFormat = defineComponent(DxArgumentFormatConfig);
DxArgumentFormat.$_optionName = "argumentFormat";
const DxBorderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:cornerRadius": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        cornerRadius: Number,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
};
prepareConfigurationComponentConfig(DxBorderConfig);
const DxBorder = defineComponent(DxBorderConfig);
DxBorder.$_optionName = "border";
const DxColorConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:base": null,
        "update:fillId": null,
    },
    props: {
        base: String,
        fillId: String
    }
};
prepareConfigurationComponentConfig(DxColorConfig);
const DxColor = defineComponent(DxColorConfig);
DxColor.$_optionName = "color";
const DxCommonAnnotationSettingsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowDragging": null,
        "update:argument": null,
        "update:arrowLength": null,
        "update:arrowWidth": null,
        "update:border": null,
        "update:color": null,
        "update:customizeTooltip": null,
        "update:data": null,
        "update:description": null,
        "update:font": null,
        "update:height": null,
        "update:image": null,
        "update:location": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:series": null,
        "update:shadow": null,
        "update:template": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:tooltipEnabled": null,
        "update:tooltipTemplate": null,
        "update:type": null,
        "update:width": null,
        "update:wordWrap": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        allowDragging: Boolean,
        argument: [Date, Number, String],
        arrowLength: Number,
        arrowWidth: Number,
        border: Object,
        color: String,
        customizeTooltip: Function,
        data: {},
        description: String,
        font: Object,
        height: Number,
        image: [Object, String],
        location: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        series: String,
        shadow: Object,
        template: {},
        text: String,
        textOverflow: String,
        tooltipEnabled: Boolean,
        tooltipTemplate: {},
        type: String,
        width: Number,
        wordWrap: String,
        x: Number,
        y: Number
    }
};
prepareConfigurationComponentConfig(DxCommonAnnotationSettingsConfig);
const DxCommonAnnotationSettings = defineComponent(DxCommonAnnotationSettingsConfig);
DxCommonAnnotationSettings.$_optionName = "commonAnnotationSettings";
DxCommonAnnotationSettings.$_expectedChildren = {
    annotationBorder: { isCollectionItem: false, optionName: "border" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    image: { isCollectionItem: false, optionName: "image" },
    shadow: { isCollectionItem: false, optionName: "shadow" }
};
const DxCommonSeriesSettingsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:argumentField": null,
        "update:argumentType": null,
        "update:border": null,
        "update:color": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:label": null,
        "update:maxLabelCount": null,
        "update:minSegmentSize": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:smallValuesGrouping": null,
        "update:tagField": null,
        "update:valueField": null,
    },
    props: {
        argumentField: String,
        argumentType: String,
        border: Object,
        color: [Object, String],
        hoverMode: String,
        hoverStyle: Object,
        label: Object,
        maxLabelCount: Number,
        minSegmentSize: Number,
        selectionMode: String,
        selectionStyle: Object,
        smallValuesGrouping: Object,
        tagField: String,
        valueField: String
    }
};
prepareConfigurationComponentConfig(DxCommonSeriesSettingsConfig);
const DxCommonSeriesSettings = defineComponent(DxCommonSeriesSettingsConfig);
DxCommonSeriesSettings.$_optionName = "commonSeriesSettings";
DxCommonSeriesSettings.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    seriesBorder: { isCollectionItem: false, optionName: "border" },
    smallValuesGrouping: { isCollectionItem: false, optionName: "smallValuesGrouping" }
};
const DxConnectorConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        visible: Boolean,
        width: Number
    }
};
prepareConfigurationComponentConfig(DxConnectorConfig);
const DxConnector = defineComponent(DxConnectorConfig);
DxConnector.$_optionName = "connector";
const DxExportConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:fileName": null,
        "update:formats": null,
        "update:margin": null,
        "update:printingEnabled": null,
        "update:svgToCanvas": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        fileName: String,
        formats: Array,
        margin: Number,
        printingEnabled: Boolean,
        svgToCanvas: Function
    }
};
prepareConfigurationComponentConfig(DxExportConfig);
const DxExport = defineComponent(DxExportConfig);
DxExport.$_optionName = "export";
const DxFontConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:family": null,
        "update:opacity": null,
        "update:size": null,
        "update:weight": null,
    },
    props: {
        color: String,
        family: String,
        opacity: Number,
        size: [Number, String],
        weight: Number
    }
};
prepareConfigurationComponentConfig(DxFontConfig);
const DxFont = defineComponent(DxFontConfig);
DxFont.$_optionName = "font";
const DxFormatConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:currency": null,
        "update:formatter": null,
        "update:parser": null,
        "update:precision": null,
        "update:type": null,
        "update:useCurrencyAccountingStyle": null,
    },
    props: {
        currency: String,
        formatter: Function,
        parser: Function,
        precision: Number,
        type: String,
        useCurrencyAccountingStyle: Boolean
    }
};
prepareConfigurationComponentConfig(DxFormatConfig);
const DxFormat = defineComponent(DxFormatConfig);
DxFormat.$_optionName = "format";
const DxHatchingConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:direction": null,
        "update:opacity": null,
        "update:step": null,
        "update:width": null,
    },
    props: {
        direction: String,
        opacity: Number,
        step: Number,
        width: Number
    }
};
prepareConfigurationComponentConfig(DxHatchingConfig);
const DxHatching = defineComponent(DxHatchingConfig);
DxHatching.$_optionName = "hatching";
const DxHoverStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:hatching": null,
        "update:highlight": null,
    },
    props: {
        border: Object,
        color: [Object, String],
        hatching: Object,
        highlight: Boolean
    }
};
prepareConfigurationComponentConfig(DxHoverStyleConfig);
const DxHoverStyle = defineComponent(DxHoverStyleConfig);
DxHoverStyle.$_optionName = "hoverStyle";
DxHoverStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
const DxImageConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:url": null,
        "update:width": null,
    },
    props: {
        height: Number,
        url: String,
        width: Number
    }
};
prepareConfigurationComponentConfig(DxImageConfig);
const DxImage = defineComponent(DxImageConfig);
DxImage.$_optionName = "image";
const DxLabelConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:argumentFormat": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:connector": null,
        "update:customizeText": null,
        "update:displayFormat": null,
        "update:font": null,
        "update:format": null,
        "update:position": null,
        "update:radialOffset": null,
        "update:rotationAngle": null,
        "update:textOverflow": null,
        "update:visible": null,
        "update:wordWrap": null,
    },
    props: {
        argumentFormat: [Object, String, Function],
        backgroundColor: String,
        border: Object,
        connector: Object,
        customizeText: Function,
        displayFormat: String,
        font: Object,
        format: [Object, String, Function],
        position: String,
        radialOffset: Number,
        rotationAngle: Number,
        textOverflow: String,
        visible: Boolean,
        wordWrap: String
    }
};
prepareConfigurationComponentConfig(DxLabelConfig);
const DxLabel = defineComponent(DxLabelConfig);
DxLabel.$_optionName = "label";
DxLabel.$_expectedChildren = {
    argumentFormat: { isCollectionItem: false, optionName: "argumentFormat" },
    border: { isCollectionItem: false, optionName: "border" },
    connector: { isCollectionItem: false, optionName: "connector" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
const DxLegendConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:border": null,
        "update:columnCount": null,
        "update:columnItemSpacing": null,
        "update:customizeHint": null,
        "update:customizeItems": null,
        "update:customizeText": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:hoverMode": null,
        "update:itemsAlignment": null,
        "update:itemTextPosition": null,
        "update:margin": null,
        "update:markerSize": null,
        "update:markerTemplate": null,
        "update:orientation": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:rowCount": null,
        "update:rowItemSpacing": null,
        "update:title": null,
        "update:verticalAlignment": null,
        "update:visible": null,
    },
    props: {
        backgroundColor: String,
        border: Object,
        columnCount: Number,
        columnItemSpacing: Number,
        customizeHint: Function,
        customizeItems: Function,
        customizeText: Function,
        font: Object,
        horizontalAlignment: String,
        hoverMode: String,
        itemsAlignment: String,
        itemTextPosition: String,
        margin: [Number, Object],
        markerSize: Number,
        markerTemplate: {},
        orientation: String,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        rowCount: Number,
        rowItemSpacing: Number,
        title: [Object, String],
        verticalAlignment: String,
        visible: Boolean
    }
};
prepareConfigurationComponentConfig(DxLegendConfig);
const DxLegend = defineComponent(DxLegendConfig);
DxLegend.$_optionName = "legend";
DxLegend.$_expectedChildren = {
    annotationBorder: { isCollectionItem: false, optionName: "border" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    legendTitle: { isCollectionItem: false, optionName: "title" },
    margin: { isCollectionItem: false, optionName: "margin" },
    title: { isCollectionItem: false, optionName: "title" }
};
const DxLegendTitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:verticalAlignment": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: Object,
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        verticalAlignment: String
    }
};
prepareConfigurationComponentConfig(DxLegendTitleConfig);
const DxLegendTitle = defineComponent(DxLegendTitleConfig);
DxLegendTitle.$_optionName = "title";
DxLegendTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    legendTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    margin: { isCollectionItem: false, optionName: "margin" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
const DxLegendTitleSubtitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String
    }
};
prepareConfigurationComponentConfig(DxLegendTitleSubtitleConfig);
const DxLegendTitleSubtitle = defineComponent(DxLegendTitleSubtitleConfig);
DxLegendTitleSubtitle.$_optionName = "subtitle";
DxLegendTitleSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxLoadingIndicatorConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:backgroundColor": null,
        "update:enabled": null,
        "update:font": null,
        "update:show": null,
        "update:text": null,
    },
    props: {
        backgroundColor: String,
        enabled: Boolean,
        font: Object,
        show: Boolean,
        text: String
    }
};
prepareConfigurationComponentConfig(DxLoadingIndicatorConfig);
const DxLoadingIndicator = defineComponent(DxLoadingIndicatorConfig);
DxLoadingIndicator.$_optionName = "loadingIndicator";
DxLoadingIndicator.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxMarginConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:bottom": null,
        "update:left": null,
        "update:right": null,
        "update:top": null,
    },
    props: {
        bottom: Number,
        left: Number,
        right: Number,
        top: Number
    }
};
prepareConfigurationComponentConfig(DxMarginConfig);
const DxMargin = defineComponent(DxMarginConfig);
DxMargin.$_optionName = "margin";
const DxPieChartTitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: [Number, Object],
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
};
prepareConfigurationComponentConfig(DxPieChartTitleConfig);
const DxPieChartTitle = defineComponent(DxPieChartTitleConfig);
DxPieChartTitle.$_optionName = "title";
DxPieChartTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    margin: { isCollectionItem: false, optionName: "margin" },
    pieChartTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    subtitle: { isCollectionItem: false, optionName: "subtitle" }
};
const DxPieChartTitleSubtitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
};
prepareConfigurationComponentConfig(DxPieChartTitleSubtitleConfig);
const DxPieChartTitleSubtitle = defineComponent(DxPieChartTitleSubtitleConfig);
DxPieChartTitleSubtitle.$_optionName = "subtitle";
DxPieChartTitleSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxSelectionStyleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:border": null,
        "update:color": null,
        "update:hatching": null,
        "update:highlight": null,
    },
    props: {
        border: Object,
        color: [Object, String],
        hatching: Object,
        highlight: Boolean
    }
};
prepareConfigurationComponentConfig(DxSelectionStyleConfig);
const DxSelectionStyle = defineComponent(DxSelectionStyleConfig);
DxSelectionStyle.$_optionName = "selectionStyle";
DxSelectionStyle.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    hatching: { isCollectionItem: false, optionName: "hatching" },
    seriesBorder: { isCollectionItem: false, optionName: "border" }
};
const DxSeriesConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:argumentField": null,
        "update:argumentType": null,
        "update:border": null,
        "update:color": null,
        "update:hoverMode": null,
        "update:hoverStyle": null,
        "update:label": null,
        "update:maxLabelCount": null,
        "update:minSegmentSize": null,
        "update:name": null,
        "update:selectionMode": null,
        "update:selectionStyle": null,
        "update:smallValuesGrouping": null,
        "update:tag": null,
        "update:tagField": null,
        "update:valueField": null,
    },
    props: {
        argumentField: String,
        argumentType: String,
        border: Object,
        color: [Object, String],
        hoverMode: String,
        hoverStyle: Object,
        label: Object,
        maxLabelCount: Number,
        minSegmentSize: Number,
        name: String,
        selectionMode: String,
        selectionStyle: Object,
        smallValuesGrouping: Object,
        tag: {},
        tagField: String,
        valueField: String
    }
};
prepareConfigurationComponentConfig(DxSeriesConfig);
const DxSeries = defineComponent(DxSeriesConfig);
DxSeries.$_optionName = "series";
DxSeries.$_isCollectionItem = true;
DxSeries.$_expectedChildren = {
    border: { isCollectionItem: false, optionName: "border" },
    color: { isCollectionItem: false, optionName: "color" },
    hoverStyle: { isCollectionItem: false, optionName: "hoverStyle" },
    label: { isCollectionItem: false, optionName: "label" },
    selectionStyle: { isCollectionItem: false, optionName: "selectionStyle" },
    seriesBorder: { isCollectionItem: false, optionName: "border" },
    smallValuesGrouping: { isCollectionItem: false, optionName: "smallValuesGrouping" }
};
const DxSeriesBorderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        visible: Boolean,
        width: Number
    }
};
prepareConfigurationComponentConfig(DxSeriesBorderConfig);
const DxSeriesBorder = defineComponent(DxSeriesBorderConfig);
DxSeriesBorder.$_optionName = "border";
const DxSeriesTemplateConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:customizeSeries": null,
        "update:nameField": null,
    },
    props: {
        customizeSeries: Function,
        nameField: String
    }
};
prepareConfigurationComponentConfig(DxSeriesTemplateConfig);
const DxSeriesTemplate = defineComponent(DxSeriesTemplateConfig);
DxSeriesTemplate.$_optionName = "seriesTemplate";
const DxShadowConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:blur": null,
        "update:color": null,
        "update:offsetX": null,
        "update:offsetY": null,
        "update:opacity": null,
    },
    props: {
        blur: Number,
        color: String,
        offsetX: Number,
        offsetY: Number,
        opacity: Number
    }
};
prepareConfigurationComponentConfig(DxShadowConfig);
const DxShadow = defineComponent(DxShadowConfig);
DxShadow.$_optionName = "shadow";
const DxSizeConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:height": null,
        "update:width": null,
    },
    props: {
        height: Number,
        width: Number
    }
};
prepareConfigurationComponentConfig(DxSizeConfig);
const DxSize = defineComponent(DxSizeConfig);
DxSize.$_optionName = "size";
const DxSmallValuesGroupingConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:groupName": null,
        "update:mode": null,
        "update:threshold": null,
        "update:topCount": null,
    },
    props: {
        groupName: String,
        mode: String,
        threshold: Number,
        topCount: Number
    }
};
prepareConfigurationComponentConfig(DxSmallValuesGroupingConfig);
const DxSmallValuesGrouping = defineComponent(DxSmallValuesGroupingConfig);
DxSmallValuesGrouping.$_optionName = "smallValuesGrouping";
const DxSubtitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:offset": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        offset: Number,
        text: String,
        textOverflow: String,
        wordWrap: String
    }
};
prepareConfigurationComponentConfig(DxSubtitleConfig);
const DxSubtitle = defineComponent(DxSubtitleConfig);
DxSubtitle.$_optionName = "subtitle";
DxSubtitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" }
};
const DxTitleConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:font": null,
        "update:horizontalAlignment": null,
        "update:margin": null,
        "update:placeholderSize": null,
        "update:subtitle": null,
        "update:text": null,
        "update:textOverflow": null,
        "update:verticalAlignment": null,
        "update:wordWrap": null,
    },
    props: {
        font: Object,
        horizontalAlignment: String,
        margin: [Object, Number],
        placeholderSize: Number,
        subtitle: [Object, String],
        text: String,
        textOverflow: String,
        verticalAlignment: String,
        wordWrap: String
    }
};
prepareConfigurationComponentConfig(DxTitleConfig);
const DxTitle = defineComponent(DxTitleConfig);
DxTitle.$_optionName = "title";
DxTitle.$_expectedChildren = {
    font: { isCollectionItem: false, optionName: "font" },
    legendTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" },
    margin: { isCollectionItem: false, optionName: "margin" },
    pieChartTitleSubtitle: { isCollectionItem: false, optionName: "subtitle" }
};
const DxTooltipConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:argumentFormat": null,
        "update:arrowLength": null,
        "update:border": null,
        "update:color": null,
        "update:container": null,
        "update:contentTemplate": null,
        "update:cornerRadius": null,
        "update:customizeTooltip": null,
        "update:enabled": null,
        "update:font": null,
        "update:format": null,
        "update:interactive": null,
        "update:opacity": null,
        "update:paddingLeftRight": null,
        "update:paddingTopBottom": null,
        "update:shadow": null,
        "update:shared": null,
        "update:zIndex": null,
    },
    props: {
        argumentFormat: [Object, String, Function],
        arrowLength: Number,
        border: Object,
        color: String,
        container: {},
        contentTemplate: {},
        cornerRadius: Number,
        customizeTooltip: Function,
        enabled: Boolean,
        font: Object,
        format: [Object, String, Function],
        interactive: Boolean,
        opacity: Number,
        paddingLeftRight: Number,
        paddingTopBottom: Number,
        shadow: Object,
        shared: Boolean,
        zIndex: Number
    }
};
prepareConfigurationComponentConfig(DxTooltipConfig);
const DxTooltip = defineComponent(DxTooltipConfig);
DxTooltip.$_optionName = "tooltip";
DxTooltip.$_expectedChildren = {
    argumentFormat: { isCollectionItem: false, optionName: "argumentFormat" },
    border: { isCollectionItem: false, optionName: "border" },
    font: { isCollectionItem: false, optionName: "font" },
    format: { isCollectionItem: false, optionName: "format" },
    shadow: { isCollectionItem: false, optionName: "shadow" },
    tooltipBorder: { isCollectionItem: false, optionName: "border" }
};
const DxTooltipBorderConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:color": null,
        "update:dashStyle": null,
        "update:opacity": null,
        "update:visible": null,
        "update:width": null,
    },
    props: {
        color: String,
        dashStyle: String,
        opacity: Number,
        visible: Boolean,
        width: Number
    }
};
prepareConfigurationComponentConfig(DxTooltipBorderConfig);
const DxTooltipBorder = defineComponent(DxTooltipBorderConfig);
DxTooltipBorder.$_optionName = "border";
export default DxPieChart;
export { DxPieChart, DxAdaptiveLayout, DxAnimation, DxAnnotation, DxAnnotationBorder, DxArgumentFormat, DxBorder, DxColor, DxCommonAnnotationSettings, DxCommonSeriesSettings, DxConnector, DxExport, DxFont, DxFormat, DxHatching, DxHoverStyle, DxImage, DxLabel, DxLegend, DxLegendTitle, DxLegendTitleSubtitle, DxLoadingIndicator, DxMargin, DxPieChartTitle, DxPieChartTitleSubtitle, DxSelectionStyle, DxSeries, DxSeriesBorder, DxSeriesTemplate, DxShadow, DxSize, DxSmallValuesGrouping, DxSubtitle, DxTitle, DxTooltip, DxTooltipBorder };
