/**
 * DevExtreme (esm/__internal/grids/grid_core/utils/selector_comparison.js)
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
export const getNormalizedCallback = callback => "originalCallback" in callback ? callback.originalCallback : callback;
export const getNormalizedColumnIdx = callback => "columnIndex" in callback ? callback.columnIndex ?? null : void 0;
export const compareCallbacks = (callback, callbackToCompare) => {
    const normalizedCallback = getNormalizedCallback(callback);
    const normalizedCallbackToCompare = getNormalizedCallback(callbackToCompare);
    const normalizedColumnIdx = getNormalizedColumnIdx(callback);
    const normalizedColumnIdxToCompare = getNormalizedColumnIdx(callbackToCompare);
    const originalCallbacksEqual = normalizedCallback === normalizedCallbackToCompare;
    const shouldCompareColumnIdx = void 0 !== normalizedColumnIdx;
    const columnIdxEqual = normalizedColumnIdx === normalizedColumnIdxToCompare;
    return originalCallbacksEqual && (!shouldCompareColumnIdx || columnIdxEqual)
};
export const isEqualSelectors = (selector, selectorToCompare) => {
    if ("string" === typeof selector && "string" === typeof selectorToCompare) {
        return selector === selectorToCompare
    }
    if ("function" === typeof selector && "function" === typeof selectorToCompare) {
        return compareCallbacks(selector, selectorToCompare)
    }
    return false
};
export const isSelectorEqualWithCallback = (selector, callback) => {
    if ("function" === typeof selector && "function" === typeof callback) {
        return compareCallbacks(selector, callback)
    }
    return false
};
