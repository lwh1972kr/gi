/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { PropType } from "vue";
import Chart, { Properties } from "devextreme/viz/chart";
import DataSource from "devextreme/data/data_source";
import { dxChartAnnotationConfig, dxChartCommonAnnotationConfig, ArgumentAxisClickEvent, DisposingEvent, DoneEvent, DrawnEvent, ExportedEvent, ExportingEvent, FileSavingEvent, IncidentOccurredEvent, InitializedEvent, LegendClickEvent, OptionChangedEvent, PointClickEvent, PointHoverChangedEvent, PointSelectionChangedEvent, SeriesClickEvent, SeriesHoverChangedEvent, SeriesSelectionChangedEvent, TooltipHiddenEvent, TooltipShownEvent, ZoomEndEvent, ZoomStartEvent, chartPointAggregationInfoObject, chartSeriesObject, ChartSeriesAggregationMethod, AggregatedPointsPosition, ChartLabelDisplayMode, chartPointObject, FinancialChartReductionLevel, ChartTooltipLocation, ChartZoomAndPanMode, EventKeyModifier } from "devextreme/viz/chart";
import { SeriesLabel, SeriesPoint, Palette, PaletteExtensionMode, ChartsLabelOverlap, Theme, AnimationEaseMode, Font, TextOverflow, AnnotationType, WordWrap, DashStyle, TimeInterval, ChartsDataType, ScaleBreak, DiscreteAxisDivisionMode, ArgumentAxisHoverMode, AxisScaleType, VisualRangeUpdateMode, RelativePosition, ChartsAxisLabelOverlap, ScaleBreakLineStyle, ChartsColor, SeriesHoverMode, SeriesSelectionMode, SeriesType, HatchDirection, LegendItem, LegendHoverMode, PointInteractionMode, PointSymbol, ValueErrorBarDisplayMode, ValueErrorBarType } from "devextreme/common/charts";
import { DataSourceOptions } from "devextreme/common/data";
import { Store } from "devextreme/data/store";
import { SingleOrMultiple, Position, HorizontalAlignment, VerticalAlignment, VerticalEdge, ExportFormat, Orientation } from "devextreme/common";
import { ChartSeries } from "devextreme/viz/common";
import * as CommonChartTypes from "devextreme/common/charts";
type AccessibleOptions = Pick<Properties, "adaptiveLayout" | "adjustOnZoom" | "animation" | "annotations" | "argumentAxis" | "autoHidePointMarkers" | "barGroupPadding" | "barGroupWidth" | "commonAnnotationSettings" | "commonAxisSettings" | "commonPaneSettings" | "commonSeriesSettings" | "containerBackgroundColor" | "crosshair" | "customizeAnnotation" | "customizeLabel" | "customizePoint" | "dataPrepareSettings" | "dataSource" | "defaultPane" | "disabled" | "elementAttr" | "export" | "legend" | "loadingIndicator" | "margin" | "maxBubbleSize" | "minBubbleSize" | "negativesAsZeroes" | "onArgumentAxisClick" | "onDisposing" | "onDone" | "onDrawn" | "onExported" | "onExporting" | "onFileSaving" | "onIncidentOccurred" | "onInitialized" | "onLegendClick" | "onOptionChanged" | "onPointClick" | "onPointHoverChanged" | "onPointSelectionChanged" | "onSeriesClick" | "onSeriesHoverChanged" | "onSeriesSelectionChanged" | "onTooltipHidden" | "onTooltipShown" | "onZoomEnd" | "onZoomStart" | "palette" | "paletteExtensionMode" | "panes" | "pathModified" | "pointSelectionMode" | "redrawOnResize" | "resizePanesOnZoom" | "resolveLabelOverlapping" | "rotated" | "rtlEnabled" | "scrollBar" | "series" | "seriesSelectionMode" | "seriesTemplate" | "size" | "stickyHovering" | "synchronizeMultiAxes" | "theme" | "title" | "tooltip" | "valueAxis" | "zoomAndPan">;
interface DxChart extends AccessibleOptions {
    readonly instance?: Chart;
}
declare const DxChart: import("@vue/runtime-core").DefineComponent<{
    adaptiveLayout: PropType<Record<string, any>>;
    adjustOnZoom: BooleanConstructor;
    animation: PropType<boolean | Record<string, any>>;
    annotations: PropType<any[]>;
    argumentAxis: PropType<Record<string, any>>;
    autoHidePointMarkers: BooleanConstructor;
    barGroupPadding: NumberConstructor;
    barGroupWidth: NumberConstructor;
    commonAnnotationSettings: PropType<Record<string, any> | dxChartCommonAnnotationConfig>;
    commonAxisSettings: PropType<Record<string, any>>;
    commonPaneSettings: PropType<Record<string, any>>;
    commonSeriesSettings: PropType<Record<string, any>>;
    containerBackgroundColor: StringConstructor;
    crosshair: PropType<Record<string, any>>;
    customizeAnnotation: PropType<(annotation: dxChartAnnotationConfig | any) => dxChartAnnotationConfig>;
    customizeLabel: PropType<(pointInfo: any) => SeriesLabel>;
    customizePoint: PropType<(pointInfo: any) => SeriesPoint>;
    dataPrepareSettings: PropType<Record<string, any>>;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    defaultPane: StringConstructor;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    export: PropType<Record<string, any>>;
    legend: PropType<Record<string, any>>;
    loadingIndicator: PropType<Record<string, any>>;
    margin: PropType<Record<string, any>>;
    maxBubbleSize: NumberConstructor;
    minBubbleSize: NumberConstructor;
    negativesAsZeroes: BooleanConstructor;
    onArgumentAxisClick: PropType<(e: ArgumentAxisClickEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onDone: PropType<(e: DoneEvent) => void>;
    onDrawn: PropType<(e: DrawnEvent) => void>;
    onExported: PropType<(e: ExportedEvent) => void>;
    onExporting: PropType<(e: ExportingEvent) => void>;
    onFileSaving: PropType<(e: FileSavingEvent) => void>;
    onIncidentOccurred: PropType<(e: IncidentOccurredEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onLegendClick: PropType<(e: LegendClickEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onPointClick: PropType<(e: PointClickEvent) => void>;
    onPointHoverChanged: PropType<(e: PointHoverChangedEvent) => void>;
    onPointSelectionChanged: PropType<(e: PointSelectionChangedEvent) => void>;
    onSeriesClick: PropType<(e: SeriesClickEvent) => void>;
    onSeriesHoverChanged: PropType<(e: SeriesHoverChangedEvent) => void>;
    onSeriesSelectionChanged: PropType<(e: SeriesSelectionChangedEvent) => void>;
    onTooltipHidden: PropType<(e: TooltipHiddenEvent) => void>;
    onTooltipShown: PropType<(e: TooltipShownEvent) => void>;
    onZoomEnd: PropType<(e: ZoomEndEvent) => void>;
    onZoomStart: PropType<(e: ZoomStartEvent) => void>;
    palette: PropType<string[] | Palette>;
    paletteExtensionMode: PropType<PaletteExtensionMode>;
    panes: PropType<Record<string, any> | Record<string, any>[]>;
    pathModified: BooleanConstructor;
    pointSelectionMode: PropType<SingleOrMultiple>;
    redrawOnResize: BooleanConstructor;
    resizePanesOnZoom: BooleanConstructor;
    resolveLabelOverlapping: PropType<ChartsLabelOverlap>;
    rotated: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    scrollBar: PropType<Record<string, any>>;
    series: PropType<Record<string, any> | ChartSeries | ChartSeries[]>;
    seriesSelectionMode: PropType<SingleOrMultiple>;
    seriesTemplate: PropType<Record<string, any>>;
    size: PropType<Record<string, any>>;
    stickyHovering: BooleanConstructor;
    synchronizeMultiAxes: BooleanConstructor;
    theme: PropType<Theme>;
    title: PropType<string | Record<string, any>>;
    tooltip: PropType<Record<string, any>>;
    valueAxis: PropType<Record<string, any> | Record<string, any>[]>;
    zoomAndPan: PropType<Record<string, any>>;
}, unknown, unknown, {
    instance(): Chart;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:adaptiveLayout": null;
    "update:adjustOnZoom": null;
    "update:animation": null;
    "update:annotations": null;
    "update:argumentAxis": null;
    "update:autoHidePointMarkers": null;
    "update:barGroupPadding": null;
    "update:barGroupWidth": null;
    "update:commonAnnotationSettings": null;
    "update:commonAxisSettings": null;
    "update:commonPaneSettings": null;
    "update:commonSeriesSettings": null;
    "update:containerBackgroundColor": null;
    "update:crosshair": null;
    "update:customizeAnnotation": null;
    "update:customizeLabel": null;
    "update:customizePoint": null;
    "update:dataPrepareSettings": null;
    "update:dataSource": null;
    "update:defaultPane": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:export": null;
    "update:legend": null;
    "update:loadingIndicator": null;
    "update:margin": null;
    "update:maxBubbleSize": null;
    "update:minBubbleSize": null;
    "update:negativesAsZeroes": null;
    "update:onArgumentAxisClick": null;
    "update:onDisposing": null;
    "update:onDone": null;
    "update:onDrawn": null;
    "update:onExported": null;
    "update:onExporting": null;
    "update:onFileSaving": null;
    "update:onIncidentOccurred": null;
    "update:onInitialized": null;
    "update:onLegendClick": null;
    "update:onOptionChanged": null;
    "update:onPointClick": null;
    "update:onPointHoverChanged": null;
    "update:onPointSelectionChanged": null;
    "update:onSeriesClick": null;
    "update:onSeriesHoverChanged": null;
    "update:onSeriesSelectionChanged": null;
    "update:onTooltipHidden": null;
    "update:onTooltipShown": null;
    "update:onZoomEnd": null;
    "update:onZoomStart": null;
    "update:palette": null;
    "update:paletteExtensionMode": null;
    "update:panes": null;
    "update:pathModified": null;
    "update:pointSelectionMode": null;
    "update:redrawOnResize": null;
    "update:resizePanesOnZoom": null;
    "update:resolveLabelOverlapping": null;
    "update:rotated": null;
    "update:rtlEnabled": null;
    "update:scrollBar": null;
    "update:series": null;
    "update:seriesSelectionMode": null;
    "update:seriesTemplate": null;
    "update:size": null;
    "update:stickyHovering": null;
    "update:synchronizeMultiAxes": null;
    "update:theme": null;
    "update:title": null;
    "update:tooltip": null;
    "update:valueAxis": null;
    "update:zoomAndPan": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    adaptiveLayout: PropType<Record<string, any>>;
    adjustOnZoom: BooleanConstructor;
    animation: PropType<boolean | Record<string, any>>;
    annotations: PropType<any[]>;
    argumentAxis: PropType<Record<string, any>>;
    autoHidePointMarkers: BooleanConstructor;
    barGroupPadding: NumberConstructor;
    barGroupWidth: NumberConstructor;
    commonAnnotationSettings: PropType<Record<string, any> | dxChartCommonAnnotationConfig>;
    commonAxisSettings: PropType<Record<string, any>>;
    commonPaneSettings: PropType<Record<string, any>>;
    commonSeriesSettings: PropType<Record<string, any>>;
    containerBackgroundColor: StringConstructor;
    crosshair: PropType<Record<string, any>>;
    customizeAnnotation: PropType<(annotation: dxChartAnnotationConfig | any) => dxChartAnnotationConfig>;
    customizeLabel: PropType<(pointInfo: any) => SeriesLabel>;
    customizePoint: PropType<(pointInfo: any) => SeriesPoint>;
    dataPrepareSettings: PropType<Record<string, any>>;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    defaultPane: StringConstructor;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    export: PropType<Record<string, any>>;
    legend: PropType<Record<string, any>>;
    loadingIndicator: PropType<Record<string, any>>;
    margin: PropType<Record<string, any>>;
    maxBubbleSize: NumberConstructor;
    minBubbleSize: NumberConstructor;
    negativesAsZeroes: BooleanConstructor;
    onArgumentAxisClick: PropType<(e: ArgumentAxisClickEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onDone: PropType<(e: DoneEvent) => void>;
    onDrawn: PropType<(e: DrawnEvent) => void>;
    onExported: PropType<(e: ExportedEvent) => void>;
    onExporting: PropType<(e: ExportingEvent) => void>;
    onFileSaving: PropType<(e: FileSavingEvent) => void>;
    onIncidentOccurred: PropType<(e: IncidentOccurredEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onLegendClick: PropType<(e: LegendClickEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onPointClick: PropType<(e: PointClickEvent) => void>;
    onPointHoverChanged: PropType<(e: PointHoverChangedEvent) => void>;
    onPointSelectionChanged: PropType<(e: PointSelectionChangedEvent) => void>;
    onSeriesClick: PropType<(e: SeriesClickEvent) => void>;
    onSeriesHoverChanged: PropType<(e: SeriesHoverChangedEvent) => void>;
    onSeriesSelectionChanged: PropType<(e: SeriesSelectionChangedEvent) => void>;
    onTooltipHidden: PropType<(e: TooltipHiddenEvent) => void>;
    onTooltipShown: PropType<(e: TooltipShownEvent) => void>;
    onZoomEnd: PropType<(e: ZoomEndEvent) => void>;
    onZoomStart: PropType<(e: ZoomStartEvent) => void>;
    palette: PropType<string[] | Palette>;
    paletteExtensionMode: PropType<PaletteExtensionMode>;
    panes: PropType<Record<string, any> | Record<string, any>[]>;
    pathModified: BooleanConstructor;
    pointSelectionMode: PropType<SingleOrMultiple>;
    redrawOnResize: BooleanConstructor;
    resizePanesOnZoom: BooleanConstructor;
    resolveLabelOverlapping: PropType<ChartsLabelOverlap>;
    rotated: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    scrollBar: PropType<Record<string, any>>;
    series: PropType<Record<string, any> | ChartSeries | ChartSeries[]>;
    seriesSelectionMode: PropType<SingleOrMultiple>;
    seriesTemplate: PropType<Record<string, any>>;
    size: PropType<Record<string, any>>;
    stickyHovering: BooleanConstructor;
    synchronizeMultiAxes: BooleanConstructor;
    theme: PropType<Theme>;
    title: PropType<string | Record<string, any>>;
    tooltip: PropType<Record<string, any>>;
    valueAxis: PropType<Record<string, any> | Record<string, any>[]>;
    zoomAndPan: PropType<Record<string, any>>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:animation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:export"?: ((...args: any[]) => any) | undefined;
    "onUpdate:legend"?: ((...args: any[]) => any) | undefined;
    "onUpdate:loadingIndicator"?: ((...args: any[]) => any) | undefined;
    "onUpdate:margin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDrawn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onExported"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onExporting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFileSaving"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onIncidentOccurred"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onTooltipHidden"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onTooltipShown"?: ((...args: any[]) => any) | undefined;
    "onUpdate:palette"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paletteExtensionMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pathModified"?: ((...args: any[]) => any) | undefined;
    "onUpdate:redrawOnResize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:resolveLabelOverlapping"?: ((...args: any[]) => any) | undefined;
    "onUpdate:size"?: ((...args: any[]) => any) | undefined;
    "onUpdate:theme"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tooltip"?: ((...args: any[]) => any) | undefined;
    "onUpdate:adaptiveLayout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:adjustOnZoom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:annotations"?: ((...args: any[]) => any) | undefined;
    "onUpdate:argumentAxis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:autoHidePointMarkers"?: ((...args: any[]) => any) | undefined;
    "onUpdate:barGroupPadding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:barGroupWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:commonAnnotationSettings"?: ((...args: any[]) => any) | undefined;
    "onUpdate:commonAxisSettings"?: ((...args: any[]) => any) | undefined;
    "onUpdate:commonPaneSettings"?: ((...args: any[]) => any) | undefined;
    "onUpdate:commonSeriesSettings"?: ((...args: any[]) => any) | undefined;
    "onUpdate:containerBackgroundColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:crosshair"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeAnnotation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeLabel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizePoint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataPrepareSettings"?: ((...args: any[]) => any) | undefined;
    "onUpdate:defaultPane"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxBubbleSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minBubbleSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:negativesAsZeroes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onArgumentAxisClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDone"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onLegendClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onPointClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onPointHoverChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onPointSelectionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSeriesClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSeriesHoverChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSeriesSelectionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onZoomEnd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onZoomStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:panes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pointSelectionMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:resizePanesOnZoom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rotated"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollBar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:series"?: ((...args: any[]) => any) | undefined;
    "onUpdate:seriesSelectionMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:seriesTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stickyHovering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:synchronizeMultiAxes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueAxis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:zoomAndPan"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    rtlEnabled: boolean;
    pathModified: boolean;
    redrawOnResize: boolean;
    adjustOnZoom: boolean;
    autoHidePointMarkers: boolean;
    negativesAsZeroes: boolean;
    resizePanesOnZoom: boolean;
    rotated: boolean;
    stickyHovering: boolean;
    synchronizeMultiAxes: boolean;
}>;
declare const DxAdaptiveLayout: import("@vue/runtime-core").DefineComponent<{
    height: NumberConstructor;
    keepLabels: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:height": null;
    "update:keepLabels": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    height: NumberConstructor;
    keepLabels: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:keepLabels"?: ((...args: any[]) => any) | undefined;
}, {
    keepLabels: boolean;
}>;
declare const DxAggregation: import("@vue/runtime-core").DefineComponent<{
    calculate: PropType<(aggregationInfo: chartPointAggregationInfoObject, series: chartSeriesObject) => Record<string, any> | Array<Record<string, any>>>;
    enabled: BooleanConstructor;
    method: PropType<ChartSeriesAggregationMethod>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:calculate": null;
    "update:enabled": null;
    "update:method": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    calculate: PropType<(aggregationInfo: chartPointAggregationInfoObject, series: chartSeriesObject) => Record<string, any> | Array<Record<string, any>>>;
    enabled: BooleanConstructor;
    method: PropType<ChartSeriesAggregationMethod>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:calculate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:method"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxAggregationInterval: import("@vue/runtime-core").DefineComponent<{
    days: NumberConstructor;
    hours: NumberConstructor;
    milliseconds: NumberConstructor;
    minutes: NumberConstructor;
    months: NumberConstructor;
    quarters: NumberConstructor;
    seconds: NumberConstructor;
    weeks: NumberConstructor;
    years: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:days": null;
    "update:hours": null;
    "update:milliseconds": null;
    "update:minutes": null;
    "update:months": null;
    "update:quarters": null;
    "update:seconds": null;
    "update:weeks": null;
    "update:years": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    days: NumberConstructor;
    hours: NumberConstructor;
    milliseconds: NumberConstructor;
    minutes: NumberConstructor;
    months: NumberConstructor;
    quarters: NumberConstructor;
    seconds: NumberConstructor;
    weeks: NumberConstructor;
    years: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:days"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hours"?: ((...args: any[]) => any) | undefined;
    "onUpdate:milliseconds"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minutes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:months"?: ((...args: any[]) => any) | undefined;
    "onUpdate:quarters"?: ((...args: any[]) => any) | undefined;
    "onUpdate:seconds"?: ((...args: any[]) => any) | undefined;
    "onUpdate:weeks"?: ((...args: any[]) => any) | undefined;
    "onUpdate:years"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxAnimation: import("@vue/runtime-core").DefineComponent<{
    duration: NumberConstructor;
    easing: PropType<AnimationEaseMode>;
    enabled: BooleanConstructor;
    maxPointCountSupported: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:duration": null;
    "update:easing": null;
    "update:enabled": null;
    "update:maxPointCountSupported": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    duration: NumberConstructor;
    easing: PropType<AnimationEaseMode>;
    enabled: BooleanConstructor;
    maxPointCountSupported: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:duration"?: ((...args: any[]) => any) | undefined;
    "onUpdate:easing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxPointCountSupported"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxAnnotation: import("@vue/runtime-core").DefineComponent<{
    allowDragging: BooleanConstructor;
    argument: (DateConstructor | NumberConstructor | StringConstructor)[];
    arrowLength: NumberConstructor;
    arrowWidth: NumberConstructor;
    axis: StringConstructor;
    border: PropType<Record<string, any>>;
    color: StringConstructor;
    customizeTooltip: PropType<(annotation: dxChartAnnotationConfig | any) => Record<string, any>>;
    data: {};
    description: StringConstructor;
    font: PropType<Record<string, any> | Font>;
    height: NumberConstructor;
    image: PropType<string | Record<string, any>>;
    name: StringConstructor;
    offsetX: NumberConstructor;
    offsetY: NumberConstructor;
    opacity: NumberConstructor;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    series: StringConstructor;
    shadow: PropType<Record<string, any>>;
    template: {};
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    tooltipEnabled: BooleanConstructor;
    tooltipTemplate: {};
    type: PropType<AnnotationType>;
    value: (DateConstructor | NumberConstructor | StringConstructor)[];
    width: NumberConstructor;
    wordWrap: PropType<WordWrap>;
    x: NumberConstructor;
    y: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowDragging": null;
    "update:argument": null;
    "update:arrowLength": null;
    "update:arrowWidth": null;
    "update:axis": null;
    "update:border": null;
    "update:color": null;
    "update:customizeTooltip": null;
    "update:data": null;
    "update:description": null;
    "update:font": null;
    "update:height": null;
    "update:image": null;
    "update:name": null;
    "update:offsetX": null;
    "update:offsetY": null;
    "update:opacity": null;
    "update:paddingLeftRight": null;
    "update:paddingTopBottom": null;
    "update:series": null;
    "update:shadow": null;
    "update:template": null;
    "update:text": null;
    "update:textOverflow": null;
    "update:tooltipEnabled": null;
    "update:tooltipTemplate": null;
    "update:type": null;
    "update:value": null;
    "update:width": null;
    "update:wordWrap": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowDragging: BooleanConstructor;
    argument: (DateConstructor | NumberConstructor | StringConstructor)[];
    arrowLength: NumberConstructor;
    arrowWidth: NumberConstructor;
    axis: StringConstructor;
    border: PropType<Record<string, any>>;
    color: StringConstructor;
    customizeTooltip: PropType<(annotation: dxChartAnnotationConfig | any) => Record<string, any>>;
    data: {};
    description: StringConstructor;
    font: PropType<Record<string, any> | Font>;
    height: NumberConstructor;
    image: PropType<string | Record<string, any>>;
    name: StringConstructor;
    offsetX: NumberConstructor;
    offsetY: NumberConstructor;
    opacity: NumberConstructor;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    series: StringConstructor;
    shadow: PropType<Record<string, any>>;
    template: {};
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    tooltipEnabled: BooleanConstructor;
    tooltipTemplate: {};
    type: PropType<AnnotationType>;
    value: (DateConstructor | NumberConstructor | StringConstructor)[];
    width: NumberConstructor;
    wordWrap: PropType<WordWrap>;
    x: NumberConstructor;
    y: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textOverflow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrap"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingLeftRight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingTopBottom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offsetX"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offsetY"?: ((...args: any[]) => any) | undefined;
    "onUpdate:arrowLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeTooltip"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shadow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:series"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowDragging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:argument"?: ((...args: any[]) => any) | undefined;
    "onUpdate:arrowWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:axis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:data"?: ((...args: any[]) => any) | undefined;
    "onUpdate:description"?: ((...args: any[]) => any) | undefined;
    "onUpdate:image"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tooltipEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tooltipTemplate"?: ((...args: any[]) => any) | undefined;
}, {
    allowDragging: boolean;
    tooltipEnabled: boolean;
}>;
declare const DxAnnotationBorder: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    cornerRadius: NumberConstructor;
    dashStyle: PropType<DashStyle>;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:cornerRadius": null;
    "update:dashStyle": null;
    "update:opacity": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    cornerRadius: NumberConstructor;
    dashStyle: PropType<DashStyle>;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cornerRadius"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxAnnotationImage: import("@vue/runtime-core").DefineComponent<{
    height: NumberConstructor;
    url: StringConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:height": null;
    "update:url": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    height: NumberConstructor;
    url: StringConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:url"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxArgumentAxis: import("@vue/runtime-core").DefineComponent<{
    aggregateByCategory: BooleanConstructor;
    aggregatedPointsPosition: PropType<AggregatedPointsPosition>;
    aggregationGroupWidth: NumberConstructor;
    aggregationInterval: PropType<number | Record<string, any> | TimeInterval>;
    allowDecimals: BooleanConstructor;
    argumentType: PropType<ChartsDataType>;
    axisDivisionFactor: NumberConstructor;
    breaks: PropType<ScaleBreak[]>;
    breakStyle: PropType<Record<string, any>>;
    categories: PropType<(string | number | Date)[]>;
    color: StringConstructor;
    constantLines: PropType<Record<string, any>[]>;
    constantLineStyle: PropType<Record<string, any>>;
    customPosition: (DateConstructor | NumberConstructor | StringConstructor)[];
    customPositionAxis: StringConstructor;
    discreteAxisDivisionMode: PropType<DiscreteAxisDivisionMode>;
    endOnTick: BooleanConstructor;
    grid: PropType<Record<string, any>>;
    holidays: PropType<number[] | (string | Date)[]>;
    hoverMode: PropType<ArgumentAxisHoverMode>;
    inverted: BooleanConstructor;
    label: PropType<Record<string, any>>;
    linearThreshold: NumberConstructor;
    logarithmBase: NumberConstructor;
    maxValueMargin: NumberConstructor;
    minorGrid: PropType<Record<string, any>>;
    minorTick: PropType<Record<string, any>>;
    minorTickCount: NumberConstructor;
    minorTickInterval: PropType<number | Record<string, any> | TimeInterval>;
    minValueMargin: NumberConstructor;
    minVisualRangeLength: PropType<number | Record<string, any> | TimeInterval>;
    offset: NumberConstructor;
    opacity: NumberConstructor;
    placeholderSize: NumberConstructor;
    position: PropType<Position>;
    singleWorkdays: PropType<number[] | (string | Date)[]>;
    strips: PropType<Record<string, any>[]>;
    stripStyle: PropType<Record<string, any>>;
    tick: PropType<Record<string, any>>;
    tickInterval: PropType<number | Record<string, any> | TimeInterval>;
    title: PropType<string | Record<string, any>>;
    type: PropType<AxisScaleType>;
    valueMarginsEnabled: BooleanConstructor;
    visible: BooleanConstructor;
    visualRange: PropType<Record<string, any> | (string | number | Date)[] | CommonChartTypes.VisualRange>;
    visualRangeUpdateMode: PropType<VisualRangeUpdateMode>;
    wholeRange: PropType<Record<string, any> | (string | number | Date)[] | CommonChartTypes.VisualRange>;
    width: NumberConstructor;
    workdaysOnly: BooleanConstructor;
    workWeek: PropType<number[]>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:aggregateByCategory": null;
    "update:aggregatedPointsPosition": null;
    "update:aggregationGroupWidth": null;
    "update:aggregationInterval": null;
    "update:allowDecimals": null;
    "update:argumentType": null;
    "update:axisDivisionFactor": null;
    "update:breaks": null;
    "update:breakStyle": null;
    "update:categories": null;
    "update:color": null;
    "update:constantLines": null;
    "update:constantLineStyle": null;
    "update:customPosition": null;
    "update:customPositionAxis": null;
    "update:discreteAxisDivisionMode": null;
    "update:endOnTick": null;
    "update:grid": null;
    "update:holidays": null;
    "update:hoverMode": null;
    "update:inverted": null;
    "update:label": null;
    "update:linearThreshold": null;
    "update:logarithmBase": null;
    "update:maxValueMargin": null;
    "update:minorGrid": null;
    "update:minorTick": null;
    "update:minorTickCount": null;
    "update:minorTickInterval": null;
    "update:minValueMargin": null;
    "update:minVisualRangeLength": null;
    "update:offset": null;
    "update:opacity": null;
    "update:placeholderSize": null;
    "update:position": null;
    "update:singleWorkdays": null;
    "update:strips": null;
    "update:stripStyle": null;
    "update:tick": null;
    "update:tickInterval": null;
    "update:title": null;
    "update:type": null;
    "update:valueMarginsEnabled": null;
    "update:visible": null;
    "update:visualRange": null;
    "update:visualRangeUpdateMode": null;
    "update:wholeRange": null;
    "update:width": null;
    "update:workdaysOnly": null;
    "update:workWeek": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    aggregateByCategory: BooleanConstructor;
    aggregatedPointsPosition: PropType<AggregatedPointsPosition>;
    aggregationGroupWidth: NumberConstructor;
    aggregationInterval: PropType<number | Record<string, any> | TimeInterval>;
    allowDecimals: BooleanConstructor;
    argumentType: PropType<ChartsDataType>;
    axisDivisionFactor: NumberConstructor;
    breaks: PropType<ScaleBreak[]>;
    breakStyle: PropType<Record<string, any>>;
    categories: PropType<(string | number | Date)[]>;
    color: StringConstructor;
    constantLines: PropType<Record<string, any>[]>;
    constantLineStyle: PropType<Record<string, any>>;
    customPosition: (DateConstructor | NumberConstructor | StringConstructor)[];
    customPositionAxis: StringConstructor;
    discreteAxisDivisionMode: PropType<DiscreteAxisDivisionMode>;
    endOnTick: BooleanConstructor;
    grid: PropType<Record<string, any>>;
    holidays: PropType<number[] | (string | Date)[]>;
    hoverMode: PropType<ArgumentAxisHoverMode>;
    inverted: BooleanConstructor;
    label: PropType<Record<string, any>>;
    linearThreshold: NumberConstructor;
    logarithmBase: NumberConstructor;
    maxValueMargin: NumberConstructor;
    minorGrid: PropType<Record<string, any>>;
    minorTick: PropType<Record<string, any>>;
    minorTickCount: NumberConstructor;
    minorTickInterval: PropType<number | Record<string, any> | TimeInterval>;
    minValueMargin: NumberConstructor;
    minVisualRangeLength: PropType<number | Record<string, any> | TimeInterval>;
    offset: NumberConstructor;
    opacity: NumberConstructor;
    placeholderSize: NumberConstructor;
    position: PropType<Position>;
    singleWorkdays: PropType<number[] | (string | Date)[]>;
    strips: PropType<Record<string, any>[]>;
    stripStyle: PropType<Record<string, any>>;
    tick: PropType<Record<string, any>>;
    tickInterval: PropType<number | Record<string, any> | TimeInterval>;
    title: PropType<string | Record<string, any>>;
    type: PropType<AxisScaleType>;
    valueMarginsEnabled: BooleanConstructor;
    visible: BooleanConstructor;
    visualRange: PropType<Record<string, any> | (string | number | Date)[] | CommonChartTypes.VisualRange>;
    visualRangeUpdateMode: PropType<VisualRangeUpdateMode>;
    wholeRange: PropType<Record<string, any> | (string | number | Date)[] | CommonChartTypes.VisualRange>;
    width: NumberConstructor;
    workdaysOnly: BooleanConstructor;
    workWeek: PropType<number[]>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholderSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:aggregateByCategory"?: ((...args: any[]) => any) | undefined;
    "onUpdate:aggregatedPointsPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:aggregationGroupWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:aggregationInterval"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowDecimals"?: ((...args: any[]) => any) | undefined;
    "onUpdate:argumentType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:axisDivisionFactor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:breaks"?: ((...args: any[]) => any) | undefined;
    "onUpdate:breakStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:categories"?: ((...args: any[]) => any) | undefined;
    "onUpdate:constantLines"?: ((...args: any[]) => any) | undefined;
    "onUpdate:constantLineStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customPositionAxis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:discreteAxisDivisionMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endOnTick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:grid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:holidays"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:inverted"?: ((...args: any[]) => any) | undefined;
    "onUpdate:linearThreshold"?: ((...args: any[]) => any) | undefined;
    "onUpdate:logarithmBase"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxValueMargin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minorGrid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minorTick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minorTickCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minorTickInterval"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minValueMargin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minVisualRangeLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:singleWorkdays"?: ((...args: any[]) => any) | undefined;
    "onUpdate:strips"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stripStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tickInterval"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueMarginsEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visualRange"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visualRangeUpdateMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wholeRange"?: ((...args: any[]) => any) | undefined;
    "onUpdate:workdaysOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:workWeek"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    aggregateByCategory: boolean;
    allowDecimals: boolean;
    endOnTick: boolean;
    inverted: boolean;
    valueMarginsEnabled: boolean;
    workdaysOnly: boolean;
}>;
declare const DxArgumentFormat: import("@vue/runtime-core").DefineComponent<{
    currency: StringConstructor;
    formatter: PropType<(value: number | Date) => string>;
    parser: PropType<(value: string) => number | Date>;
    precision: NumberConstructor;
    type: PropType<string>;
    useCurrencyAccountingStyle: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:currency": null;
    "update:formatter": null;
    "update:parser": null;
    "update:precision": null;
    "update:type": null;
    "update:useCurrencyAccountingStyle": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    currency: StringConstructor;
    formatter: PropType<(value: number | Date) => string>;
    parser: PropType<(value: string) => number | Date>;
    precision: NumberConstructor;
    type: PropType<string>;
    useCurrencyAccountingStyle: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:currency"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formatter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:parser"?: ((...args: any[]) => any) | undefined;
    "onUpdate:precision"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useCurrencyAccountingStyle"?: ((...args: any[]) => any) | undefined;
}, {
    useCurrencyAccountingStyle: boolean;
}>;
declare const DxAxisConstantLineStyle: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:label": null;
    "update:paddingLeftRight": null;
    "update:paddingTopBottom": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingLeftRight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingTopBottom"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxAxisConstantLineStyleLabel: import("@vue/runtime-core").DefineComponent<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    position: PropType<RelativePosition>;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:font": null;
    "update:horizontalAlignment": null;
    "update:position": null;
    "update:verticalAlignment": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    position: PropType<RelativePosition>;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxAxisLabel: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    customizeHint: PropType<(argument: {
        value: Date | number | string;
        valueText: string;
    }) => string>;
    customizeText: PropType<(argument: {
        value: Date | number | string;
        valueText: string;
    }) => string>;
    displayMode: PropType<ChartLabelDisplayMode>;
    font: PropType<Record<string, any> | Font>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    indentFromAxis: NumberConstructor;
    overlappingBehavior: PropType<ChartsAxisLabelOverlap>;
    position: PropType<Position | RelativePosition>;
    rotationAngle: NumberConstructor;
    staggeringSpacing: NumberConstructor;
    template: {};
    textOverflow: PropType<TextOverflow>;
    visible: BooleanConstructor;
    wordWrap: PropType<WordWrap>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:customizeHint": null;
    "update:customizeText": null;
    "update:displayMode": null;
    "update:font": null;
    "update:format": null;
    "update:indentFromAxis": null;
    "update:overlappingBehavior": null;
    "update:position": null;
    "update:rotationAngle": null;
    "update:staggeringSpacing": null;
    "update:template": null;
    "update:textOverflow": null;
    "update:visible": null;
    "update:wordWrap": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    customizeHint: PropType<(argument: {
        value: Date | number | string;
        valueText: string;
    }) => string>;
    customizeText: PropType<(argument: {
        value: Date | number | string;
        valueText: string;
    }) => string>;
    displayMode: PropType<ChartLabelDisplayMode>;
    font: PropType<Record<string, any> | Font>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    indentFromAxis: NumberConstructor;
    overlappingBehavior: PropType<ChartsAxisLabelOverlap>;
    position: PropType<Position | RelativePosition>;
    rotationAngle: NumberConstructor;
    staggeringSpacing: NumberConstructor;
    template: {};
    textOverflow: PropType<TextOverflow>;
    visible: BooleanConstructor;
    wordWrap: PropType<WordWrap>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textOverflow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrap"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:format"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeHint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:indentFromAxis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:overlappingBehavior"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rotationAngle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:staggeringSpacing"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxAxisTitle: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    font: PropType<Record<string, any> | Font>;
    margin: NumberConstructor;
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    wordWrap: PropType<WordWrap>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:font": null;
    "update:margin": null;
    "update:text": null;
    "update:textOverflow": null;
    "update:wordWrap": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    font: PropType<Record<string, any> | Font>;
    margin: NumberConstructor;
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    wordWrap: PropType<WordWrap>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:margin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textOverflow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrap"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxBackgroundColor: import("@vue/runtime-core").DefineComponent<{
    base: StringConstructor;
    fillId: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:base": null;
    "update:fillId": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    base: StringConstructor;
    fillId: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:base"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fillId"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxBorder: import("@vue/runtime-core").DefineComponent<{
    bottom: BooleanConstructor;
    color: StringConstructor;
    cornerRadius: NumberConstructor;
    dashStyle: PropType<DashStyle>;
    left: BooleanConstructor;
    opacity: NumberConstructor;
    right: BooleanConstructor;
    top: BooleanConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:bottom": null;
    "update:color": null;
    "update:cornerRadius": null;
    "update:dashStyle": null;
    "update:left": null;
    "update:opacity": null;
    "update:right": null;
    "update:top": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    bottom: BooleanConstructor;
    color: StringConstructor;
    cornerRadius: NumberConstructor;
    dashStyle: PropType<DashStyle>;
    left: BooleanConstructor;
    opacity: NumberConstructor;
    right: BooleanConstructor;
    top: BooleanConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:left"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:top"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cornerRadius"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bottom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:right"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    bottom: boolean;
    left: boolean;
    right: boolean;
    top: boolean;
}>;
declare const DxBreak: import("@vue/runtime-core").DefineComponent<{
    endValue: (DateConstructor | NumberConstructor | StringConstructor)[];
    startValue: (DateConstructor | NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:endValue": null;
    "update:startValue": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    endValue: (DateConstructor | NumberConstructor | StringConstructor)[];
    startValue: (DateConstructor | NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startValue"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxBreakStyle: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    line: PropType<ScaleBreakLineStyle>;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:line": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    line: PropType<ScaleBreakLineStyle>;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:line"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxChartTitle: import("@vue/runtime-core").DefineComponent<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    margin: PropType<number | Record<string, any>>;
    placeholderSize: NumberConstructor;
    subtitle: PropType<string | Record<string, any>>;
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    verticalAlignment: PropType<VerticalEdge>;
    wordWrap: PropType<WordWrap>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:font": null;
    "update:horizontalAlignment": null;
    "update:margin": null;
    "update:placeholderSize": null;
    "update:subtitle": null;
    "update:text": null;
    "update:textOverflow": null;
    "update:verticalAlignment": null;
    "update:wordWrap": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    margin: PropType<number | Record<string, any>>;
    placeholderSize: NumberConstructor;
    subtitle: PropType<string | Record<string, any>>;
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    verticalAlignment: PropType<VerticalEdge>;
    wordWrap: PropType<WordWrap>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:margin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholderSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:subtitle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textOverflow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrap"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxChartTitleSubtitle: import("@vue/runtime-core").DefineComponent<{
    font: PropType<Record<string, any> | Font>;
    offset: NumberConstructor;
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    wordWrap: PropType<WordWrap>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:font": null;
    "update:offset": null;
    "update:text": null;
    "update:textOverflow": null;
    "update:wordWrap": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    font: PropType<Record<string, any> | Font>;
    offset: NumberConstructor;
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    wordWrap: PropType<WordWrap>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textOverflow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrap"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxColor: import("@vue/runtime-core").DefineComponent<{
    base: StringConstructor;
    fillId: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:base": null;
    "update:fillId": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    base: StringConstructor;
    fillId: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:base"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fillId"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCommonAnnotationSettings: import("@vue/runtime-core").DefineComponent<{
    allowDragging: BooleanConstructor;
    argument: (DateConstructor | NumberConstructor | StringConstructor)[];
    arrowLength: NumberConstructor;
    arrowWidth: NumberConstructor;
    axis: StringConstructor;
    border: PropType<Record<string, any>>;
    color: StringConstructor;
    customizeTooltip: PropType<(annotation: dxChartAnnotationConfig | any) => Record<string, any>>;
    data: {};
    description: StringConstructor;
    font: PropType<Record<string, any> | Font>;
    height: NumberConstructor;
    image: PropType<string | Record<string, any>>;
    offsetX: NumberConstructor;
    offsetY: NumberConstructor;
    opacity: NumberConstructor;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    series: StringConstructor;
    shadow: PropType<Record<string, any>>;
    template: {};
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    tooltipEnabled: BooleanConstructor;
    tooltipTemplate: {};
    type: PropType<AnnotationType>;
    value: (DateConstructor | NumberConstructor | StringConstructor)[];
    width: NumberConstructor;
    wordWrap: PropType<WordWrap>;
    x: NumberConstructor;
    y: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowDragging": null;
    "update:argument": null;
    "update:arrowLength": null;
    "update:arrowWidth": null;
    "update:axis": null;
    "update:border": null;
    "update:color": null;
    "update:customizeTooltip": null;
    "update:data": null;
    "update:description": null;
    "update:font": null;
    "update:height": null;
    "update:image": null;
    "update:offsetX": null;
    "update:offsetY": null;
    "update:opacity": null;
    "update:paddingLeftRight": null;
    "update:paddingTopBottom": null;
    "update:series": null;
    "update:shadow": null;
    "update:template": null;
    "update:text": null;
    "update:textOverflow": null;
    "update:tooltipEnabled": null;
    "update:tooltipTemplate": null;
    "update:type": null;
    "update:value": null;
    "update:width": null;
    "update:wordWrap": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowDragging: BooleanConstructor;
    argument: (DateConstructor | NumberConstructor | StringConstructor)[];
    arrowLength: NumberConstructor;
    arrowWidth: NumberConstructor;
    axis: StringConstructor;
    border: PropType<Record<string, any>>;
    color: StringConstructor;
    customizeTooltip: PropType<(annotation: dxChartAnnotationConfig | any) => Record<string, any>>;
    data: {};
    description: StringConstructor;
    font: PropType<Record<string, any> | Font>;
    height: NumberConstructor;
    image: PropType<string | Record<string, any>>;
    offsetX: NumberConstructor;
    offsetY: NumberConstructor;
    opacity: NumberConstructor;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    series: StringConstructor;
    shadow: PropType<Record<string, any>>;
    template: {};
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    tooltipEnabled: BooleanConstructor;
    tooltipTemplate: {};
    type: PropType<AnnotationType>;
    value: (DateConstructor | NumberConstructor | StringConstructor)[];
    width: NumberConstructor;
    wordWrap: PropType<WordWrap>;
    x: NumberConstructor;
    y: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textOverflow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrap"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingLeftRight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingTopBottom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offsetX"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offsetY"?: ((...args: any[]) => any) | undefined;
    "onUpdate:arrowLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeTooltip"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shadow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:series"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowDragging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:argument"?: ((...args: any[]) => any) | undefined;
    "onUpdate:arrowWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:axis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:data"?: ((...args: any[]) => any) | undefined;
    "onUpdate:description"?: ((...args: any[]) => any) | undefined;
    "onUpdate:image"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tooltipEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tooltipTemplate"?: ((...args: any[]) => any) | undefined;
}, {
    allowDragging: boolean;
    tooltipEnabled: boolean;
}>;
declare const DxCommonAxisSettings: import("@vue/runtime-core").DefineComponent<{
    aggregatedPointsPosition: PropType<AggregatedPointsPosition>;
    allowDecimals: BooleanConstructor;
    breakStyle: PropType<Record<string, any>>;
    color: StringConstructor;
    constantLineStyle: PropType<Record<string, any>>;
    discreteAxisDivisionMode: PropType<DiscreteAxisDivisionMode>;
    endOnTick: BooleanConstructor;
    grid: PropType<Record<string, any>>;
    inverted: BooleanConstructor;
    label: PropType<Record<string, any>>;
    maxValueMargin: NumberConstructor;
    minorGrid: PropType<Record<string, any>>;
    minorTick: PropType<Record<string, any>>;
    minValueMargin: NumberConstructor;
    opacity: NumberConstructor;
    placeholderSize: NumberConstructor;
    stripStyle: PropType<Record<string, any>>;
    tick: PropType<Record<string, any>>;
    title: PropType<Record<string, any>>;
    valueMarginsEnabled: BooleanConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:aggregatedPointsPosition": null;
    "update:allowDecimals": null;
    "update:breakStyle": null;
    "update:color": null;
    "update:constantLineStyle": null;
    "update:discreteAxisDivisionMode": null;
    "update:endOnTick": null;
    "update:grid": null;
    "update:inverted": null;
    "update:label": null;
    "update:maxValueMargin": null;
    "update:minorGrid": null;
    "update:minorTick": null;
    "update:minValueMargin": null;
    "update:opacity": null;
    "update:placeholderSize": null;
    "update:stripStyle": null;
    "update:tick": null;
    "update:title": null;
    "update:valueMarginsEnabled": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    aggregatedPointsPosition: PropType<AggregatedPointsPosition>;
    allowDecimals: BooleanConstructor;
    breakStyle: PropType<Record<string, any>>;
    color: StringConstructor;
    constantLineStyle: PropType<Record<string, any>>;
    discreteAxisDivisionMode: PropType<DiscreteAxisDivisionMode>;
    endOnTick: BooleanConstructor;
    grid: PropType<Record<string, any>>;
    inverted: BooleanConstructor;
    label: PropType<Record<string, any>>;
    maxValueMargin: NumberConstructor;
    minorGrid: PropType<Record<string, any>>;
    minorTick: PropType<Record<string, any>>;
    minValueMargin: NumberConstructor;
    opacity: NumberConstructor;
    placeholderSize: NumberConstructor;
    stripStyle: PropType<Record<string, any>>;
    tick: PropType<Record<string, any>>;
    title: PropType<Record<string, any>>;
    valueMarginsEnabled: BooleanConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholderSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:aggregatedPointsPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowDecimals"?: ((...args: any[]) => any) | undefined;
    "onUpdate:breakStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:constantLineStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:discreteAxisDivisionMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endOnTick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:grid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:inverted"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxValueMargin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minorGrid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minorTick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minValueMargin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stripStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueMarginsEnabled"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    allowDecimals: boolean;
    endOnTick: boolean;
    inverted: boolean;
    valueMarginsEnabled: boolean;
}>;
declare const DxCommonAxisSettingsConstantLineStyle: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:label": null;
    "update:paddingLeftRight": null;
    "update:paddingTopBottom": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingLeftRight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingTopBottom"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCommonAxisSettingsConstantLineStyleLabel: import("@vue/runtime-core").DefineComponent<{
    font: PropType<Record<string, any> | Font>;
    position: PropType<RelativePosition>;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:font": null;
    "update:position": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    font: PropType<Record<string, any> | Font>;
    position: PropType<RelativePosition>;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxCommonAxisSettingsLabel: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    displayMode: PropType<ChartLabelDisplayMode>;
    font: PropType<Record<string, any> | Font>;
    indentFromAxis: NumberConstructor;
    overlappingBehavior: PropType<ChartsAxisLabelOverlap>;
    position: PropType<Position | RelativePosition>;
    rotationAngle: NumberConstructor;
    staggeringSpacing: NumberConstructor;
    template: {};
    textOverflow: PropType<TextOverflow>;
    visible: BooleanConstructor;
    wordWrap: PropType<WordWrap>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:displayMode": null;
    "update:font": null;
    "update:indentFromAxis": null;
    "update:overlappingBehavior": null;
    "update:position": null;
    "update:rotationAngle": null;
    "update:staggeringSpacing": null;
    "update:template": null;
    "update:textOverflow": null;
    "update:visible": null;
    "update:wordWrap": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    displayMode: PropType<ChartLabelDisplayMode>;
    font: PropType<Record<string, any> | Font>;
    indentFromAxis: NumberConstructor;
    overlappingBehavior: PropType<ChartsAxisLabelOverlap>;
    position: PropType<Position | RelativePosition>;
    rotationAngle: NumberConstructor;
    staggeringSpacing: NumberConstructor;
    template: {};
    textOverflow: PropType<TextOverflow>;
    visible: BooleanConstructor;
    wordWrap: PropType<WordWrap>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textOverflow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrap"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:indentFromAxis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:overlappingBehavior"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rotationAngle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:staggeringSpacing"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxCommonAxisSettingsTitle: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    font: PropType<Record<string, any> | Font>;
    margin: NumberConstructor;
    textOverflow: PropType<TextOverflow>;
    wordWrap: PropType<WordWrap>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:font": null;
    "update:margin": null;
    "update:textOverflow": null;
    "update:wordWrap": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    font: PropType<Record<string, any> | Font>;
    margin: NumberConstructor;
    textOverflow: PropType<TextOverflow>;
    wordWrap: PropType<WordWrap>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:margin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textOverflow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrap"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCommonPaneSettings: import("@vue/runtime-core").DefineComponent<{
    backgroundColor: PropType<string | Record<string, any> | ChartsColor>;
    border: PropType<Record<string, any>>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:backgroundColor": null;
    "update:border": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    backgroundColor: PropType<string | Record<string, any> | ChartsColor>;
    border: PropType<Record<string, any>>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:backgroundColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCommonSeriesSettings: import("@vue/runtime-core").DefineComponent<{
    aggregation: PropType<Record<string, any>>;
    area: {};
    argumentField: StringConstructor;
    axis: StringConstructor;
    bar: {};
    barOverlapGroup: StringConstructor;
    barPadding: NumberConstructor;
    barWidth: NumberConstructor;
    border: PropType<Record<string, any>>;
    bubble: {};
    candlestick: {};
    closeValueField: StringConstructor;
    color: PropType<string | Record<string, any> | ChartsColor>;
    cornerRadius: NumberConstructor;
    dashStyle: PropType<DashStyle>;
    fullstackedarea: {};
    fullstackedbar: {};
    fullstackedline: {};
    fullstackedspline: {};
    fullstackedsplinearea: {};
    highValueField: StringConstructor;
    hoverMode: PropType<SeriesHoverMode>;
    hoverStyle: PropType<Record<string, any>>;
    ignoreEmptyPoints: BooleanConstructor;
    innerColor: StringConstructor;
    label: PropType<Record<string, any>>;
    line: {};
    lowValueField: StringConstructor;
    maxLabelCount: NumberConstructor;
    minBarSize: NumberConstructor;
    opacity: NumberConstructor;
    openValueField: StringConstructor;
    pane: StringConstructor;
    point: PropType<Record<string, any>>;
    rangearea: {};
    rangebar: {};
    rangeValue1Field: StringConstructor;
    rangeValue2Field: StringConstructor;
    reduction: PropType<Record<string, any>>;
    scatter: {};
    selectionMode: PropType<SeriesSelectionMode>;
    selectionStyle: PropType<Record<string, any>>;
    showInLegend: BooleanConstructor;
    sizeField: StringConstructor;
    spline: {};
    splinearea: {};
    stack: StringConstructor;
    stackedarea: {};
    stackedbar: {};
    stackedline: {};
    stackedspline: {};
    stackedsplinearea: {};
    steparea: {};
    stepline: {};
    stock: {};
    tagField: StringConstructor;
    type: PropType<SeriesType>;
    valueErrorBar: PropType<Record<string, any>>;
    valueField: StringConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:aggregation": null;
    "update:area": null;
    "update:argumentField": null;
    "update:axis": null;
    "update:bar": null;
    "update:barOverlapGroup": null;
    "update:barPadding": null;
    "update:barWidth": null;
    "update:border": null;
    "update:bubble": null;
    "update:candlestick": null;
    "update:closeValueField": null;
    "update:color": null;
    "update:cornerRadius": null;
    "update:dashStyle": null;
    "update:fullstackedarea": null;
    "update:fullstackedbar": null;
    "update:fullstackedline": null;
    "update:fullstackedspline": null;
    "update:fullstackedsplinearea": null;
    "update:highValueField": null;
    "update:hoverMode": null;
    "update:hoverStyle": null;
    "update:ignoreEmptyPoints": null;
    "update:innerColor": null;
    "update:label": null;
    "update:line": null;
    "update:lowValueField": null;
    "update:maxLabelCount": null;
    "update:minBarSize": null;
    "update:opacity": null;
    "update:openValueField": null;
    "update:pane": null;
    "update:point": null;
    "update:rangearea": null;
    "update:rangebar": null;
    "update:rangeValue1Field": null;
    "update:rangeValue2Field": null;
    "update:reduction": null;
    "update:scatter": null;
    "update:selectionMode": null;
    "update:selectionStyle": null;
    "update:showInLegend": null;
    "update:sizeField": null;
    "update:spline": null;
    "update:splinearea": null;
    "update:stack": null;
    "update:stackedarea": null;
    "update:stackedbar": null;
    "update:stackedline": null;
    "update:stackedspline": null;
    "update:stackedsplinearea": null;
    "update:steparea": null;
    "update:stepline": null;
    "update:stock": null;
    "update:tagField": null;
    "update:type": null;
    "update:valueErrorBar": null;
    "update:valueField": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    aggregation: PropType<Record<string, any>>;
    area: {};
    argumentField: StringConstructor;
    axis: StringConstructor;
    bar: {};
    barOverlapGroup: StringConstructor;
    barPadding: NumberConstructor;
    barWidth: NumberConstructor;
    border: PropType<Record<string, any>>;
    bubble: {};
    candlestick: {};
    closeValueField: StringConstructor;
    color: PropType<string | Record<string, any> | ChartsColor>;
    cornerRadius: NumberConstructor;
    dashStyle: PropType<DashStyle>;
    fullstackedarea: {};
    fullstackedbar: {};
    fullstackedline: {};
    fullstackedspline: {};
    fullstackedsplinearea: {};
    highValueField: StringConstructor;
    hoverMode: PropType<SeriesHoverMode>;
    hoverStyle: PropType<Record<string, any>>;
    ignoreEmptyPoints: BooleanConstructor;
    innerColor: StringConstructor;
    label: PropType<Record<string, any>>;
    line: {};
    lowValueField: StringConstructor;
    maxLabelCount: NumberConstructor;
    minBarSize: NumberConstructor;
    opacity: NumberConstructor;
    openValueField: StringConstructor;
    pane: StringConstructor;
    point: PropType<Record<string, any>>;
    rangearea: {};
    rangebar: {};
    rangeValue1Field: StringConstructor;
    rangeValue2Field: StringConstructor;
    reduction: PropType<Record<string, any>>;
    scatter: {};
    selectionMode: PropType<SeriesSelectionMode>;
    selectionStyle: PropType<Record<string, any>>;
    showInLegend: BooleanConstructor;
    sizeField: StringConstructor;
    spline: {};
    splinearea: {};
    stack: StringConstructor;
    stackedarea: {};
    stackedbar: {};
    stackedline: {};
    stackedspline: {};
    stackedsplinearea: {};
    steparea: {};
    stepline: {};
    stock: {};
    tagField: StringConstructor;
    type: PropType<SeriesType>;
    valueErrorBar: PropType<Record<string, any>>;
    valueField: StringConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cornerRadius"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectionMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:axis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:line"?: ((...args: any[]) => any) | undefined;
    "onUpdate:aggregation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:area"?: ((...args: any[]) => any) | undefined;
    "onUpdate:argumentField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:barOverlapGroup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:barPadding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:barWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bubble"?: ((...args: any[]) => any) | undefined;
    "onUpdate:candlestick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:closeValueField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fullstackedarea"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fullstackedbar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fullstackedline"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fullstackedspline"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fullstackedsplinearea"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highValueField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyPoints"?: ((...args: any[]) => any) | undefined;
    "onUpdate:innerColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lowValueField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxLabelCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minBarSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:openValueField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pane"?: ((...args: any[]) => any) | undefined;
    "onUpdate:point"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangearea"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangebar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangeValue1Field"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangeValue2Field"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reduction"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scatter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectionStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showInLegend"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sizeField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:spline"?: ((...args: any[]) => any) | undefined;
    "onUpdate:splinearea"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stack"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stackedarea"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stackedbar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stackedline"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stackedspline"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stackedsplinearea"?: ((...args: any[]) => any) | undefined;
    "onUpdate:steparea"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stepline"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stock"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tagField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueErrorBar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueField"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    ignoreEmptyPoints: boolean;
    showInLegend: boolean;
}>;
declare const DxCommonSeriesSettingsHoverStyle: import("@vue/runtime-core").DefineComponent<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    dashStyle: PropType<DashStyle>;
    hatching: PropType<Record<string, any>>;
    highlight: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:border": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:hatching": null;
    "update:highlight": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    dashStyle: PropType<DashStyle>;
    hatching: PropType<Record<string, any>>;
    highlight: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hatching"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highlight"?: ((...args: any[]) => any) | undefined;
}, {
    highlight: boolean;
}>;
declare const DxCommonSeriesSettingsLabel: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    argumentFormat: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    backgroundColor: StringConstructor;
    border: PropType<Record<string, any>>;
    connector: PropType<Record<string, any>>;
    customizeText: PropType<(pointInfo: any) => string>;
    displayFormat: StringConstructor;
    font: PropType<Record<string, any> | Font>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    horizontalOffset: NumberConstructor;
    position: PropType<RelativePosition>;
    rotationAngle: NumberConstructor;
    showForZeroValues: BooleanConstructor;
    verticalOffset: NumberConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:argumentFormat": null;
    "update:backgroundColor": null;
    "update:border": null;
    "update:connector": null;
    "update:customizeText": null;
    "update:displayFormat": null;
    "update:font": null;
    "update:format": null;
    "update:horizontalOffset": null;
    "update:position": null;
    "update:rotationAngle": null;
    "update:showForZeroValues": null;
    "update:verticalOffset": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    argumentFormat: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    backgroundColor: StringConstructor;
    border: PropType<Record<string, any>>;
    connector: PropType<Record<string, any>>;
    customizeText: PropType<(pointInfo: any) => string>;
    displayFormat: StringConstructor;
    font: PropType<Record<string, any> | Font>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    horizontalOffset: NumberConstructor;
    position: PropType<RelativePosition>;
    rotationAngle: NumberConstructor;
    showForZeroValues: BooleanConstructor;
    verticalOffset: NumberConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:backgroundColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:format"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rotationAngle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:argumentFormat"?: ((...args: any[]) => any) | undefined;
    "onUpdate:connector"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayFormat"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalOffset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showForZeroValues"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalOffset"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    showForZeroValues: boolean;
}>;
declare const DxCommonSeriesSettingsSelectionStyle: import("@vue/runtime-core").DefineComponent<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    dashStyle: PropType<DashStyle>;
    hatching: PropType<Record<string, any>>;
    highlight: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:border": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:hatching": null;
    "update:highlight": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    dashStyle: PropType<DashStyle>;
    hatching: PropType<Record<string, any>>;
    highlight: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hatching"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highlight"?: ((...args: any[]) => any) | undefined;
}, {
    highlight: boolean;
}>;
declare const DxConnector: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxConstantLine: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    displayBehindSeries: BooleanConstructor;
    extendAxis: BooleanConstructor;
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    value: (DateConstructor | NumberConstructor | StringConstructor)[];
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:displayBehindSeries": null;
    "update:extendAxis": null;
    "update:label": null;
    "update:paddingLeftRight": null;
    "update:paddingTopBottom": null;
    "update:value": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    displayBehindSeries: BooleanConstructor;
    extendAxis: BooleanConstructor;
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    value: (DateConstructor | NumberConstructor | StringConstructor)[];
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingLeftRight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingTopBottom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayBehindSeries"?: ((...args: any[]) => any) | undefined;
    "onUpdate:extendAxis"?: ((...args: any[]) => any) | undefined;
}, {
    displayBehindSeries: boolean;
    extendAxis: boolean;
}>;
declare const DxConstantLineLabel: import("@vue/runtime-core").DefineComponent<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    position: PropType<RelativePosition>;
    text: StringConstructor;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:font": null;
    "update:horizontalAlignment": null;
    "update:position": null;
    "update:text": null;
    "update:verticalAlignment": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    position: PropType<RelativePosition>;
    text: StringConstructor;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxConstantLineStyle: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:label": null;
    "update:paddingLeftRight": null;
    "update:paddingTopBottom": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingLeftRight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingTopBottom"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCrosshair: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    enabled: BooleanConstructor;
    horizontalLine: PropType<boolean | Record<string, any>>;
    label: PropType<Record<string, any>>;
    opacity: NumberConstructor;
    verticalLine: PropType<boolean | Record<string, any>>;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:enabled": null;
    "update:horizontalLine": null;
    "update:label": null;
    "update:opacity": null;
    "update:verticalLine": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    enabled: BooleanConstructor;
    horizontalLine: PropType<boolean | Record<string, any>>;
    label: PropType<Record<string, any>>;
    opacity: NumberConstructor;
    verticalLine: PropType<boolean | Record<string, any>>;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalLine"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalLine"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
}>;
declare const DxDataPrepareSettings: import("@vue/runtime-core").DefineComponent<{
    checkTypeForAllData: BooleanConstructor;
    convertToAxisDataType: BooleanConstructor;
    sortingMethod: PropType<boolean | ((a: any, b: any) => number)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:checkTypeForAllData": null;
    "update:convertToAxisDataType": null;
    "update:sortingMethod": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    checkTypeForAllData: BooleanConstructor;
    convertToAxisDataType: BooleanConstructor;
    sortingMethod: PropType<boolean | ((a: any, b: any) => number)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:checkTypeForAllData"?: ((...args: any[]) => any) | undefined;
    "onUpdate:convertToAxisDataType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortingMethod"?: ((...args: any[]) => any) | undefined;
}, {
    checkTypeForAllData: boolean;
    convertToAxisDataType: boolean;
}>;
declare const DxDragBoxStyle: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    opacity: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:opacity": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    opacity: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxExport: import("@vue/runtime-core").DefineComponent<{
    backgroundColor: StringConstructor;
    enabled: BooleanConstructor;
    fileName: StringConstructor;
    formats: PropType<ExportFormat[]>;
    margin: NumberConstructor;
    printingEnabled: BooleanConstructor;
    svgToCanvas: PropType<(svg: any, canvas: any) => any>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:backgroundColor": null;
    "update:enabled": null;
    "update:fileName": null;
    "update:formats": null;
    "update:margin": null;
    "update:printingEnabled": null;
    "update:svgToCanvas": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    backgroundColor: StringConstructor;
    enabled: BooleanConstructor;
    fileName: StringConstructor;
    formats: PropType<ExportFormat[]>;
    margin: NumberConstructor;
    printingEnabled: BooleanConstructor;
    svgToCanvas: PropType<(svg: any, canvas: any) => any>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:backgroundColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:margin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fileName"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formats"?: ((...args: any[]) => any) | undefined;
    "onUpdate:printingEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:svgToCanvas"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
    printingEnabled: boolean;
}>;
declare const DxFont: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    family: StringConstructor;
    opacity: NumberConstructor;
    size: (NumberConstructor | StringConstructor)[];
    weight: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:family": null;
    "update:opacity": null;
    "update:size": null;
    "update:weight": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    family: StringConstructor;
    opacity: NumberConstructor;
    size: (NumberConstructor | StringConstructor)[];
    weight: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:size"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:family"?: ((...args: any[]) => any) | undefined;
    "onUpdate:weight"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxFormat: import("@vue/runtime-core").DefineComponent<{
    currency: StringConstructor;
    formatter: PropType<(value: number | Date) => string>;
    parser: PropType<(value: string) => number | Date>;
    precision: NumberConstructor;
    type: PropType<string>;
    useCurrencyAccountingStyle: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:currency": null;
    "update:formatter": null;
    "update:parser": null;
    "update:precision": null;
    "update:type": null;
    "update:useCurrencyAccountingStyle": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    currency: StringConstructor;
    formatter: PropType<(value: number | Date) => string>;
    parser: PropType<(value: string) => number | Date>;
    precision: NumberConstructor;
    type: PropType<string>;
    useCurrencyAccountingStyle: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:currency"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formatter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:parser"?: ((...args: any[]) => any) | undefined;
    "onUpdate:precision"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useCurrencyAccountingStyle"?: ((...args: any[]) => any) | undefined;
}, {
    useCurrencyAccountingStyle: boolean;
}>;
declare const DxGrid: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:opacity": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxHatching: import("@vue/runtime-core").DefineComponent<{
    direction: PropType<HatchDirection>;
    opacity: NumberConstructor;
    step: NumberConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:direction": null;
    "update:opacity": null;
    "update:step": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    direction: PropType<HatchDirection>;
    opacity: NumberConstructor;
    step: NumberConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:direction"?: ((...args: any[]) => any) | undefined;
    "onUpdate:step"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxHeight: import("@vue/runtime-core").DefineComponent<{
    rangeMaxPoint: NumberConstructor;
    rangeMinPoint: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:rangeMaxPoint": null;
    "update:rangeMinPoint": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    rangeMaxPoint: NumberConstructor;
    rangeMinPoint: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangeMaxPoint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangeMinPoint"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxHorizontalLine: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    label: PropType<Record<string, any>>;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:label": null;
    "update:opacity": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    label: PropType<Record<string, any>>;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxHorizontalLineLabel: import("@vue/runtime-core").DefineComponent<{
    backgroundColor: StringConstructor;
    customizeText: PropType<(info: {
        point: chartPointObject;
        value: Date | number | string;
        valueText: string;
    }) => string>;
    font: PropType<Record<string, any> | Font>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:backgroundColor": null;
    "update:customizeText": null;
    "update:font": null;
    "update:format": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    backgroundColor: StringConstructor;
    customizeText: PropType<(info: {
        point: chartPointObject;
        value: Date | number | string;
        valueText: string;
    }) => string>;
    font: PropType<Record<string, any> | Font>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:backgroundColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:format"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxHoverStyle: import("@vue/runtime-core").DefineComponent<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    dashStyle: PropType<DashStyle>;
    hatching: PropType<Record<string, any>>;
    highlight: BooleanConstructor;
    size: NumberConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:border": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:hatching": null;
    "update:highlight": null;
    "update:size": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    dashStyle: PropType<DashStyle>;
    hatching: PropType<Record<string, any>>;
    highlight: BooleanConstructor;
    size: NumberConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:size"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hatching"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highlight"?: ((...args: any[]) => any) | undefined;
}, {
    highlight: boolean;
}>;
declare const DxImage: import("@vue/runtime-core").DefineComponent<{
    height: PropType<number | Record<string, any>>;
    url: PropType<string | Record<string, any>>;
    width: PropType<number | Record<string, any>>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:height": null;
    "update:url": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    height: PropType<number | Record<string, any>>;
    url: PropType<string | Record<string, any>>;
    width: PropType<number | Record<string, any>>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:url"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxLabel: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    argumentFormat: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    backgroundColor: StringConstructor;
    border: PropType<Record<string, any>>;
    connector: PropType<Record<string, any>>;
    customizeHint: PropType<(argument: {
        value: Date | number | string;
        valueText: string;
    }) => string>;
    customizeText: PropType<(argument: {
        value: Date | number | string;
        valueText: string;
    }) => string>;
    displayFormat: StringConstructor;
    displayMode: PropType<ChartLabelDisplayMode>;
    font: PropType<Record<string, any> | Font>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    horizontalOffset: NumberConstructor;
    indentFromAxis: NumberConstructor;
    overlappingBehavior: PropType<ChartsAxisLabelOverlap>;
    position: PropType<Position | RelativePosition>;
    rotationAngle: NumberConstructor;
    showForZeroValues: BooleanConstructor;
    staggeringSpacing: NumberConstructor;
    template: {};
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    verticalAlignment: PropType<VerticalAlignment>;
    verticalOffset: NumberConstructor;
    visible: BooleanConstructor;
    wordWrap: PropType<WordWrap>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:argumentFormat": null;
    "update:backgroundColor": null;
    "update:border": null;
    "update:connector": null;
    "update:customizeHint": null;
    "update:customizeText": null;
    "update:displayFormat": null;
    "update:displayMode": null;
    "update:font": null;
    "update:format": null;
    "update:horizontalAlignment": null;
    "update:horizontalOffset": null;
    "update:indentFromAxis": null;
    "update:overlappingBehavior": null;
    "update:position": null;
    "update:rotationAngle": null;
    "update:showForZeroValues": null;
    "update:staggeringSpacing": null;
    "update:template": null;
    "update:text": null;
    "update:textOverflow": null;
    "update:verticalAlignment": null;
    "update:verticalOffset": null;
    "update:visible": null;
    "update:wordWrap": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    argumentFormat: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    backgroundColor: StringConstructor;
    border: PropType<Record<string, any>>;
    connector: PropType<Record<string, any>>;
    customizeHint: PropType<(argument: {
        value: Date | number | string;
        valueText: string;
    }) => string>;
    customizeText: PropType<(argument: {
        value: Date | number | string;
        valueText: string;
    }) => string>;
    displayFormat: StringConstructor;
    displayMode: PropType<ChartLabelDisplayMode>;
    font: PropType<Record<string, any> | Font>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    horizontalOffset: NumberConstructor;
    indentFromAxis: NumberConstructor;
    overlappingBehavior: PropType<ChartsAxisLabelOverlap>;
    position: PropType<Position | RelativePosition>;
    rotationAngle: NumberConstructor;
    showForZeroValues: BooleanConstructor;
    staggeringSpacing: NumberConstructor;
    template: {};
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    verticalAlignment: PropType<VerticalAlignment>;
    verticalOffset: NumberConstructor;
    visible: BooleanConstructor;
    wordWrap: PropType<WordWrap>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:backgroundColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textOverflow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrap"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:format"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeHint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:indentFromAxis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:overlappingBehavior"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rotationAngle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:staggeringSpacing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:argumentFormat"?: ((...args: any[]) => any) | undefined;
    "onUpdate:connector"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayFormat"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalOffset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showForZeroValues"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalOffset"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    showForZeroValues: boolean;
}>;
declare const DxLegend: import("@vue/runtime-core").DefineComponent<{
    backgroundColor: StringConstructor;
    border: PropType<Record<string, any>>;
    columnCount: NumberConstructor;
    columnItemSpacing: NumberConstructor;
    customizeHint: PropType<(seriesInfo: {
        seriesColor: string;
        seriesIndex: number;
        seriesName: any;
    }) => string>;
    customizeItems: PropType<(items: Array<LegendItem>) => Array<LegendItem>>;
    customizeText: PropType<(seriesInfo: {
        seriesColor: string;
        seriesIndex: number;
        seriesName: any;
    }) => string>;
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    hoverMode: PropType<LegendHoverMode>;
    itemsAlignment: PropType<HorizontalAlignment>;
    itemTextPosition: PropType<Position>;
    margin: PropType<number | Record<string, any>>;
    markerSize: NumberConstructor;
    markerTemplate: {};
    orientation: PropType<Orientation>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    position: PropType<RelativePosition>;
    rowCount: NumberConstructor;
    rowItemSpacing: NumberConstructor;
    title: PropType<string | Record<string, any>>;
    verticalAlignment: PropType<VerticalEdge>;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:backgroundColor": null;
    "update:border": null;
    "update:columnCount": null;
    "update:columnItemSpacing": null;
    "update:customizeHint": null;
    "update:customizeItems": null;
    "update:customizeText": null;
    "update:font": null;
    "update:horizontalAlignment": null;
    "update:hoverMode": null;
    "update:itemsAlignment": null;
    "update:itemTextPosition": null;
    "update:margin": null;
    "update:markerSize": null;
    "update:markerTemplate": null;
    "update:orientation": null;
    "update:paddingLeftRight": null;
    "update:paddingTopBottom": null;
    "update:position": null;
    "update:rowCount": null;
    "update:rowItemSpacing": null;
    "update:title": null;
    "update:verticalAlignment": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    backgroundColor: StringConstructor;
    border: PropType<Record<string, any>>;
    columnCount: NumberConstructor;
    columnItemSpacing: NumberConstructor;
    customizeHint: PropType<(seriesInfo: {
        seriesColor: string;
        seriesIndex: number;
        seriesName: any;
    }) => string>;
    customizeItems: PropType<(items: Array<LegendItem>) => Array<LegendItem>>;
    customizeText: PropType<(seriesInfo: {
        seriesColor: string;
        seriesIndex: number;
        seriesName: any;
    }) => string>;
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    hoverMode: PropType<LegendHoverMode>;
    itemsAlignment: PropType<HorizontalAlignment>;
    itemTextPosition: PropType<Position>;
    margin: PropType<number | Record<string, any>>;
    markerSize: NumberConstructor;
    markerTemplate: {};
    orientation: PropType<Orientation>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    position: PropType<RelativePosition>;
    rowCount: NumberConstructor;
    rowItemSpacing: NumberConstructor;
    title: PropType<string | Record<string, any>>;
    verticalAlignment: PropType<VerticalEdge>;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:backgroundColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:margin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columnCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:columnItemSpacing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeHint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeItems"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemsAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemTextPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:markerSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:markerTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:orientation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingLeftRight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingTopBottom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rowCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rowItemSpacing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverMode"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxLegendTitle: import("@vue/runtime-core").DefineComponent<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    margin: PropType<Record<string, any>>;
    placeholderSize: NumberConstructor;
    subtitle: PropType<string | Record<string, any>>;
    text: StringConstructor;
    verticalAlignment: PropType<VerticalEdge>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:font": null;
    "update:horizontalAlignment": null;
    "update:margin": null;
    "update:placeholderSize": null;
    "update:subtitle": null;
    "update:text": null;
    "update:verticalAlignment": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    margin: PropType<Record<string, any>>;
    placeholderSize: NumberConstructor;
    subtitle: PropType<string | Record<string, any>>;
    text: StringConstructor;
    verticalAlignment: PropType<VerticalEdge>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:margin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholderSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:subtitle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxLegendTitleSubtitle: import("@vue/runtime-core").DefineComponent<{
    font: PropType<Record<string, any> | Font>;
    offset: NumberConstructor;
    text: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:font": null;
    "update:offset": null;
    "update:text": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    font: PropType<Record<string, any> | Font>;
    offset: NumberConstructor;
    text: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxLength: import("@vue/runtime-core").DefineComponent<{
    days: NumberConstructor;
    hours: NumberConstructor;
    milliseconds: NumberConstructor;
    minutes: NumberConstructor;
    months: NumberConstructor;
    quarters: NumberConstructor;
    seconds: NumberConstructor;
    weeks: NumberConstructor;
    years: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:days": null;
    "update:hours": null;
    "update:milliseconds": null;
    "update:minutes": null;
    "update:months": null;
    "update:quarters": null;
    "update:seconds": null;
    "update:weeks": null;
    "update:years": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    days: NumberConstructor;
    hours: NumberConstructor;
    milliseconds: NumberConstructor;
    minutes: NumberConstructor;
    months: NumberConstructor;
    quarters: NumberConstructor;
    seconds: NumberConstructor;
    weeks: NumberConstructor;
    years: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:days"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hours"?: ((...args: any[]) => any) | undefined;
    "onUpdate:milliseconds"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minutes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:months"?: ((...args: any[]) => any) | undefined;
    "onUpdate:quarters"?: ((...args: any[]) => any) | undefined;
    "onUpdate:seconds"?: ((...args: any[]) => any) | undefined;
    "onUpdate:weeks"?: ((...args: any[]) => any) | undefined;
    "onUpdate:years"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxLoadingIndicator: import("@vue/runtime-core").DefineComponent<{
    backgroundColor: StringConstructor;
    enabled: BooleanConstructor;
    font: PropType<Record<string, any> | Font>;
    show: BooleanConstructor;
    text: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:backgroundColor": null;
    "update:enabled": null;
    "update:font": null;
    "update:show": null;
    "update:text": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    backgroundColor: StringConstructor;
    enabled: BooleanConstructor;
    font: PropType<Record<string, any> | Font>;
    show: BooleanConstructor;
    text: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:show"?: ((...args: any[]) => any) | undefined;
    "onUpdate:backgroundColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
}, {
    show: boolean;
    enabled: boolean;
}>;
declare const DxMargin: import("@vue/runtime-core").DefineComponent<{
    bottom: NumberConstructor;
    left: NumberConstructor;
    right: NumberConstructor;
    top: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:bottom": null;
    "update:left": null;
    "update:right": null;
    "update:top": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    bottom: NumberConstructor;
    left: NumberConstructor;
    right: NumberConstructor;
    top: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:left"?: ((...args: any[]) => any) | undefined;
    "onUpdate:top"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bottom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:right"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxMinorGrid: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:opacity": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxMinorTick: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    length: NumberConstructor;
    opacity: NumberConstructor;
    shift: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:length": null;
    "update:opacity": null;
    "update:shift": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    length: NumberConstructor;
    opacity: NumberConstructor;
    shift: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:length"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shift"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxMinorTickInterval: import("@vue/runtime-core").DefineComponent<{
    days: NumberConstructor;
    hours: NumberConstructor;
    milliseconds: NumberConstructor;
    minutes: NumberConstructor;
    months: NumberConstructor;
    quarters: NumberConstructor;
    seconds: NumberConstructor;
    weeks: NumberConstructor;
    years: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:days": null;
    "update:hours": null;
    "update:milliseconds": null;
    "update:minutes": null;
    "update:months": null;
    "update:quarters": null;
    "update:seconds": null;
    "update:weeks": null;
    "update:years": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    days: NumberConstructor;
    hours: NumberConstructor;
    milliseconds: NumberConstructor;
    minutes: NumberConstructor;
    months: NumberConstructor;
    quarters: NumberConstructor;
    seconds: NumberConstructor;
    weeks: NumberConstructor;
    years: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:days"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hours"?: ((...args: any[]) => any) | undefined;
    "onUpdate:milliseconds"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minutes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:months"?: ((...args: any[]) => any) | undefined;
    "onUpdate:quarters"?: ((...args: any[]) => any) | undefined;
    "onUpdate:seconds"?: ((...args: any[]) => any) | undefined;
    "onUpdate:weeks"?: ((...args: any[]) => any) | undefined;
    "onUpdate:years"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxMinVisualRangeLength: import("@vue/runtime-core").DefineComponent<{
    days: NumberConstructor;
    hours: NumberConstructor;
    milliseconds: NumberConstructor;
    minutes: NumberConstructor;
    months: NumberConstructor;
    quarters: NumberConstructor;
    seconds: NumberConstructor;
    weeks: NumberConstructor;
    years: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:days": null;
    "update:hours": null;
    "update:milliseconds": null;
    "update:minutes": null;
    "update:months": null;
    "update:quarters": null;
    "update:seconds": null;
    "update:weeks": null;
    "update:years": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    days: NumberConstructor;
    hours: NumberConstructor;
    milliseconds: NumberConstructor;
    minutes: NumberConstructor;
    months: NumberConstructor;
    quarters: NumberConstructor;
    seconds: NumberConstructor;
    weeks: NumberConstructor;
    years: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:days"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hours"?: ((...args: any[]) => any) | undefined;
    "onUpdate:milliseconds"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minutes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:months"?: ((...args: any[]) => any) | undefined;
    "onUpdate:quarters"?: ((...args: any[]) => any) | undefined;
    "onUpdate:seconds"?: ((...args: any[]) => any) | undefined;
    "onUpdate:weeks"?: ((...args: any[]) => any) | undefined;
    "onUpdate:years"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxPane: import("@vue/runtime-core").DefineComponent<{
    backgroundColor: PropType<string | Record<string, any> | ChartsColor>;
    border: PropType<Record<string, any>>;
    height: (NumberConstructor | StringConstructor)[];
    name: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:backgroundColor": null;
    "update:border": null;
    "update:height": null;
    "update:name": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    backgroundColor: PropType<string | Record<string, any> | ChartsColor>;
    border: PropType<Record<string, any>>;
    height: (NumberConstructor | StringConstructor)[];
    name: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:backgroundColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxPaneBorder: import("@vue/runtime-core").DefineComponent<{
    bottom: BooleanConstructor;
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    left: BooleanConstructor;
    opacity: NumberConstructor;
    right: BooleanConstructor;
    top: BooleanConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:bottom": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:left": null;
    "update:opacity": null;
    "update:right": null;
    "update:top": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    bottom: BooleanConstructor;
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    left: BooleanConstructor;
    opacity: NumberConstructor;
    right: BooleanConstructor;
    top: BooleanConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:left"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:top"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bottom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:right"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    bottom: boolean;
    left: boolean;
    right: boolean;
    top: boolean;
}>;
declare const DxPoint: import("@vue/runtime-core").DefineComponent<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    hoverMode: PropType<PointInteractionMode>;
    hoverStyle: PropType<Record<string, any>>;
    image: PropType<string | Record<string, any>>;
    selectionMode: PropType<PointInteractionMode>;
    selectionStyle: PropType<Record<string, any>>;
    size: NumberConstructor;
    symbol: PropType<PointSymbol>;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:border": null;
    "update:color": null;
    "update:hoverMode": null;
    "update:hoverStyle": null;
    "update:image": null;
    "update:selectionMode": null;
    "update:selectionStyle": null;
    "update:size": null;
    "update:symbol": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    hoverMode: PropType<PointInteractionMode>;
    hoverStyle: PropType<Record<string, any>>;
    image: PropType<string | Record<string, any>>;
    selectionMode: PropType<PointInteractionMode>;
    selectionStyle: PropType<Record<string, any>>;
    size: NumberConstructor;
    symbol: PropType<PointSymbol>;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:size"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectionMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:image"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectionStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:symbol"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxPointBorder: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxPointHoverStyle: import("@vue/runtime-core").DefineComponent<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    size: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:border": null;
    "update:color": null;
    "update:size": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    size: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:size"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxPointImage: import("@vue/runtime-core").DefineComponent<{
    height: PropType<number | Record<string, any>>;
    url: PropType<string | Record<string, any>>;
    width: PropType<number | Record<string, any>>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:height": null;
    "update:url": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    height: PropType<number | Record<string, any>>;
    url: PropType<string | Record<string, any>>;
    width: PropType<number | Record<string, any>>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:url"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxPointSelectionStyle: import("@vue/runtime-core").DefineComponent<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    size: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:border": null;
    "update:color": null;
    "update:size": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    size: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:size"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxReduction: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    level: PropType<FinancialChartReductionLevel>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:level": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    level: PropType<FinancialChartReductionLevel>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:level"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxScrollBar: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    offset: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Position>;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:offset": null;
    "update:opacity": null;
    "update:position": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    offset: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Position>;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxSelectionStyle: import("@vue/runtime-core").DefineComponent<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    dashStyle: PropType<DashStyle>;
    hatching: PropType<Record<string, any>>;
    highlight: BooleanConstructor;
    size: NumberConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:border": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:hatching": null;
    "update:highlight": null;
    "update:size": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    border: PropType<Record<string, any>>;
    color: PropType<string | Record<string, any> | ChartsColor>;
    dashStyle: PropType<DashStyle>;
    hatching: PropType<Record<string, any>>;
    highlight: BooleanConstructor;
    size: NumberConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:size"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hatching"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highlight"?: ((...args: any[]) => any) | undefined;
}, {
    highlight: boolean;
}>;
declare const DxSeries: import("@vue/runtime-core").DefineComponent<{
    aggregation: PropType<Record<string, any>>;
    argumentField: StringConstructor;
    axis: StringConstructor;
    barOverlapGroup: StringConstructor;
    barPadding: NumberConstructor;
    barWidth: NumberConstructor;
    border: PropType<Record<string, any>>;
    closeValueField: StringConstructor;
    color: PropType<string | Record<string, any> | ChartsColor>;
    cornerRadius: NumberConstructor;
    dashStyle: PropType<DashStyle>;
    highValueField: StringConstructor;
    hoverMode: PropType<SeriesHoverMode>;
    hoverStyle: PropType<Record<string, any>>;
    ignoreEmptyPoints: BooleanConstructor;
    innerColor: StringConstructor;
    label: PropType<Record<string, any>>;
    lowValueField: StringConstructor;
    maxLabelCount: NumberConstructor;
    minBarSize: NumberConstructor;
    name: StringConstructor;
    opacity: NumberConstructor;
    openValueField: StringConstructor;
    pane: StringConstructor;
    point: PropType<Record<string, any>>;
    rangeValue1Field: StringConstructor;
    rangeValue2Field: StringConstructor;
    reduction: PropType<Record<string, any>>;
    selectionMode: PropType<SeriesSelectionMode>;
    selectionStyle: PropType<Record<string, any>>;
    showInLegend: BooleanConstructor;
    sizeField: StringConstructor;
    stack: StringConstructor;
    tag: {};
    tagField: StringConstructor;
    type: PropType<SeriesType>;
    valueErrorBar: PropType<Record<string, any>>;
    valueField: StringConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:aggregation": null;
    "update:argumentField": null;
    "update:axis": null;
    "update:barOverlapGroup": null;
    "update:barPadding": null;
    "update:barWidth": null;
    "update:border": null;
    "update:closeValueField": null;
    "update:color": null;
    "update:cornerRadius": null;
    "update:dashStyle": null;
    "update:highValueField": null;
    "update:hoverMode": null;
    "update:hoverStyle": null;
    "update:ignoreEmptyPoints": null;
    "update:innerColor": null;
    "update:label": null;
    "update:lowValueField": null;
    "update:maxLabelCount": null;
    "update:minBarSize": null;
    "update:name": null;
    "update:opacity": null;
    "update:openValueField": null;
    "update:pane": null;
    "update:point": null;
    "update:rangeValue1Field": null;
    "update:rangeValue2Field": null;
    "update:reduction": null;
    "update:selectionMode": null;
    "update:selectionStyle": null;
    "update:showInLegend": null;
    "update:sizeField": null;
    "update:stack": null;
    "update:tag": null;
    "update:tagField": null;
    "update:type": null;
    "update:valueErrorBar": null;
    "update:valueField": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    aggregation: PropType<Record<string, any>>;
    argumentField: StringConstructor;
    axis: StringConstructor;
    barOverlapGroup: StringConstructor;
    barPadding: NumberConstructor;
    barWidth: NumberConstructor;
    border: PropType<Record<string, any>>;
    closeValueField: StringConstructor;
    color: PropType<string | Record<string, any> | ChartsColor>;
    cornerRadius: NumberConstructor;
    dashStyle: PropType<DashStyle>;
    highValueField: StringConstructor;
    hoverMode: PropType<SeriesHoverMode>;
    hoverStyle: PropType<Record<string, any>>;
    ignoreEmptyPoints: BooleanConstructor;
    innerColor: StringConstructor;
    label: PropType<Record<string, any>>;
    lowValueField: StringConstructor;
    maxLabelCount: NumberConstructor;
    minBarSize: NumberConstructor;
    name: StringConstructor;
    opacity: NumberConstructor;
    openValueField: StringConstructor;
    pane: StringConstructor;
    point: PropType<Record<string, any>>;
    rangeValue1Field: StringConstructor;
    rangeValue2Field: StringConstructor;
    reduction: PropType<Record<string, any>>;
    selectionMode: PropType<SeriesSelectionMode>;
    selectionStyle: PropType<Record<string, any>>;
    showInLegend: BooleanConstructor;
    sizeField: StringConstructor;
    stack: StringConstructor;
    tag: {};
    tagField: StringConstructor;
    type: PropType<SeriesType>;
    valueErrorBar: PropType<Record<string, any>>;
    valueField: StringConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cornerRadius"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectionMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:axis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:aggregation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:argumentField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:barOverlapGroup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:barPadding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:barWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:closeValueField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highValueField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyPoints"?: ((...args: any[]) => any) | undefined;
    "onUpdate:innerColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lowValueField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxLabelCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minBarSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:openValueField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pane"?: ((...args: any[]) => any) | undefined;
    "onUpdate:point"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangeValue1Field"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangeValue2Field"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reduction"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectionStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showInLegend"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sizeField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stack"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tagField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueErrorBar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tag"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    ignoreEmptyPoints: boolean;
    showInLegend: boolean;
}>;
declare const DxSeriesBorder: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxSeriesTemplate: import("@vue/runtime-core").DefineComponent<{
    customizeSeries: PropType<(seriesName: any) => ChartSeries>;
    nameField: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:customizeSeries": null;
    "update:nameField": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    customizeSeries: PropType<(seriesName: any) => ChartSeries>;
    nameField: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeSeries"?: ((...args: any[]) => any) | undefined;
    "onUpdate:nameField"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxShadow: import("@vue/runtime-core").DefineComponent<{
    blur: NumberConstructor;
    color: StringConstructor;
    offsetX: NumberConstructor;
    offsetY: NumberConstructor;
    opacity: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:blur": null;
    "update:color": null;
    "update:offsetX": null;
    "update:offsetY": null;
    "update:opacity": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    blur: NumberConstructor;
    color: StringConstructor;
    offsetX: NumberConstructor;
    offsetY: NumberConstructor;
    opacity: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:blur"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offsetX"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offsetY"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxSize: import("@vue/runtime-core").DefineComponent<{
    height: NumberConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:height": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    height: NumberConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxStrip: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    endValue: (DateConstructor | NumberConstructor | StringConstructor)[];
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    startValue: (DateConstructor | NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:endValue": null;
    "update:label": null;
    "update:paddingLeftRight": null;
    "update:paddingTopBottom": null;
    "update:startValue": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    endValue: (DateConstructor | NumberConstructor | StringConstructor)[];
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    startValue: (DateConstructor | NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingLeftRight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingTopBottom"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxStripLabel: import("@vue/runtime-core").DefineComponent<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    text: StringConstructor;
    verticalAlignment: PropType<VerticalAlignment>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:font": null;
    "update:horizontalAlignment": null;
    "update:text": null;
    "update:verticalAlignment": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    text: StringConstructor;
    verticalAlignment: PropType<VerticalAlignment>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxStripStyle: import("@vue/runtime-core").DefineComponent<{
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:label": null;
    "update:paddingLeftRight": null;
    "update:paddingTopBottom": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    label: PropType<Record<string, any>>;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingLeftRight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingTopBottom"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxStripStyleLabel: import("@vue/runtime-core").DefineComponent<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    verticalAlignment: PropType<VerticalAlignment>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:font": null;
    "update:horizontalAlignment": null;
    "update:verticalAlignment": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    verticalAlignment: PropType<VerticalAlignment>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxSubtitle: import("@vue/runtime-core").DefineComponent<{
    font: PropType<Record<string, any> | Font>;
    offset: NumberConstructor;
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    wordWrap: PropType<WordWrap>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:font": null;
    "update:offset": null;
    "update:text": null;
    "update:textOverflow": null;
    "update:wordWrap": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    font: PropType<Record<string, any> | Font>;
    offset: NumberConstructor;
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    wordWrap: PropType<WordWrap>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textOverflow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrap"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxTick: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    length: NumberConstructor;
    opacity: NumberConstructor;
    shift: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:length": null;
    "update:opacity": null;
    "update:shift": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    length: NumberConstructor;
    opacity: NumberConstructor;
    shift: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:length"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shift"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxTickInterval: import("@vue/runtime-core").DefineComponent<{
    days: NumberConstructor;
    hours: NumberConstructor;
    milliseconds: NumberConstructor;
    minutes: NumberConstructor;
    months: NumberConstructor;
    quarters: NumberConstructor;
    seconds: NumberConstructor;
    weeks: NumberConstructor;
    years: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:days": null;
    "update:hours": null;
    "update:milliseconds": null;
    "update:minutes": null;
    "update:months": null;
    "update:quarters": null;
    "update:seconds": null;
    "update:weeks": null;
    "update:years": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    days: NumberConstructor;
    hours: NumberConstructor;
    milliseconds: NumberConstructor;
    minutes: NumberConstructor;
    months: NumberConstructor;
    quarters: NumberConstructor;
    seconds: NumberConstructor;
    weeks: NumberConstructor;
    years: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:days"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hours"?: ((...args: any[]) => any) | undefined;
    "onUpdate:milliseconds"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minutes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:months"?: ((...args: any[]) => any) | undefined;
    "onUpdate:quarters"?: ((...args: any[]) => any) | undefined;
    "onUpdate:seconds"?: ((...args: any[]) => any) | undefined;
    "onUpdate:weeks"?: ((...args: any[]) => any) | undefined;
    "onUpdate:years"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxTitle: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    margin: PropType<number | Record<string, any>>;
    placeholderSize: NumberConstructor;
    subtitle: PropType<string | Record<string, any>>;
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    verticalAlignment: PropType<VerticalEdge>;
    wordWrap: PropType<WordWrap>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:font": null;
    "update:horizontalAlignment": null;
    "update:margin": null;
    "update:placeholderSize": null;
    "update:subtitle": null;
    "update:text": null;
    "update:textOverflow": null;
    "update:verticalAlignment": null;
    "update:wordWrap": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    font: PropType<Record<string, any> | Font>;
    horizontalAlignment: PropType<HorizontalAlignment>;
    margin: PropType<number | Record<string, any>>;
    placeholderSize: NumberConstructor;
    subtitle: PropType<string | Record<string, any>>;
    text: StringConstructor;
    textOverflow: PropType<TextOverflow>;
    verticalAlignment: PropType<VerticalEdge>;
    wordWrap: PropType<WordWrap>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:margin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholderSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:subtitle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:textOverflow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wordWrap"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxTooltip: import("@vue/runtime-core").DefineComponent<{
    argumentFormat: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    arrowLength: NumberConstructor;
    border: PropType<Record<string, any>>;
    color: StringConstructor;
    container: {};
    contentTemplate: {};
    cornerRadius: NumberConstructor;
    customizeTooltip: PropType<(pointInfo: any) => Record<string, any>>;
    enabled: BooleanConstructor;
    font: PropType<Record<string, any> | Font>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    interactive: BooleanConstructor;
    location: PropType<ChartTooltipLocation>;
    opacity: NumberConstructor;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    shadow: PropType<Record<string, any>>;
    shared: BooleanConstructor;
    zIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:argumentFormat": null;
    "update:arrowLength": null;
    "update:border": null;
    "update:color": null;
    "update:container": null;
    "update:contentTemplate": null;
    "update:cornerRadius": null;
    "update:customizeTooltip": null;
    "update:enabled": null;
    "update:font": null;
    "update:format": null;
    "update:interactive": null;
    "update:location": null;
    "update:opacity": null;
    "update:paddingLeftRight": null;
    "update:paddingTopBottom": null;
    "update:shadow": null;
    "update:shared": null;
    "update:zIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    argumentFormat: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    arrowLength: NumberConstructor;
    border: PropType<Record<string, any>>;
    color: StringConstructor;
    container: {};
    contentTemplate: {};
    cornerRadius: NumberConstructor;
    customizeTooltip: PropType<(pointInfo: any) => Record<string, any>>;
    enabled: BooleanConstructor;
    font: PropType<Record<string, any> | Font>;
    format: PropType<string | Record<string, any> | import("devextreme/artifacts/npm/devextreme/common/core/localization").FormatObject | ((value: number | Date) => string) | ((value: Date) => string) | ((value: number) => string) | Intl.DateTimeFormatOptions | Intl.NumberFormatOptions | ((value: number | Date) => string) | undefined>;
    interactive: BooleanConstructor;
    location: PropType<ChartTooltipLocation>;
    opacity: NumberConstructor;
    paddingLeftRight: NumberConstructor;
    paddingTopBottom: NumberConstructor;
    shadow: PropType<Record<string, any>>;
    shared: BooleanConstructor;
    zIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:container"?: ((...args: any[]) => any) | undefined;
    "onUpdate:contentTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:font"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cornerRadius"?: ((...args: any[]) => any) | undefined;
    "onUpdate:format"?: ((...args: any[]) => any) | undefined;
    "onUpdate:border"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingLeftRight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:paddingTopBottom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:arrowLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeTooltip"?: ((...args: any[]) => any) | undefined;
    "onUpdate:interactive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shadow"?: ((...args: any[]) => any) | undefined;
    "onUpdate:zIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:argumentFormat"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shared"?: ((...args: any[]) => any) | undefined;
}, {
    enabled: boolean;
    interactive: boolean;
    shared: boolean;
}>;
declare const DxTooltipBorder: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:opacity": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxUrl: import("@vue/runtime-core").DefineComponent<{
    rangeMaxPoint: StringConstructor;
    rangeMinPoint: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:rangeMaxPoint": null;
    "update:rangeMinPoint": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    rangeMaxPoint: StringConstructor;
    rangeMinPoint: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangeMaxPoint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangeMinPoint"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxValueAxis: import("@vue/runtime-core").DefineComponent<{
    aggregatedPointsPosition: PropType<AggregatedPointsPosition>;
    allowDecimals: BooleanConstructor;
    autoBreaksEnabled: BooleanConstructor;
    axisDivisionFactor: NumberConstructor;
    breaks: PropType<ScaleBreak[]>;
    breakStyle: PropType<Record<string, any>>;
    categories: PropType<(string | number | Date)[]>;
    color: StringConstructor;
    constantLines: PropType<Record<string, any>[]>;
    constantLineStyle: PropType<Record<string, any>>;
    customPosition: (DateConstructor | NumberConstructor | StringConstructor)[];
    discreteAxisDivisionMode: PropType<DiscreteAxisDivisionMode>;
    endOnTick: BooleanConstructor;
    grid: PropType<Record<string, any>>;
    inverted: BooleanConstructor;
    label: PropType<Record<string, any>>;
    linearThreshold: NumberConstructor;
    logarithmBase: NumberConstructor;
    maxAutoBreakCount: NumberConstructor;
    maxValueMargin: NumberConstructor;
    minorGrid: PropType<Record<string, any>>;
    minorTick: PropType<Record<string, any>>;
    minorTickCount: NumberConstructor;
    minorTickInterval: PropType<number | Record<string, any> | TimeInterval>;
    minValueMargin: NumberConstructor;
    minVisualRangeLength: PropType<number | Record<string, any> | TimeInterval>;
    multipleAxesSpacing: NumberConstructor;
    name: StringConstructor;
    offset: NumberConstructor;
    opacity: NumberConstructor;
    pane: StringConstructor;
    placeholderSize: NumberConstructor;
    position: PropType<Position>;
    showZero: BooleanConstructor;
    strips: PropType<Record<string, any>[]>;
    stripStyle: PropType<Record<string, any>>;
    synchronizedValue: NumberConstructor;
    tick: PropType<Record<string, any>>;
    tickInterval: PropType<number | Record<string, any> | TimeInterval>;
    title: PropType<string | Record<string, any>>;
    type: PropType<AxisScaleType>;
    valueMarginsEnabled: BooleanConstructor;
    valueType: PropType<ChartsDataType>;
    visible: BooleanConstructor;
    visualRange: PropType<Record<string, any> | (string | number | Date)[] | CommonChartTypes.VisualRange>;
    visualRangeUpdateMode: PropType<VisualRangeUpdateMode>;
    wholeRange: PropType<Record<string, any> | (string | number | Date)[] | CommonChartTypes.VisualRange>;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:aggregatedPointsPosition": null;
    "update:allowDecimals": null;
    "update:autoBreaksEnabled": null;
    "update:axisDivisionFactor": null;
    "update:breaks": null;
    "update:breakStyle": null;
    "update:categories": null;
    "update:color": null;
    "update:constantLines": null;
    "update:constantLineStyle": null;
    "update:customPosition": null;
    "update:discreteAxisDivisionMode": null;
    "update:endOnTick": null;
    "update:grid": null;
    "update:inverted": null;
    "update:label": null;
    "update:linearThreshold": null;
    "update:logarithmBase": null;
    "update:maxAutoBreakCount": null;
    "update:maxValueMargin": null;
    "update:minorGrid": null;
    "update:minorTick": null;
    "update:minorTickCount": null;
    "update:minorTickInterval": null;
    "update:minValueMargin": null;
    "update:minVisualRangeLength": null;
    "update:multipleAxesSpacing": null;
    "update:name": null;
    "update:offset": null;
    "update:opacity": null;
    "update:pane": null;
    "update:placeholderSize": null;
    "update:position": null;
    "update:showZero": null;
    "update:strips": null;
    "update:stripStyle": null;
    "update:synchronizedValue": null;
    "update:tick": null;
    "update:tickInterval": null;
    "update:title": null;
    "update:type": null;
    "update:valueMarginsEnabled": null;
    "update:valueType": null;
    "update:visible": null;
    "update:visualRange": null;
    "update:visualRangeUpdateMode": null;
    "update:wholeRange": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    aggregatedPointsPosition: PropType<AggregatedPointsPosition>;
    allowDecimals: BooleanConstructor;
    autoBreaksEnabled: BooleanConstructor;
    axisDivisionFactor: NumberConstructor;
    breaks: PropType<ScaleBreak[]>;
    breakStyle: PropType<Record<string, any>>;
    categories: PropType<(string | number | Date)[]>;
    color: StringConstructor;
    constantLines: PropType<Record<string, any>[]>;
    constantLineStyle: PropType<Record<string, any>>;
    customPosition: (DateConstructor | NumberConstructor | StringConstructor)[];
    discreteAxisDivisionMode: PropType<DiscreteAxisDivisionMode>;
    endOnTick: BooleanConstructor;
    grid: PropType<Record<string, any>>;
    inverted: BooleanConstructor;
    label: PropType<Record<string, any>>;
    linearThreshold: NumberConstructor;
    logarithmBase: NumberConstructor;
    maxAutoBreakCount: NumberConstructor;
    maxValueMargin: NumberConstructor;
    minorGrid: PropType<Record<string, any>>;
    minorTick: PropType<Record<string, any>>;
    minorTickCount: NumberConstructor;
    minorTickInterval: PropType<number | Record<string, any> | TimeInterval>;
    minValueMargin: NumberConstructor;
    minVisualRangeLength: PropType<number | Record<string, any> | TimeInterval>;
    multipleAxesSpacing: NumberConstructor;
    name: StringConstructor;
    offset: NumberConstructor;
    opacity: NumberConstructor;
    pane: StringConstructor;
    placeholderSize: NumberConstructor;
    position: PropType<Position>;
    showZero: BooleanConstructor;
    strips: PropType<Record<string, any>[]>;
    stripStyle: PropType<Record<string, any>>;
    synchronizedValue: NumberConstructor;
    tick: PropType<Record<string, any>>;
    tickInterval: PropType<number | Record<string, any> | TimeInterval>;
    title: PropType<string | Record<string, any>>;
    type: PropType<AxisScaleType>;
    valueMarginsEnabled: BooleanConstructor;
    valueType: PropType<ChartsDataType>;
    visible: BooleanConstructor;
    visualRange: PropType<Record<string, any> | (string | number | Date)[] | CommonChartTypes.VisualRange>;
    visualRangeUpdateMode: PropType<VisualRangeUpdateMode>;
    wholeRange: PropType<Record<string, any> | (string | number | Date)[] | CommonChartTypes.VisualRange>;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholderSize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:aggregatedPointsPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowDecimals"?: ((...args: any[]) => any) | undefined;
    "onUpdate:axisDivisionFactor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:breaks"?: ((...args: any[]) => any) | undefined;
    "onUpdate:breakStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:categories"?: ((...args: any[]) => any) | undefined;
    "onUpdate:constantLines"?: ((...args: any[]) => any) | undefined;
    "onUpdate:constantLineStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:discreteAxisDivisionMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endOnTick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:grid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:inverted"?: ((...args: any[]) => any) | undefined;
    "onUpdate:linearThreshold"?: ((...args: any[]) => any) | undefined;
    "onUpdate:logarithmBase"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxValueMargin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minorGrid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minorTick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minorTickCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minorTickInterval"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minValueMargin"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minVisualRangeLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:strips"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stripStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tickInterval"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueMarginsEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visualRange"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visualRangeUpdateMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wholeRange"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pane"?: ((...args: any[]) => any) | undefined;
    "onUpdate:autoBreaksEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxAutoBreakCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:multipleAxesSpacing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showZero"?: ((...args: any[]) => any) | undefined;
    "onUpdate:synchronizedValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueType"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    allowDecimals: boolean;
    endOnTick: boolean;
    inverted: boolean;
    valueMarginsEnabled: boolean;
    autoBreaksEnabled: boolean;
    showZero: boolean;
}>;
declare const DxValueErrorBar: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    displayMode: PropType<ValueErrorBarDisplayMode>;
    edgeLength: NumberConstructor;
    highValueField: StringConstructor;
    lineWidth: NumberConstructor;
    lowValueField: StringConstructor;
    opacity: NumberConstructor;
    type: PropType<ValueErrorBarType>;
    value: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:displayMode": null;
    "update:edgeLength": null;
    "update:highValueField": null;
    "update:lineWidth": null;
    "update:lowValueField": null;
    "update:opacity": null;
    "update:type": null;
    "update:value": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    displayMode: PropType<ValueErrorBarDisplayMode>;
    edgeLength: NumberConstructor;
    highValueField: StringConstructor;
    lineWidth: NumberConstructor;
    lowValueField: StringConstructor;
    opacity: NumberConstructor;
    type: PropType<ValueErrorBarType>;
    value: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:highValueField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lowValueField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:edgeLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lineWidth"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxVerticalLine: import("@vue/runtime-core").DefineComponent<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    label: PropType<Record<string, any>>;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:color": null;
    "update:dashStyle": null;
    "update:label": null;
    "update:opacity": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    color: StringConstructor;
    dashStyle: PropType<DashStyle>;
    label: PropType<Record<string, any>>;
    opacity: NumberConstructor;
    visible: BooleanConstructor;
    width: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:color"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dashStyle"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxVisualRange: import("@vue/runtime-core").DefineComponent<{
    endValue: (DateConstructor | NumberConstructor | StringConstructor)[];
    length: PropType<number | Record<string, any> | TimeInterval>;
    startValue: (DateConstructor | NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:endValue": null;
    "update:length": null;
    "update:startValue": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    endValue: (DateConstructor | NumberConstructor | StringConstructor)[];
    length: PropType<number | Record<string, any> | TimeInterval>;
    startValue: (DateConstructor | NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:length"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxWholeRange: import("@vue/runtime-core").DefineComponent<{
    endValue: (DateConstructor | NumberConstructor | StringConstructor)[];
    length: PropType<number | Record<string, any> | TimeInterval>;
    startValue: (DateConstructor | NumberConstructor | StringConstructor)[];
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:endValue": null;
    "update:length": null;
    "update:startValue": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    endValue: (DateConstructor | NumberConstructor | StringConstructor)[];
    length: PropType<number | Record<string, any> | TimeInterval>;
    startValue: (DateConstructor | NumberConstructor | StringConstructor)[];
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:endValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:startValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:length"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxWidth: import("@vue/runtime-core").DefineComponent<{
    rangeMaxPoint: NumberConstructor;
    rangeMinPoint: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:rangeMaxPoint": null;
    "update:rangeMinPoint": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    rangeMaxPoint: NumberConstructor;
    rangeMinPoint: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangeMaxPoint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rangeMinPoint"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxZoomAndPan: import("@vue/runtime-core").DefineComponent<{
    allowMouseWheel: BooleanConstructor;
    allowTouchGestures: BooleanConstructor;
    argumentAxis: PropType<ChartZoomAndPanMode>;
    dragBoxStyle: PropType<Record<string, any>>;
    dragToZoom: BooleanConstructor;
    panKey: PropType<EventKeyModifier>;
    valueAxis: PropType<ChartZoomAndPanMode>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowMouseWheel": null;
    "update:allowTouchGestures": null;
    "update:argumentAxis": null;
    "update:dragBoxStyle": null;
    "update:dragToZoom": null;
    "update:panKey": null;
    "update:valueAxis": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowMouseWheel: BooleanConstructor;
    allowTouchGestures: BooleanConstructor;
    argumentAxis: PropType<ChartZoomAndPanMode>;
    dragBoxStyle: PropType<Record<string, any>>;
    dragToZoom: BooleanConstructor;
    panKey: PropType<EventKeyModifier>;
    valueAxis: PropType<ChartZoomAndPanMode>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:argumentAxis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueAxis"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowMouseWheel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowTouchGestures"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragBoxStyle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragToZoom"?: ((...args: any[]) => any) | undefined;
    "onUpdate:panKey"?: ((...args: any[]) => any) | undefined;
}, {
    allowMouseWheel: boolean;
    allowTouchGestures: boolean;
    dragToZoom: boolean;
}>;
export default DxChart;
export { DxChart, DxAdaptiveLayout, DxAggregation, DxAggregationInterval, DxAnimation, DxAnnotation, DxAnnotationBorder, DxAnnotationImage, DxArgumentAxis, DxArgumentFormat, DxAxisConstantLineStyle, DxAxisConstantLineStyleLabel, DxAxisLabel, DxAxisTitle, DxBackgroundColor, DxBorder, DxBreak, DxBreakStyle, DxChartTitle, DxChartTitleSubtitle, DxColor, DxCommonAnnotationSettings, DxCommonAxisSettings, DxCommonAxisSettingsConstantLineStyle, DxCommonAxisSettingsConstantLineStyleLabel, DxCommonAxisSettingsLabel, DxCommonAxisSettingsTitle, DxCommonPaneSettings, DxCommonSeriesSettings, DxCommonSeriesSettingsHoverStyle, DxCommonSeriesSettingsLabel, DxCommonSeriesSettingsSelectionStyle, DxConnector, DxConstantLine, DxConstantLineLabel, DxConstantLineStyle, DxCrosshair, DxDataPrepareSettings, DxDragBoxStyle, DxExport, DxFont, DxFormat, DxGrid, DxHatching, DxHeight, DxHorizontalLine, DxHorizontalLineLabel, DxHoverStyle, DxImage, DxLabel, DxLegend, DxLegendTitle, DxLegendTitleSubtitle, DxLength, DxLoadingIndicator, DxMargin, DxMinorGrid, DxMinorTick, DxMinorTickInterval, DxMinVisualRangeLength, DxPane, DxPaneBorder, DxPoint, DxPointBorder, DxPointHoverStyle, DxPointImage, DxPointSelectionStyle, DxReduction, DxScrollBar, DxSelectionStyle, DxSeries, DxSeriesBorder, DxSeriesTemplate, DxShadow, DxSize, DxStrip, DxStripLabel, DxStripStyle, DxStripStyleLabel, DxSubtitle, DxTick, DxTickInterval, DxTitle, DxTooltip, DxTooltipBorder, DxUrl, DxValueAxis, DxValueErrorBar, DxVerticalLine, DxVisualRange, DxWholeRange, DxWidth, DxZoomAndPan };
import type * as DxChartTypes from "devextreme/viz/chart_types";
export { DxChartTypes };
