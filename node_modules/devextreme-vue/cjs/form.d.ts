/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { PropType } from "vue";
import Form, { Properties } from "devextreme/ui/form";
import DataSource from "devextreme/data/data_source";
import { ValidationRuleType, HorizontalAlignment, VerticalAlignment, ButtonStyle, ComparisonOperator, TabsIconPosition, TabsStyle, Position } from "devextreme/common";
import { dxFormSimpleItem, dxFormGroupItem, dxFormTabbedItem, dxFormEmptyItem, dxFormButtonItem, LabelLocation, FormLabelMode, ContentReadyEvent, DisposingEvent, EditorEnterKeyEvent, FieldDataChangedEvent, InitializedEvent, OptionChangedEvent, FormItemType, FormItemComponent } from "devextreme/ui/form";
import { dxButtonOptions, ClickEvent, ContentReadyEvent as ButtonContentReadyEvent, DisposingEvent as ButtonDisposingEvent, InitializedEvent as ButtonInitializedEvent, OptionChangedEvent as ButtonOptionChangedEvent } from "devextreme/ui/button";
import { dxTabPanelOptions, ContentReadyEvent as TabPanelContentReadyEvent, DisposingEvent as TabPanelDisposingEvent, InitializedEvent as TabPanelInitializedEvent, ItemClickEvent, ItemContextMenuEvent, ItemHoldEvent, ItemRenderedEvent, OptionChangedEvent as TabPanelOptionChangedEvent, SelectionChangedEvent, SelectionChangingEvent, TitleClickEvent, TitleHoldEvent, TitleRenderedEvent } from "devextreme/ui/tab_panel";
import { DataSourceOptions } from "devextreme/common/data";
import { Store } from "devextreme/data/store";
import * as CommonTypes from "devextreme/common";
type AccessibleOptions = Pick<Properties, "accessKey" | "activeStateEnabled" | "alignItemLabels" | "alignItemLabelsInAllGroups" | "colCount" | "colCountByScreen" | "customizeItem" | "disabled" | "elementAttr" | "focusStateEnabled" | "formData" | "height" | "hint" | "hoverStateEnabled" | "isDirty" | "items" | "labelLocation" | "labelMode" | "minColWidth" | "onContentReady" | "onDisposing" | "onEditorEnterKey" | "onFieldDataChanged" | "onInitialized" | "onOptionChanged" | "optionalMark" | "readOnly" | "requiredMark" | "requiredMessage" | "rtlEnabled" | "screenByWidth" | "scrollingEnabled" | "showColonAfterLabel" | "showOptionalMark" | "showRequiredMark" | "showValidationSummary" | "tabIndex" | "validationGroup" | "visible" | "width">;
interface DxForm extends AccessibleOptions {
    readonly instance?: Form;
}
declare const DxForm: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    alignItemLabels: BooleanConstructor;
    alignItemLabelsInAllGroups: BooleanConstructor;
    colCount: PropType<number | "auto">;
    colCountByScreen: PropType<Record<string, any>>;
    customizeItem: PropType<(item: dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem) => void>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    formData: {};
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    isDirty: BooleanConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    labelLocation: PropType<LabelLocation>;
    labelMode: PropType<FormLabelMode>;
    minColWidth: NumberConstructor;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onEditorEnterKey: PropType<(e: EditorEnterKeyEvent) => void>;
    onFieldDataChanged: PropType<(e: FieldDataChangedEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    optionalMark: StringConstructor;
    readOnly: BooleanConstructor;
    requiredMark: StringConstructor;
    requiredMessage: StringConstructor;
    rtlEnabled: BooleanConstructor;
    screenByWidth: PropType<() => void>;
    scrollingEnabled: BooleanConstructor;
    showColonAfterLabel: BooleanConstructor;
    showOptionalMark: BooleanConstructor;
    showRequiredMark: BooleanConstructor;
    showValidationSummary: BooleanConstructor;
    tabIndex: NumberConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {
    instance(): Form;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:alignItemLabels": null;
    "update:alignItemLabelsInAllGroups": null;
    "update:colCount": null;
    "update:colCountByScreen": null;
    "update:customizeItem": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:formData": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:isDirty": null;
    "update:items": null;
    "update:labelLocation": null;
    "update:labelMode": null;
    "update:minColWidth": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onEditorEnterKey": null;
    "update:onFieldDataChanged": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:optionalMark": null;
    "update:readOnly": null;
    "update:requiredMark": null;
    "update:requiredMessage": null;
    "update:rtlEnabled": null;
    "update:screenByWidth": null;
    "update:scrollingEnabled": null;
    "update:showColonAfterLabel": null;
    "update:showOptionalMark": null;
    "update:showRequiredMark": null;
    "update:showValidationSummary": null;
    "update:tabIndex": null;
    "update:validationGroup": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    alignItemLabels: BooleanConstructor;
    alignItemLabelsInAllGroups: BooleanConstructor;
    colCount: PropType<number | "auto">;
    colCountByScreen: PropType<Record<string, any>>;
    customizeItem: PropType<(item: dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem) => void>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    formData: {};
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    isDirty: BooleanConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    labelLocation: PropType<LabelLocation>;
    labelMode: PropType<FormLabelMode>;
    minColWidth: NumberConstructor;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onEditorEnterKey: PropType<(e: EditorEnterKeyEvent) => void>;
    onFieldDataChanged: PropType<(e: FieldDataChangedEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    optionalMark: StringConstructor;
    readOnly: BooleanConstructor;
    requiredMark: StringConstructor;
    requiredMessage: StringConstructor;
    rtlEnabled: BooleanConstructor;
    screenByWidth: PropType<() => void>;
    scrollingEnabled: BooleanConstructor;
    showColonAfterLabel: BooleanConstructor;
    showOptionalMark: BooleanConstructor;
    showRequiredMark: BooleanConstructor;
    showValidationSummary: BooleanConstructor;
    tabIndex: NumberConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isDirty"?: ((...args: any[]) => any) | undefined;
    "onUpdate:labelMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:readOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationGroup"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabels"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabelsInAllGroups"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCountByScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customizeItem"?: ((...args: any[]) => any) | undefined;
    "onUpdate:formData"?: ((...args: any[]) => any) | undefined;
    "onUpdate:labelLocation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minColWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEditorEnterKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFieldDataChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:optionalMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:requiredMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:requiredMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:screenByWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollingEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showColonAfterLabel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showOptionalMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showRequiredMark"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showValidationSummary"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    isDirty: boolean;
    readOnly: boolean;
    alignItemLabels: boolean;
    alignItemLabelsInAllGroups: boolean;
    scrollingEnabled: boolean;
    showColonAfterLabel: boolean;
    showOptionalMark: boolean;
    showRequiredMark: boolean;
    showValidationSummary: boolean;
}>;
declare const DxAsyncRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => any>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:reevaluate": null;
    "update:type": null;
    "update:validationCallback": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => any>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationCallback"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
declare const DxButtonItem: import("@vue/runtime-core").DefineComponent<{
    buttonOptions: PropType<Record<string, any> | dxButtonOptions>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    horizontalAlignment: PropType<HorizontalAlignment>;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:buttonOptions": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:horizontalAlignment": null;
    "update:itemType": null;
    "update:name": null;
    "update:verticalAlignment": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    buttonOptions: PropType<Record<string, any> | dxButtonOptions>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    horizontalAlignment: PropType<HorizontalAlignment>;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:buttonOptions"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxButtonOptions: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    icon: StringConstructor;
    onClick: PropType<(e: ClickEvent) => void>;
    onContentReady: PropType<(e: ButtonContentReadyEvent) => void>;
    onDisposing: PropType<(e: ButtonDisposingEvent) => void>;
    onInitialized: PropType<(e: ButtonInitializedEvent) => void>;
    onOptionChanged: PropType<(e: ButtonOptionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    useSubmitBehavior: BooleanConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:bindingOptions": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:icon": null;
    "update:onClick": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:rtlEnabled": null;
    "update:stylingMode": null;
    "update:tabIndex": null;
    "update:template": null;
    "update:text": null;
    "update:type": null;
    "update:useSubmitBehavior": null;
    "update:validationGroup": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    icon: StringConstructor;
    onClick: PropType<(e: ClickEvent) => void>;
    onContentReady: PropType<(e: ButtonContentReadyEvent) => void>;
    onDisposing: PropType<(e: ButtonDisposingEvent) => void>;
    onInitialized: PropType<(e: ButtonInitializedEvent) => void>;
    onOptionChanged: PropType<(e: ButtonOptionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    useSubmitBehavior: BooleanConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useSubmitBehavior"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationGroup"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    useSubmitBehavior: boolean;
}>;
declare const DxColCountByScreen: import("@vue/runtime-core").DefineComponent<{
    lg: NumberConstructor;
    md: NumberConstructor;
    sm: NumberConstructor;
    xs: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:lg": null;
    "update:md": null;
    "update:sm": null;
    "update:xs": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    lg: NumberConstructor;
    md: NumberConstructor;
    sm: NumberConstructor;
    xs: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:lg"?: ((...args: any[]) => any) | undefined;
    "onUpdate:md"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sm"?: ((...args: any[]) => any) | undefined;
    "onUpdate:xs"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCompareRule: import("@vue/runtime-core").DefineComponent<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:comparisonTarget": null;
    "update:comparisonType": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonTarget"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonType"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxCustomRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:reevaluate": null;
    "update:type": null;
    "update:validationCallback": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationCallback"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
declare const DxEmailRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxEmptyItem: import("@vue/runtime-core").DefineComponent<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:itemType": null;
    "update:name": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxGroupItem: import("@vue/runtime-core").DefineComponent<{
    alignItemLabels: BooleanConstructor;
    caption: StringConstructor;
    captionTemplate: {};
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    template: {};
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignItemLabels": null;
    "update:caption": null;
    "update:captionTemplate": null;
    "update:colCount": null;
    "update:colCountByScreen": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:items": null;
    "update:itemType": null;
    "update:name": null;
    "update:template": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignItemLabels: BooleanConstructor;
    caption: StringConstructor;
    captionTemplate: {};
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    template: {};
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:caption"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabels"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCountByScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:captionTemplate"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    alignItemLabels: boolean;
}>;
declare const DxItem: import("@vue/runtime-core").DefineComponent<{
    alignItemLabels: BooleanConstructor;
    badge: StringConstructor;
    buttonOptions: PropType<Record<string, any> | dxButtonOptions>;
    caption: StringConstructor;
    captionTemplate: {};
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    disabled: BooleanConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    horizontalAlignment: PropType<HorizontalAlignment>;
    html: StringConstructor;
    icon: StringConstructor;
    isRequired: BooleanConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    name: StringConstructor;
    tabPanelOptions: PropType<Record<string, any> | dxTabPanelOptions<any, any>>;
    tabs: PropType<Record<string, any>[]>;
    tabTemplate: {};
    template: {};
    text: StringConstructor;
    title: StringConstructor;
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignItemLabels": null;
    "update:badge": null;
    "update:buttonOptions": null;
    "update:caption": null;
    "update:captionTemplate": null;
    "update:colCount": null;
    "update:colCountByScreen": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:dataField": null;
    "update:disabled": null;
    "update:editorOptions": null;
    "update:editorType": null;
    "update:helpText": null;
    "update:horizontalAlignment": null;
    "update:html": null;
    "update:icon": null;
    "update:isRequired": null;
    "update:items": null;
    "update:itemType": null;
    "update:label": null;
    "update:name": null;
    "update:tabPanelOptions": null;
    "update:tabs": null;
    "update:tabTemplate": null;
    "update:template": null;
    "update:text": null;
    "update:title": null;
    "update:validationRules": null;
    "update:verticalAlignment": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignItemLabels: BooleanConstructor;
    badge: StringConstructor;
    buttonOptions: PropType<Record<string, any> | dxButtonOptions>;
    caption: StringConstructor;
    captionTemplate: {};
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    disabled: BooleanConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    horizontalAlignment: PropType<HorizontalAlignment>;
    html: StringConstructor;
    icon: StringConstructor;
    isRequired: BooleanConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    name: StringConstructor;
    tabPanelOptions: PropType<Record<string, any> | dxTabPanelOptions<any, any>>;
    tabs: PropType<Record<string, any>[]>;
    tabTemplate: {};
    template: {};
    text: StringConstructor;
    title: StringConstructor;
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    verticalAlignment: PropType<VerticalAlignment>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:horizontalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:verticalAlignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:caption"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationRules"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabels"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCountByScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:helpText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isRequired"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabs"?: ((...args: any[]) => any) | undefined;
    "onUpdate:badge"?: ((...args: any[]) => any) | undefined;
    "onUpdate:buttonOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:captionTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabPanelOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabTemplate"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
    alignItemLabels: boolean;
    isRequired: boolean;
}>;
declare const DxLabel: import("@vue/runtime-core").DefineComponent<{
    alignment: PropType<HorizontalAlignment>;
    location: PropType<LabelLocation>;
    showColon: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignment": null;
    "update:location": null;
    "update:showColon": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignment: PropType<HorizontalAlignment>;
    location: PropType<LabelLocation>;
    showColon: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignment"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showColon"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    showColon: boolean;
}>;
declare const DxNumericRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxPatternRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    pattern: (StringConstructor | RegExpConstructor)[];
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:message": null;
    "update:pattern": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    message: StringConstructor;
    pattern: (StringConstructor | RegExpConstructor)[];
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pattern"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
}>;
declare const DxRangeRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:max": null;
    "update:message": null;
    "update:min": null;
    "update:reevaluate": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    reevaluate: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
}, {
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
declare const DxRequiredRule: import("@vue/runtime-core").DefineComponent<{
    message: StringConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:message": null;
    "update:trim": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    message: StringConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trim"?: ((...args: any[]) => any) | undefined;
}, {
    trim: boolean;
}>;
declare const DxSimpleItem: import("@vue/runtime-core").DefineComponent<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    isRequired: BooleanConstructor;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    name: StringConstructor;
    template: {};
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:dataField": null;
    "update:editorOptions": null;
    "update:editorType": null;
    "update:helpText": null;
    "update:isRequired": null;
    "update:itemType": null;
    "update:label": null;
    "update:name": null;
    "update:template": null;
    "update:validationRules": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    dataField: StringConstructor;
    editorOptions: {};
    editorType: PropType<FormItemComponent>;
    helpText: StringConstructor;
    isRequired: BooleanConstructor;
    itemType: PropType<FormItemType>;
    label: PropType<Record<string, any>>;
    name: StringConstructor;
    template: {};
    validationRules: PropType<CommonTypes.ValidationRule[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataField"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationRules"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:editorType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:helpText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isRequired"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    isRequired: boolean;
}>;
declare const DxStringLengthRule: import("@vue/runtime-core").DefineComponent<{
    ignoreEmptyValue: BooleanConstructor;
    max: NumberConstructor;
    message: StringConstructor;
    min: NumberConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:ignoreEmptyValue": null;
    "update:max": null;
    "update:message": null;
    "update:min": null;
    "update:trim": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    ignoreEmptyValue: BooleanConstructor;
    max: NumberConstructor;
    message: StringConstructor;
    min: NumberConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trim"?: ((...args: any[]) => any) | undefined;
}, {
    trim: boolean;
    ignoreEmptyValue: boolean;
}>;
declare const DxTab: import("@vue/runtime-core").DefineComponent<{
    alignItemLabels: BooleanConstructor;
    badge: StringConstructor;
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    icon: StringConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    tabTemplate: {};
    template: {};
    title: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:alignItemLabels": null;
    "update:badge": null;
    "update:colCount": null;
    "update:colCountByScreen": null;
    "update:disabled": null;
    "update:icon": null;
    "update:items": null;
    "update:tabTemplate": null;
    "update:template": null;
    "update:title": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    alignItemLabels: BooleanConstructor;
    badge: StringConstructor;
    colCount: NumberConstructor;
    colCountByScreen: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    icon: StringConstructor;
    items: PropType<(dxFormSimpleItem | dxFormGroupItem | dxFormTabbedItem | dxFormEmptyItem | dxFormButtonItem)[]>;
    tabTemplate: {};
    template: {};
    title: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:alignItemLabels"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCount"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colCountByScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:badge"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabTemplate"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    alignItemLabels: boolean;
}>;
declare const DxTabbedItem: import("@vue/runtime-core").DefineComponent<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    tabPanelOptions: PropType<Record<string, any> | dxTabPanelOptions<any, any>>;
    tabs: PropType<Record<string, any>[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:colSpan": null;
    "update:cssClass": null;
    "update:itemType": null;
    "update:name": null;
    "update:tabPanelOptions": null;
    "update:tabs": null;
    "update:visible": null;
    "update:visibleIndex": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    colSpan: NumberConstructor;
    cssClass: StringConstructor;
    itemType: PropType<FormItemType>;
    name: StringConstructor;
    tabPanelOptions: PropType<Record<string, any> | dxTabPanelOptions<any, any>>;
    tabs: PropType<Record<string, any>[]>;
    visible: BooleanConstructor;
    visibleIndex: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visibleIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:colSpan"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabs"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabPanelOptions"?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
}>;
declare const DxTabPanelOptions: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    animationEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    iconPosition: PropType<TabsIconPosition>;
    itemHoldTimeout: NumberConstructor;
    items: PropType<any[]>;
    itemTemplate: {};
    itemTitleTemplate: {};
    loop: BooleanConstructor;
    noDataText: StringConstructor;
    onContentReady: PropType<(e: TabPanelContentReadyEvent) => void>;
    onDisposing: PropType<(e: TabPanelDisposingEvent) => void>;
    onInitialized: PropType<(e: TabPanelInitializedEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onItemContextMenu: PropType<(e: ItemContextMenuEvent) => void>;
    onItemHold: PropType<(e: ItemHoldEvent) => void>;
    onItemRendered: PropType<(e: ItemRenderedEvent) => void>;
    onOptionChanged: PropType<(e: TabPanelOptionChangedEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    onSelectionChanging: PropType<(e: SelectionChangingEvent) => void>;
    onTitleClick: PropType<(e: TitleClickEvent) => void>;
    onTitleHold: PropType<(e: TitleHoldEvent) => void>;
    onTitleRendered: PropType<(e: TitleRenderedEvent) => void>;
    repaintChangesOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    scrollByContent: BooleanConstructor;
    scrollingEnabled: BooleanConstructor;
    selectedIndex: NumberConstructor;
    selectedItem: {};
    showNavButtons: BooleanConstructor;
    stylingMode: PropType<TabsStyle>;
    swipeEnabled: BooleanConstructor;
    tabIndex: NumberConstructor;
    tabsPosition: PropType<Position>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:animationEnabled": null;
    "update:bindingOptions": null;
    "update:dataSource": null;
    "update:deferRendering": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:iconPosition": null;
    "update:itemHoldTimeout": null;
    "update:items": null;
    "update:itemTemplate": null;
    "update:itemTitleTemplate": null;
    "update:loop": null;
    "update:noDataText": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onInitialized": null;
    "update:onItemClick": null;
    "update:onItemContextMenu": null;
    "update:onItemHold": null;
    "update:onItemRendered": null;
    "update:onOptionChanged": null;
    "update:onSelectionChanged": null;
    "update:onSelectionChanging": null;
    "update:onTitleClick": null;
    "update:onTitleHold": null;
    "update:onTitleRendered": null;
    "update:repaintChangesOnly": null;
    "update:rtlEnabled": null;
    "update:scrollByContent": null;
    "update:scrollingEnabled": null;
    "update:selectedIndex": null;
    "update:selectedItem": null;
    "update:showNavButtons": null;
    "update:stylingMode": null;
    "update:swipeEnabled": null;
    "update:tabIndex": null;
    "update:tabsPosition": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    animationEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    iconPosition: PropType<TabsIconPosition>;
    itemHoldTimeout: NumberConstructor;
    items: PropType<any[]>;
    itemTemplate: {};
    itemTitleTemplate: {};
    loop: BooleanConstructor;
    noDataText: StringConstructor;
    onContentReady: PropType<(e: TabPanelContentReadyEvent) => void>;
    onDisposing: PropType<(e: TabPanelDisposingEvent) => void>;
    onInitialized: PropType<(e: TabPanelInitializedEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onItemContextMenu: PropType<(e: ItemContextMenuEvent) => void>;
    onItemHold: PropType<(e: ItemHoldEvent) => void>;
    onItemRendered: PropType<(e: ItemRenderedEvent) => void>;
    onOptionChanged: PropType<(e: TabPanelOptionChangedEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    onSelectionChanging: PropType<(e: SelectionChangingEvent) => void>;
    onTitleClick: PropType<(e: TitleClickEvent) => void>;
    onTitleHold: PropType<(e: TitleHoldEvent) => void>;
    onTitleRendered: PropType<(e: TitleRenderedEvent) => void>;
    repaintChangesOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    scrollByContent: BooleanConstructor;
    scrollingEnabled: BooleanConstructor;
    selectedIndex: NumberConstructor;
    selectedItem: {};
    showNavButtons: BooleanConstructor;
    stylingMode: PropType<TabsStyle>;
    swipeEnabled: BooleanConstructor;
    tabIndex: NumberConstructor;
    tabsPosition: PropType<Position>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deferRendering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemHoldTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemTitleTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:noDataText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemContextMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemHold"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemRendered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:repaintChangesOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedItem"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onTitleRendered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollingEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollByContent"?: ((...args: any[]) => any) | undefined;
    "onUpdate:animationEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:iconPosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:loop"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectionChanging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onTitleClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onTitleHold"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showNavButtons"?: ((...args: any[]) => any) | undefined;
    "onUpdate:swipeEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabsPosition"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    deferRendering: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    repaintChangesOnly: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    scrollingEnabled: boolean;
    scrollByContent: boolean;
    animationEnabled: boolean;
    loop: boolean;
    showNavButtons: boolean;
    swipeEnabled: boolean;
}>;
declare const DxTabPanelOptionsItem: import("@vue/runtime-core").DefineComponent<{
    badge: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    icon: StringConstructor;
    tabTemplate: {};
    template: {};
    text: StringConstructor;
    title: StringConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:badge": null;
    "update:disabled": null;
    "update:html": null;
    "update:icon": null;
    "update:tabTemplate": null;
    "update:template": null;
    "update:text": null;
    "update:title": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    badge: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    icon: StringConstructor;
    tabTemplate: {};
    template: {};
    text: StringConstructor;
    title: StringConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:badge"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabTemplate"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxValidationRule: import("@vue/runtime-core").DefineComponent<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    pattern: (StringConstructor | RegExpConstructor)[];
    reevaluate: BooleanConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:comparisonTarget": null;
    "update:comparisonType": null;
    "update:ignoreEmptyValue": null;
    "update:max": null;
    "update:message": null;
    "update:min": null;
    "update:pattern": null;
    "update:reevaluate": null;
    "update:trim": null;
    "update:type": null;
    "update:validationCallback": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    comparisonTarget: PropType<() => any>;
    comparisonType: PropType<ComparisonOperator>;
    ignoreEmptyValue: BooleanConstructor;
    max: (DateConstructor | NumberConstructor | StringConstructor)[];
    message: StringConstructor;
    min: (DateConstructor | NumberConstructor | StringConstructor)[];
    pattern: (StringConstructor | RegExpConstructor)[];
    reevaluate: BooleanConstructor;
    trim: BooleanConstructor;
    type: PropType<ValidationRuleType>;
    validationCallback: PropType<(options: {
        column: Record<string, any>;
        data: Record<string, any>;
        formItem: Record<string, any>;
        rule: Record<string, any>;
        validator: Record<string, any>;
        value: string | number;
    }) => boolean>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:max"?: ((...args: any[]) => any) | undefined;
    "onUpdate:min"?: ((...args: any[]) => any) | undefined;
    "onUpdate:message"?: ((...args: any[]) => any) | undefined;
    "onUpdate:ignoreEmptyValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:reevaluate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationCallback"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonTarget"?: ((...args: any[]) => any) | undefined;
    "onUpdate:comparisonType"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pattern"?: ((...args: any[]) => any) | undefined;
    "onUpdate:trim"?: ((...args: any[]) => any) | undefined;
}, {
    trim: boolean;
    ignoreEmptyValue: boolean;
    reevaluate: boolean;
}>;
export default DxForm;
export { DxForm, DxAsyncRule, DxButtonItem, DxButtonOptions, DxColCountByScreen, DxCompareRule, DxCustomRule, DxEmailRule, DxEmptyItem, DxGroupItem, DxItem, DxLabel, DxNumericRule, DxPatternRule, DxRangeRule, DxRequiredRule, DxSimpleItem, DxStringLengthRule, DxTab, DxTabbedItem, DxTabPanelOptions, DxTabPanelOptionsItem, DxValidationRule };
import type * as DxFormTypes from "devextreme/ui/form_types";
export { DxFormTypes };
