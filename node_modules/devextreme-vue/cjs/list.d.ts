/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

export { ExplicitTypes } from "devextreme/ui/list";
import { PropType } from "vue";
import List, { Properties } from "devextreme/ui/list";
import DataSource from "devextreme/data/data_source";
import { ItemDeleteMode, ListMenuMode, ContentReadyEvent, DisposingEvent, GroupRenderedEvent, InitializedEvent, ItemClickEvent, ItemContextMenuEvent, ItemDeletedEvent, ItemDeletingEvent, ItemHoldEvent, ItemRenderedEvent, ItemReorderedEvent, ItemSwipeEvent, OptionChangedEvent, PageLoadingEvent, PullRefreshEvent, ScrollEvent, SelectAllValueChangedEvent, SelectionChangedEvent, SelectionChangingEvent } from "devextreme/ui/list";
import { DataSourceOptions } from "devextreme/common/data";
import { Store } from "devextreme/data/store";
import { dxSortableOptions, AddEvent, DisposingEvent as SortableDisposingEvent, DragChangeEvent, DragEndEvent, DragMoveEvent, DragStartEvent, InitializedEvent as SortableInitializedEvent, OptionChangedEvent as SortableOptionChangedEvent, RemoveEvent, ReorderEvent } from "devextreme/ui/sortable";
import { PageLoadMode, SearchMode, SelectAllMode, SingleMultipleAllOrNone, ScrollbarMode, TextEditorButtonLocation, DragDirection, DragHighlight, Orientation, ButtonStyle, TextEditorButton, LabelMode, MaskMode, EditorStyle, ValidationMessageMode, Position, ValidationStatus } from "devextreme/common";
import { dxTextBoxOptions, TextBoxType, ChangeEvent, ContentReadyEvent as TextBoxContentReadyEvent, CopyEvent, CutEvent, DisposingEvent as TextBoxDisposingEvent, EnterKeyEvent, FocusInEvent, FocusOutEvent, InitializedEvent as TextBoxInitializedEvent, InputEvent, KeyDownEvent, KeyUpEvent, OptionChangedEvent as TextBoxOptionChangedEvent, PasteEvent, ValueChangedEvent } from "devextreme/ui/text_box";
import { dxButtonOptions, ClickEvent, ContentReadyEvent as ButtonContentReadyEvent, DisposingEvent as ButtonDisposingEvent, InitializedEvent as ButtonInitializedEvent, OptionChangedEvent as ButtonOptionChangedEvent } from "devextreme/ui/button";
type AccessibleOptions = Pick<Properties, "accessKey" | "activeStateEnabled" | "allowItemDeleting" | "bounceEnabled" | "collapsibleGroups" | "dataSource" | "disabled" | "displayExpr" | "elementAttr" | "focusStateEnabled" | "grouped" | "groupTemplate" | "height" | "hint" | "hoverStateEnabled" | "indicateLoading" | "itemDeleteMode" | "itemDragging" | "itemHoldTimeout" | "items" | "itemTemplate" | "keyExpr" | "menuItems" | "menuMode" | "nextButtonText" | "noDataText" | "onContentReady" | "onDisposing" | "onGroupRendered" | "onInitialized" | "onItemClick" | "onItemContextMenu" | "onItemDeleted" | "onItemDeleting" | "onItemHold" | "onItemRendered" | "onItemReordered" | "onItemSwipe" | "onOptionChanged" | "onPageLoading" | "onPullRefresh" | "onScroll" | "onSelectAllValueChanged" | "onSelectionChanged" | "onSelectionChanging" | "pageLoadingText" | "pageLoadMode" | "pulledDownText" | "pullingDownText" | "pullRefreshEnabled" | "refreshingText" | "repaintChangesOnly" | "rtlEnabled" | "scrollByContent" | "scrollByThumb" | "scrollingEnabled" | "searchEditorOptions" | "searchEnabled" | "searchExpr" | "searchMode" | "searchTimeout" | "searchValue" | "selectAllMode" | "selectAllText" | "selectByClick" | "selectedItemKeys" | "selectedItems" | "selectionMode" | "showScrollbar" | "showSelectionControls" | "tabIndex" | "useNativeScrolling" | "visible" | "width">;
interface DxList extends AccessibleOptions {
    readonly instance?: List;
}
declare const DxList: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowItemDeleting: BooleanConstructor;
    bounceEnabled: BooleanConstructor;
    collapsibleGroups: BooleanConstructor;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    disabled: BooleanConstructor;
    displayExpr: PropType<string | ((item: any) => string)>;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    grouped: BooleanConstructor;
    groupTemplate: {};
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    indicateLoading: BooleanConstructor;
    itemDeleteMode: PropType<ItemDeleteMode>;
    itemDragging: PropType<Record<string, any> | dxSortableOptions>;
    itemHoldTimeout: NumberConstructor;
    items: PropType<any[]>;
    itemTemplate: {};
    keyExpr: PropType<string | (() => void)>;
    menuItems: PropType<Record<string, any>[]>;
    menuMode: PropType<ListMenuMode>;
    nextButtonText: StringConstructor;
    noDataText: StringConstructor;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onGroupRendered: PropType<(e: GroupRenderedEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onItemContextMenu: PropType<(e: ItemContextMenuEvent) => void>;
    onItemDeleted: PropType<(e: ItemDeletedEvent) => void>;
    onItemDeleting: PropType<(e: ItemDeletingEvent) => void>;
    onItemHold: PropType<(e: ItemHoldEvent) => void>;
    onItemRendered: PropType<(e: ItemRenderedEvent) => void>;
    onItemReordered: PropType<(e: ItemReorderedEvent) => void>;
    onItemSwipe: PropType<(e: ItemSwipeEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onPageLoading: PropType<(e: PageLoadingEvent) => void>;
    onPullRefresh: PropType<(e: PullRefreshEvent) => void>;
    onScroll: PropType<(e: ScrollEvent) => void>;
    onSelectAllValueChanged: PropType<(e: SelectAllValueChangedEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    onSelectionChanging: PropType<(e: SelectionChangingEvent) => void>;
    pageLoadingText: StringConstructor;
    pageLoadMode: PropType<PageLoadMode>;
    pulledDownText: StringConstructor;
    pullingDownText: StringConstructor;
    pullRefreshEnabled: BooleanConstructor;
    refreshingText: StringConstructor;
    repaintChangesOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    scrollByContent: BooleanConstructor;
    scrollByThumb: BooleanConstructor;
    scrollingEnabled: BooleanConstructor;
    searchEditorOptions: PropType<Record<string, any> | dxTextBoxOptions<any>>;
    searchEnabled: BooleanConstructor;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    searchMode: PropType<SearchMode>;
    searchTimeout: NumberConstructor;
    searchValue: StringConstructor;
    selectAllMode: PropType<SelectAllMode>;
    selectAllText: StringConstructor;
    selectByClick: BooleanConstructor;
    selectedItemKeys: PropType<any[]>;
    selectedItems: PropType<any[]>;
    selectionMode: PropType<SingleMultipleAllOrNone>;
    showScrollbar: PropType<ScrollbarMode>;
    showSelectionControls: BooleanConstructor;
    tabIndex: NumberConstructor;
    useNativeScrolling: BooleanConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {
    instance(): List;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:allowItemDeleting": null;
    "update:bounceEnabled": null;
    "update:collapsibleGroups": null;
    "update:dataSource": null;
    "update:disabled": null;
    "update:displayExpr": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:grouped": null;
    "update:groupTemplate": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:indicateLoading": null;
    "update:itemDeleteMode": null;
    "update:itemDragging": null;
    "update:itemHoldTimeout": null;
    "update:items": null;
    "update:itemTemplate": null;
    "update:keyExpr": null;
    "update:menuItems": null;
    "update:menuMode": null;
    "update:nextButtonText": null;
    "update:noDataText": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onGroupRendered": null;
    "update:onInitialized": null;
    "update:onItemClick": null;
    "update:onItemContextMenu": null;
    "update:onItemDeleted": null;
    "update:onItemDeleting": null;
    "update:onItemHold": null;
    "update:onItemRendered": null;
    "update:onItemReordered": null;
    "update:onItemSwipe": null;
    "update:onOptionChanged": null;
    "update:onPageLoading": null;
    "update:onPullRefresh": null;
    "update:onScroll": null;
    "update:onSelectAllValueChanged": null;
    "update:onSelectionChanged": null;
    "update:onSelectionChanging": null;
    "update:pageLoadingText": null;
    "update:pageLoadMode": null;
    "update:pulledDownText": null;
    "update:pullingDownText": null;
    "update:pullRefreshEnabled": null;
    "update:refreshingText": null;
    "update:repaintChangesOnly": null;
    "update:rtlEnabled": null;
    "update:scrollByContent": null;
    "update:scrollByThumb": null;
    "update:scrollingEnabled": null;
    "update:searchEditorOptions": null;
    "update:searchEnabled": null;
    "update:searchExpr": null;
    "update:searchMode": null;
    "update:searchTimeout": null;
    "update:searchValue": null;
    "update:selectAllMode": null;
    "update:selectAllText": null;
    "update:selectByClick": null;
    "update:selectedItemKeys": null;
    "update:selectedItems": null;
    "update:selectionMode": null;
    "update:showScrollbar": null;
    "update:showSelectionControls": null;
    "update:tabIndex": null;
    "update:useNativeScrolling": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    allowItemDeleting: BooleanConstructor;
    bounceEnabled: BooleanConstructor;
    collapsibleGroups: BooleanConstructor;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    disabled: BooleanConstructor;
    displayExpr: PropType<string | ((item: any) => string)>;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    grouped: BooleanConstructor;
    groupTemplate: {};
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    indicateLoading: BooleanConstructor;
    itemDeleteMode: PropType<ItemDeleteMode>;
    itemDragging: PropType<Record<string, any> | dxSortableOptions>;
    itemHoldTimeout: NumberConstructor;
    items: PropType<any[]>;
    itemTemplate: {};
    keyExpr: PropType<string | (() => void)>;
    menuItems: PropType<Record<string, any>[]>;
    menuMode: PropType<ListMenuMode>;
    nextButtonText: StringConstructor;
    noDataText: StringConstructor;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onGroupRendered: PropType<(e: GroupRenderedEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onItemContextMenu: PropType<(e: ItemContextMenuEvent) => void>;
    onItemDeleted: PropType<(e: ItemDeletedEvent) => void>;
    onItemDeleting: PropType<(e: ItemDeletingEvent) => void>;
    onItemHold: PropType<(e: ItemHoldEvent) => void>;
    onItemRendered: PropType<(e: ItemRenderedEvent) => void>;
    onItemReordered: PropType<(e: ItemReorderedEvent) => void>;
    onItemSwipe: PropType<(e: ItemSwipeEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onPageLoading: PropType<(e: PageLoadingEvent) => void>;
    onPullRefresh: PropType<(e: PullRefreshEvent) => void>;
    onScroll: PropType<(e: ScrollEvent) => void>;
    onSelectAllValueChanged: PropType<(e: SelectAllValueChangedEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    onSelectionChanging: PropType<(e: SelectionChangingEvent) => void>;
    pageLoadingText: StringConstructor;
    pageLoadMode: PropType<PageLoadMode>;
    pulledDownText: StringConstructor;
    pullingDownText: StringConstructor;
    pullRefreshEnabled: BooleanConstructor;
    refreshingText: StringConstructor;
    repaintChangesOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    scrollByContent: BooleanConstructor;
    scrollByThumb: BooleanConstructor;
    scrollingEnabled: BooleanConstructor;
    searchEditorOptions: PropType<Record<string, any> | dxTextBoxOptions<any>>;
    searchEnabled: BooleanConstructor;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    searchMode: PropType<SearchMode>;
    searchTimeout: NumberConstructor;
    searchValue: StringConstructor;
    selectAllMode: PropType<SelectAllMode>;
    selectAllText: StringConstructor;
    selectByClick: BooleanConstructor;
    selectedItemKeys: PropType<any[]>;
    selectedItems: PropType<any[]>;
    selectionMode: PropType<SingleMultipleAllOrNone>;
    showScrollbar: PropType<ScrollbarMode>;
    showSelectionControls: BooleanConstructor;
    tabIndex: NumberConstructor;
    useNativeScrolling: BooleanConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemHoldTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:keyExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:noDataText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemContextMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemHold"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemRendered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:repaintChangesOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedItemKeys"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedItems"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:grouped"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectionMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectByClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectAllMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollingEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollByContent"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollByThumb"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showScrollbar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useNativeScrolling"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemDeleted"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemDeleting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectionChanging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowItemDeleting"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bounceEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:collapsibleGroups"?: ((...args: any[]) => any) | undefined;
    "onUpdate:indicateLoading"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemDeleteMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemDragging"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuItems"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:nextButtonText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onGroupRendered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemReordered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemSwipe"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onPageLoading"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onPullRefresh"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onScroll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectAllValueChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pageLoadingText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pageLoadMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pulledDownText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pullingDownText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:pullRefreshEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:refreshingText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchEditorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectAllText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showSelectionControls"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    repaintChangesOnly: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    grouped: boolean;
    searchEnabled: boolean;
    selectByClick: boolean;
    scrollingEnabled: boolean;
    scrollByContent: boolean;
    scrollByThumb: boolean;
    useNativeScrolling: boolean;
    allowItemDeleting: boolean;
    bounceEnabled: boolean;
    collapsibleGroups: boolean;
    indicateLoading: boolean;
    pullRefreshEnabled: boolean;
    showSelectionControls: boolean;
}>;
declare const DxButton: import("@vue/runtime-core").DefineComponent<{
    location: PropType<TextEditorButtonLocation>;
    name: StringConstructor;
    options: PropType<Record<string, any> | dxButtonOptions>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:location": null;
    "update:name": null;
    "update:options": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    location: PropType<TextEditorButtonLocation>;
    name: StringConstructor;
    options: PropType<Record<string, any> | dxButtonOptions>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCursorOffset: import("@vue/runtime-core").DefineComponent<{
    x: NumberConstructor;
    y: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: NumberConstructor;
    y: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxItem: import("@vue/runtime-core").DefineComponent<{
    badge: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    icon: StringConstructor;
    showChevron: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:badge": null;
    "update:disabled": null;
    "update:html": null;
    "update:icon": null;
    "update:showChevron": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    badge: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    icon: StringConstructor;
    showChevron: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:badge"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showChevron"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
    showChevron: boolean;
}>;
declare const DxItemDragging: import("@vue/runtime-core").DefineComponent<{
    allowDropInsideItem: BooleanConstructor;
    allowReordering: BooleanConstructor;
    autoScroll: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    boundary: {};
    container: {};
    cursorOffset: PropType<string | Record<string, any>>;
    data: {};
    dragDirection: PropType<DragDirection>;
    dragTemplate: {};
    dropFeedbackMode: PropType<DragHighlight>;
    elementAttr: PropType<Record<string, any>>;
    filter: StringConstructor;
    group: StringConstructor;
    handle: StringConstructor;
    height: PropType<string | number | (() => number | string)>;
    itemOrientation: PropType<Orientation>;
    moveItemOnDrop: BooleanConstructor;
    onAdd: PropType<(e: AddEvent) => void>;
    onDisposing: PropType<(e: SortableDisposingEvent) => void>;
    onDragChange: PropType<(e: DragChangeEvent) => void>;
    onDragEnd: PropType<(e: DragEndEvent) => void>;
    onDragMove: PropType<(e: DragMoveEvent) => void>;
    onDragStart: PropType<(e: DragStartEvent) => void>;
    onInitialized: PropType<(e: SortableInitializedEvent) => void>;
    onOptionChanged: PropType<(e: SortableOptionChangedEvent) => void>;
    onRemove: PropType<(e: RemoveEvent) => void>;
    onReorder: PropType<(e: ReorderEvent) => void>;
    rtlEnabled: BooleanConstructor;
    scrollSensitivity: NumberConstructor;
    scrollSpeed: NumberConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:allowDropInsideItem": null;
    "update:allowReordering": null;
    "update:autoScroll": null;
    "update:bindingOptions": null;
    "update:boundary": null;
    "update:container": null;
    "update:cursorOffset": null;
    "update:data": null;
    "update:dragDirection": null;
    "update:dragTemplate": null;
    "update:dropFeedbackMode": null;
    "update:elementAttr": null;
    "update:filter": null;
    "update:group": null;
    "update:handle": null;
    "update:height": null;
    "update:itemOrientation": null;
    "update:moveItemOnDrop": null;
    "update:onAdd": null;
    "update:onDisposing": null;
    "update:onDragChange": null;
    "update:onDragEnd": null;
    "update:onDragMove": null;
    "update:onDragStart": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:onRemove": null;
    "update:onReorder": null;
    "update:rtlEnabled": null;
    "update:scrollSensitivity": null;
    "update:scrollSpeed": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    allowDropInsideItem: BooleanConstructor;
    allowReordering: BooleanConstructor;
    autoScroll: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    boundary: {};
    container: {};
    cursorOffset: PropType<string | Record<string, any>>;
    data: {};
    dragDirection: PropType<DragDirection>;
    dragTemplate: {};
    dropFeedbackMode: PropType<DragHighlight>;
    elementAttr: PropType<Record<string, any>>;
    filter: StringConstructor;
    group: StringConstructor;
    handle: StringConstructor;
    height: PropType<string | number | (() => number | string)>;
    itemOrientation: PropType<Orientation>;
    moveItemOnDrop: BooleanConstructor;
    onAdd: PropType<(e: AddEvent) => void>;
    onDisposing: PropType<(e: SortableDisposingEvent) => void>;
    onDragChange: PropType<(e: DragChangeEvent) => void>;
    onDragEnd: PropType<(e: DragEndEvent) => void>;
    onDragMove: PropType<(e: DragMoveEvent) => void>;
    onDragStart: PropType<(e: DragStartEvent) => void>;
    onInitialized: PropType<(e: SortableInitializedEvent) => void>;
    onOptionChanged: PropType<(e: SortableOptionChangedEvent) => void>;
    onRemove: PropType<(e: RemoveEvent) => void>;
    onReorder: PropType<(e: ReorderEvent) => void>;
    rtlEnabled: BooleanConstructor;
    scrollSensitivity: NumberConstructor;
    scrollSpeed: NumberConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:container"?: ((...args: any[]) => any) | undefined;
    "onUpdate:boundary"?: ((...args: any[]) => any) | undefined;
    "onUpdate:data"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowReordering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:allowDropInsideItem"?: ((...args: any[]) => any) | undefined;
    "onUpdate:autoScroll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cursorOffset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragDirection"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dropFeedbackMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:filter"?: ((...args: any[]) => any) | undefined;
    "onUpdate:group"?: ((...args: any[]) => any) | undefined;
    "onUpdate:handle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onAdd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragChange"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragEnd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragMove"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDragStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onRemove"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onReorder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollSensitivity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollSpeed"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemOrientation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:moveItemOnDrop"?: ((...args: any[]) => any) | undefined;
}, {
    rtlEnabled: boolean;
    allowReordering: boolean;
    allowDropInsideItem: boolean;
    autoScroll: boolean;
    moveItemOnDrop: boolean;
}>;
declare const DxMenuItem: import("@vue/runtime-core").DefineComponent<{
    action: PropType<(itemElement: any, itemData: any) => void>;
    text: StringConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:action": null;
    "update:text": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    action: PropType<(itemElement: any, itemData: any) => void>;
    text: StringConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:action"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxOptions: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    icon: StringConstructor;
    onClick: PropType<(e: ClickEvent) => void>;
    onContentReady: PropType<(e: ButtonContentReadyEvent) => void>;
    onDisposing: PropType<(e: ButtonDisposingEvent) => void>;
    onInitialized: PropType<(e: ButtonInitializedEvent) => void>;
    onOptionChanged: PropType<(e: ButtonOptionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    useSubmitBehavior: BooleanConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:bindingOptions": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:icon": null;
    "update:onClick": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:rtlEnabled": null;
    "update:stylingMode": null;
    "update:tabIndex": null;
    "update:template": null;
    "update:text": null;
    "update:type": null;
    "update:useSubmitBehavior": null;
    "update:validationGroup": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    icon: StringConstructor;
    onClick: PropType<(e: ClickEvent) => void>;
    onContentReady: PropType<(e: ButtonContentReadyEvent) => void>;
    onDisposing: PropType<(e: ButtonDisposingEvent) => void>;
    onInitialized: PropType<(e: ButtonInitializedEvent) => void>;
    onOptionChanged: PropType<(e: ButtonOptionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    useSubmitBehavior: BooleanConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useSubmitBehavior"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationGroup"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    useSubmitBehavior: boolean;
}>;
declare const DxSearchEditorOptions: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    buttons: PropType<(string | TextEditorButton)[]>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    inputAttr: {};
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    label: StringConstructor;
    labelMode: PropType<LabelMode>;
    mask: StringConstructor;
    maskChar: StringConstructor;
    maskInvalidMessage: StringConstructor;
    maskRules: {};
    maxLength: (NumberConstructor | StringConstructor)[];
    mode: PropType<TextBoxType>;
    name: StringConstructor;
    onChange: PropType<(e: ChangeEvent) => void>;
    onContentReady: PropType<(e: TextBoxContentReadyEvent) => void>;
    onCopy: PropType<(e: CopyEvent) => void>;
    onCut: PropType<(e: CutEvent) => void>;
    onDisposing: PropType<(e: TextBoxDisposingEvent) => void>;
    onEnterKey: PropType<(e: EnterKeyEvent) => void>;
    onFocusIn: PropType<(e: FocusInEvent) => void>;
    onFocusOut: PropType<(e: FocusOutEvent) => void>;
    onInitialized: PropType<(e: TextBoxInitializedEvent) => void>;
    onInput: PropType<(e: InputEvent) => void>;
    onKeyDown: PropType<(e: KeyDownEvent) => void>;
    onKeyUp: PropType<(e: KeyUpEvent) => void>;
    onOptionChanged: PropType<(e: TextBoxOptionChangedEvent) => void>;
    onPaste: PropType<(e: PasteEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    placeholder: StringConstructor;
    readOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    showClearButton: BooleanConstructor;
    showMaskMode: PropType<MaskMode>;
    spellcheck: BooleanConstructor;
    stylingMode: PropType<EditorStyle>;
    tabIndex: NumberConstructor;
    text: StringConstructor;
    useMaskedValue: BooleanConstructor;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationMessageMode: PropType<ValidationMessageMode>;
    validationMessagePosition: PropType<Position>;
    validationStatus: PropType<ValidationStatus>;
    value: StringConstructor;
    valueChangeEvent: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:bindingOptions": null;
    "update:buttons": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:inputAttr": null;
    "update:isDirty": null;
    "update:isValid": null;
    "update:label": null;
    "update:labelMode": null;
    "update:mask": null;
    "update:maskChar": null;
    "update:maskInvalidMessage": null;
    "update:maskRules": null;
    "update:maxLength": null;
    "update:mode": null;
    "update:name": null;
    "update:onChange": null;
    "update:onContentReady": null;
    "update:onCopy": null;
    "update:onCut": null;
    "update:onDisposing": null;
    "update:onEnterKey": null;
    "update:onFocusIn": null;
    "update:onFocusOut": null;
    "update:onInitialized": null;
    "update:onInput": null;
    "update:onKeyDown": null;
    "update:onKeyUp": null;
    "update:onOptionChanged": null;
    "update:onPaste": null;
    "update:onValueChanged": null;
    "update:placeholder": null;
    "update:readOnly": null;
    "update:rtlEnabled": null;
    "update:showClearButton": null;
    "update:showMaskMode": null;
    "update:spellcheck": null;
    "update:stylingMode": null;
    "update:tabIndex": null;
    "update:text": null;
    "update:useMaskedValue": null;
    "update:validationError": null;
    "update:validationErrors": null;
    "update:validationMessageMode": null;
    "update:validationMessagePosition": null;
    "update:validationStatus": null;
    "update:value": null;
    "update:valueChangeEvent": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    buttons: PropType<(string | TextEditorButton)[]>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    inputAttr: {};
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    label: StringConstructor;
    labelMode: PropType<LabelMode>;
    mask: StringConstructor;
    maskChar: StringConstructor;
    maskInvalidMessage: StringConstructor;
    maskRules: {};
    maxLength: (NumberConstructor | StringConstructor)[];
    mode: PropType<TextBoxType>;
    name: StringConstructor;
    onChange: PropType<(e: ChangeEvent) => void>;
    onContentReady: PropType<(e: TextBoxContentReadyEvent) => void>;
    onCopy: PropType<(e: CopyEvent) => void>;
    onCut: PropType<(e: CutEvent) => void>;
    onDisposing: PropType<(e: TextBoxDisposingEvent) => void>;
    onEnterKey: PropType<(e: EnterKeyEvent) => void>;
    onFocusIn: PropType<(e: FocusInEvent) => void>;
    onFocusOut: PropType<(e: FocusOutEvent) => void>;
    onInitialized: PropType<(e: TextBoxInitializedEvent) => void>;
    onInput: PropType<(e: InputEvent) => void>;
    onKeyDown: PropType<(e: KeyDownEvent) => void>;
    onKeyUp: PropType<(e: KeyUpEvent) => void>;
    onOptionChanged: PropType<(e: TextBoxOptionChangedEvent) => void>;
    onPaste: PropType<(e: PasteEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    placeholder: StringConstructor;
    readOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    showClearButton: BooleanConstructor;
    showMaskMode: PropType<MaskMode>;
    spellcheck: BooleanConstructor;
    stylingMode: PropType<EditorStyle>;
    tabIndex: NumberConstructor;
    text: StringConstructor;
    useMaskedValue: BooleanConstructor;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationMessageMode: PropType<ValidationMessageMode>;
    validationMessagePosition: PropType<Position>;
    validationStatus: PropType<ValidationStatus>;
    value: StringConstructor;
    valueChangeEvent: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:buttons"?: ((...args: any[]) => any) | undefined;
    "onUpdate:inputAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isDirty"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isValid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:labelMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onChange"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCopy"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCut"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEnterKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusIn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusOut"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInput"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onKeyDown"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onKeyUp"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onPaste"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onValueChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:readOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showClearButton"?: ((...args: any[]) => any) | undefined;
    "onUpdate:spellcheck"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationError"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationErrors"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationMessageMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationMessagePosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationStatus"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueChangeEvent"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mask"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maskChar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maskInvalidMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maskRules"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showMaskMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useMaskedValue"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    isDirty: boolean;
    isValid: boolean;
    readOnly: boolean;
    showClearButton: boolean;
    spellcheck: boolean;
    useMaskedValue: boolean;
}>;
export default DxList;
export { DxList, DxButton, DxCursorOffset, DxItem, DxItemDragging, DxMenuItem, DxOptions, DxSearchEditorOptions };
import type * as DxListTypes from "devextreme/ui/list_types";
export { DxListTypes };
