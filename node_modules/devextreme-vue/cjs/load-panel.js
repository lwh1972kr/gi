/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DxTo = exports.DxShow = exports.DxPosition = exports.DxOffset = exports.DxMy = exports.DxHide = exports.DxFrom = exports.DxCollision = exports.DxBoundaryOffset = exports.DxAt = exports.DxAnimation = exports.DxLoadPanel = void 0;
const vue_1 = require("vue");
const index_1 = require("./core/index");
const load_panel_1 = __importDefault(require("devextreme/ui/load_panel"));
const index_2 = require("./core/index");
const componentConfig = {
    props: {
        animation: Object,
        closeOnOutsideClick: [Boolean, Function],
        container: {},
        deferRendering: Boolean,
        delay: Number,
        focusStateEnabled: Boolean,
        height: [Function, Number, String],
        hideOnOutsideClick: [Boolean, Function],
        hideOnParentScroll: Boolean,
        hint: String,
        hoverStateEnabled: Boolean,
        indicatorSrc: String,
        maxHeight: [Function, Number, String],
        maxWidth: [Function, Number, String],
        message: String,
        minHeight: [Function, Number, String],
        minWidth: [Function, Number, String],
        onContentReady: Function,
        onDisposing: Function,
        onHidden: Function,
        onHiding: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        onShowing: Function,
        onShown: Function,
        position: [Function, String, Object],
        rtlEnabled: Boolean,
        shading: Boolean,
        shadingColor: String,
        showIndicator: Boolean,
        showPane: Boolean,
        visible: Boolean,
        width: [Function, Number, String],
        wrapperAttr: {}
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:animation": null,
        "update:closeOnOutsideClick": null,
        "update:container": null,
        "update:deferRendering": null,
        "update:delay": null,
        "update:focusStateEnabled": null,
        "update:height": null,
        "update:hideOnOutsideClick": null,
        "update:hideOnParentScroll": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:indicatorSrc": null,
        "update:maxHeight": null,
        "update:maxWidth": null,
        "update:message": null,
        "update:minHeight": null,
        "update:minWidth": null,
        "update:onContentReady": null,
        "update:onDisposing": null,
        "update:onHidden": null,
        "update:onHiding": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:onShowing": null,
        "update:onShown": null,
        "update:position": null,
        "update:rtlEnabled": null,
        "update:shading": null,
        "update:shadingColor": null,
        "update:showIndicator": null,
        "update:showPane": null,
        "update:visible": null,
        "update:width": null,
        "update:wrapperAttr": null,
    },
    computed: {
        instance() {
            return this.$_instance;
        }
    },
    beforeCreate() {
        this.$_WidgetClass = load_panel_1.default;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            animation: { isCollectionItem: false, optionName: "animation" },
            position: { isCollectionItem: false, optionName: "position" }
        };
    }
};
(0, index_1.prepareComponentConfig)(componentConfig);
const DxLoadPanel = (0, vue_1.defineComponent)(componentConfig);
exports.DxLoadPanel = DxLoadPanel;
const DxAnimationConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:hide": null,
        "update:show": null,
    },
    props: {
        hide: [Object, Number, String],
        show: [Object, Number, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAnimationConfig);
const DxAnimation = (0, vue_1.defineComponent)(DxAnimationConfig);
exports.DxAnimation = DxAnimation;
DxAnimation.$_optionName = "animation";
DxAnimation.$_expectedChildren = {
    hide: { isCollectionItem: false, optionName: "hide" },
    show: { isCollectionItem: false, optionName: "show" }
};
const DxAtConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxAtConfig);
const DxAt = (0, vue_1.defineComponent)(DxAtConfig);
exports.DxAt = DxAt;
DxAt.$_optionName = "at";
const DxBoundaryOffsetConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxBoundaryOffsetConfig);
const DxBoundaryOffset = (0, vue_1.defineComponent)(DxBoundaryOffsetConfig);
exports.DxBoundaryOffset = DxBoundaryOffset;
DxBoundaryOffset.$_optionName = "boundaryOffset";
const DxCollisionConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxCollisionConfig);
const DxCollision = (0, vue_1.defineComponent)(DxCollisionConfig);
exports.DxCollision = DxCollision;
DxCollision.$_optionName = "collision";
const DxFromConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:left": null,
        "update:opacity": null,
        "update:position": null,
        "update:scale": null,
        "update:top": null,
    },
    props: {
        left: Number,
        opacity: Number,
        position: Object,
        scale: Number,
        top: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxFromConfig);
const DxFrom = (0, vue_1.defineComponent)(DxFromConfig);
exports.DxFrom = DxFrom;
DxFrom.$_optionName = "from";
DxFrom.$_expectedChildren = {
    position: { isCollectionItem: false, optionName: "position" }
};
const DxHideConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: Object,
        staggerDelay: Number,
        start: Function,
        to: Object,
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxHideConfig);
const DxHide = (0, vue_1.defineComponent)(DxHideConfig);
exports.DxHide = DxHide;
DxHide.$_optionName = "hide";
DxHide.$_expectedChildren = {
    from: { isCollectionItem: false, optionName: "from" },
    to: { isCollectionItem: false, optionName: "to" }
};
const DxMyConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: String,
        y: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxMyConfig);
const DxMy = (0, vue_1.defineComponent)(DxMyConfig);
exports.DxMy = DxMy;
DxMy.$_optionName = "my";
const DxOffsetConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:x": null,
        "update:y": null,
    },
    props: {
        x: Number,
        y: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxOffsetConfig);
const DxOffset = (0, vue_1.defineComponent)(DxOffsetConfig);
exports.DxOffset = DxOffset;
DxOffset.$_optionName = "offset";
const DxPositionConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:at": null,
        "update:boundary": null,
        "update:boundaryOffset": null,
        "update:collision": null,
        "update:my": null,
        "update:of": null,
        "update:offset": null,
    },
    props: {
        at: [Object, String],
        boundary: {},
        boundaryOffset: [Object, String],
        collision: [String, Object],
        my: [Object, String],
        of: {},
        offset: [Object, String]
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxPositionConfig);
const DxPosition = (0, vue_1.defineComponent)(DxPositionConfig);
exports.DxPosition = DxPosition;
DxPosition.$_optionName = "position";
DxPosition.$_expectedChildren = {
    at: { isCollectionItem: false, optionName: "at" },
    boundaryOffset: { isCollectionItem: false, optionName: "boundaryOffset" },
    collision: { isCollectionItem: false, optionName: "collision" },
    my: { isCollectionItem: false, optionName: "my" },
    offset: { isCollectionItem: false, optionName: "offset" }
};
const DxShowConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:complete": null,
        "update:delay": null,
        "update:direction": null,
        "update:duration": null,
        "update:easing": null,
        "update:from": null,
        "update:staggerDelay": null,
        "update:start": null,
        "update:to": null,
        "update:type": null,
    },
    props: {
        complete: Function,
        delay: Number,
        direction: String,
        duration: Number,
        easing: String,
        from: Object,
        staggerDelay: Number,
        start: Function,
        to: Object,
        type: String
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxShowConfig);
const DxShow = (0, vue_1.defineComponent)(DxShowConfig);
exports.DxShow = DxShow;
DxShow.$_optionName = "show";
DxShow.$_expectedChildren = {
    from: { isCollectionItem: false, optionName: "from" },
    to: { isCollectionItem: false, optionName: "to" }
};
const DxToConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:left": null,
        "update:opacity": null,
        "update:position": null,
        "update:scale": null,
        "update:top": null,
    },
    props: {
        left: Number,
        opacity: Number,
        position: Object,
        scale: Number,
        top: Number
    }
};
(0, index_2.prepareConfigurationComponentConfig)(DxToConfig);
const DxTo = (0, vue_1.defineComponent)(DxToConfig);
exports.DxTo = DxTo;
DxTo.$_optionName = "to";
DxTo.$_expectedChildren = {
    position: { isCollectionItem: false, optionName: "position" }
};
exports.default = DxLoadPanel;
