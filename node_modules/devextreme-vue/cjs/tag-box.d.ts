/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { PropType } from "vue";
import TagBox, { Properties } from "devextreme/ui/tag_box";
import DataSource from "devextreme/data/data_source";
import dxOverlay from "devextreme/ui/overlay";
import DOMComponent from "devextreme/core/dom_component";
import dxPopup from "devextreme/ui/popup";
import { ApplyValueMode, TextEditorButton, LabelMode, SimplifiedSearchMode, SelectAllMode, EditorStyle, ValidationMessageMode, Position, ValidationStatus, HorizontalAlignment, VerticalAlignment, TextEditorButtonLocation, PositionAlignment, Direction, ButtonStyle, ToolbarItemLocation, ToolbarItemComponent } from "devextreme/common";
import { DropDownPredefinedButton } from "devextreme/ui/drop_down_editor/ui.drop_down_editor";
import { DataSourceOptions } from "devextreme/common/data";
import { Store } from "devextreme/data/store";
import { dxPopupOptions, ToolbarLocation } from "devextreme/ui/popup";
import { ChangeEvent, ClosedEvent, ContentReadyEvent, CustomItemCreatingEvent, DisposingEvent, EnterKeyEvent, FocusInEvent, FocusOutEvent, InitializedEvent, InputEvent, ItemClickEvent, KeyDownEvent, KeyUpEvent, MultiTagPreparingEvent, OpenedEvent, OptionChangedEvent, SelectAllValueChangedEvent, SelectionChangedEvent, ValueChangedEvent } from "devextreme/ui/tag_box";
import { AnimationConfig, CollisionResolution, PositionConfig, AnimationState, AnimationType, CollisionResolutionCombination } from "devextreme/common/core/animation";
import { dxButtonOptions, ClickEvent, ContentReadyEvent as ButtonContentReadyEvent, DisposingEvent as ButtonDisposingEvent, InitializedEvent as ButtonInitializedEvent, OptionChangedEvent as ButtonOptionChangedEvent } from "devextreme/ui/button";
import { event } from "devextreme/events/events.types";
import { EventInfo } from "devextreme/common/core/events";
import { Component } from "devextreme/core/component";
import { LocateInMenuMode, ShowTextMode } from "devextreme/ui/toolbar";
type AccessibleOptions = Pick<Properties, "acceptCustomValue" | "accessKey" | "activeStateEnabled" | "applyValueMode" | "buttons" | "customItemCreateEvent" | "dataSource" | "deferRendering" | "disabled" | "displayExpr" | "dropDownButtonTemplate" | "dropDownOptions" | "elementAttr" | "fieldTemplate" | "focusStateEnabled" | "grouped" | "groupTemplate" | "height" | "hideSelectedItems" | "hint" | "hoverStateEnabled" | "inputAttr" | "isDirty" | "isValid" | "items" | "itemTemplate" | "label" | "labelMode" | "maxDisplayedTags" | "maxFilterQueryLength" | "maxLength" | "minSearchLength" | "multiline" | "name" | "noDataText" | "onChange" | "onClosed" | "onContentReady" | "onCustomItemCreating" | "onDisposing" | "onEnterKey" | "onFocusIn" | "onFocusOut" | "onInitialized" | "onInput" | "onItemClick" | "onKeyDown" | "onKeyUp" | "onMultiTagPreparing" | "onOpened" | "onOptionChanged" | "onSelectAllValueChanged" | "onSelectionChanged" | "onValueChanged" | "opened" | "openOnFieldClick" | "placeholder" | "readOnly" | "rtlEnabled" | "searchEnabled" | "searchExpr" | "searchMode" | "searchTimeout" | "selectAllMode" | "selectAllText" | "selectedItems" | "showClearButton" | "showDataBeforeSearch" | "showDropDownButton" | "showMultiTagOnly" | "showSelectionControls" | "stylingMode" | "tabIndex" | "tagTemplate" | "text" | "useItemTextAsTitle" | "validationError" | "validationErrors" | "validationMessageMode" | "validationMessagePosition" | "validationStatus" | "value" | "valueChangeEvent" | "valueExpr" | "visible" | "width" | "wrapItemText">;
interface DxTagBox extends AccessibleOptions {
    readonly instance?: TagBox;
}
declare const DxTagBox: import("@vue/runtime-core").DefineComponent<{
    acceptCustomValue: BooleanConstructor;
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    applyValueMode: PropType<ApplyValueMode>;
    buttons: PropType<(DropDownPredefinedButton | TextEditorButton)[]>;
    customItemCreateEvent: StringConstructor;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    displayExpr: PropType<string | ((item: any) => string)>;
    dropDownButtonTemplate: {};
    dropDownOptions: PropType<Record<string, any> | dxPopupOptions<any>>;
    elementAttr: PropType<Record<string, any>>;
    fieldTemplate: {};
    focusStateEnabled: BooleanConstructor;
    grouped: BooleanConstructor;
    groupTemplate: {};
    height: PropType<string | number | (() => number | string)>;
    hideSelectedItems: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    inputAttr: {};
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    items: PropType<any[]>;
    itemTemplate: {};
    label: StringConstructor;
    labelMode: PropType<LabelMode>;
    maxDisplayedTags: NumberConstructor;
    maxFilterQueryLength: NumberConstructor;
    maxLength: (NumberConstructor | StringConstructor)[];
    minSearchLength: NumberConstructor;
    multiline: BooleanConstructor;
    name: StringConstructor;
    noDataText: StringConstructor;
    onChange: PropType<(e: ChangeEvent) => void>;
    onClosed: PropType<(e: ClosedEvent) => void>;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onCustomItemCreating: PropType<(e: CustomItemCreatingEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onEnterKey: PropType<(e: EnterKeyEvent) => void>;
    onFocusIn: PropType<(e: FocusInEvent) => void>;
    onFocusOut: PropType<(e: FocusOutEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onInput: PropType<(e: InputEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onKeyDown: PropType<(e: KeyDownEvent) => void>;
    onKeyUp: PropType<(e: KeyUpEvent) => void>;
    onMultiTagPreparing: PropType<(e: MultiTagPreparingEvent) => void>;
    onOpened: PropType<(e: OpenedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onSelectAllValueChanged: PropType<(e: SelectAllValueChangedEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    opened: BooleanConstructor;
    openOnFieldClick: BooleanConstructor;
    placeholder: StringConstructor;
    readOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    searchEnabled: BooleanConstructor;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    searchMode: PropType<SimplifiedSearchMode>;
    searchTimeout: NumberConstructor;
    selectAllMode: PropType<SelectAllMode>;
    selectAllText: StringConstructor;
    selectedItems: PropType<any[]>;
    showClearButton: BooleanConstructor;
    showDataBeforeSearch: BooleanConstructor;
    showDropDownButton: BooleanConstructor;
    showMultiTagOnly: BooleanConstructor;
    showSelectionControls: BooleanConstructor;
    stylingMode: PropType<EditorStyle>;
    tabIndex: NumberConstructor;
    tagTemplate: {};
    text: StringConstructor;
    useItemTextAsTitle: BooleanConstructor;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationMessageMode: PropType<ValidationMessageMode>;
    validationMessagePosition: PropType<"auto" | Position>;
    validationStatus: PropType<ValidationStatus>;
    value: PropType<any[]>;
    valueChangeEvent: StringConstructor;
    valueExpr: PropType<string | ((item: any) => string | number | boolean)>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
    wrapItemText: BooleanConstructor;
}, unknown, unknown, {
    instance(): TagBox;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:acceptCustomValue": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:applyValueMode": null;
    "update:buttons": null;
    "update:customItemCreateEvent": null;
    "update:dataSource": null;
    "update:deferRendering": null;
    "update:disabled": null;
    "update:displayExpr": null;
    "update:dropDownButtonTemplate": null;
    "update:dropDownOptions": null;
    "update:elementAttr": null;
    "update:fieldTemplate": null;
    "update:focusStateEnabled": null;
    "update:grouped": null;
    "update:groupTemplate": null;
    "update:height": null;
    "update:hideSelectedItems": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:inputAttr": null;
    "update:isDirty": null;
    "update:isValid": null;
    "update:items": null;
    "update:itemTemplate": null;
    "update:label": null;
    "update:labelMode": null;
    "update:maxDisplayedTags": null;
    "update:maxFilterQueryLength": null;
    "update:maxLength": null;
    "update:minSearchLength": null;
    "update:multiline": null;
    "update:name": null;
    "update:noDataText": null;
    "update:onChange": null;
    "update:onClosed": null;
    "update:onContentReady": null;
    "update:onCustomItemCreating": null;
    "update:onDisposing": null;
    "update:onEnterKey": null;
    "update:onFocusIn": null;
    "update:onFocusOut": null;
    "update:onInitialized": null;
    "update:onInput": null;
    "update:onItemClick": null;
    "update:onKeyDown": null;
    "update:onKeyUp": null;
    "update:onMultiTagPreparing": null;
    "update:onOpened": null;
    "update:onOptionChanged": null;
    "update:onSelectAllValueChanged": null;
    "update:onSelectionChanged": null;
    "update:onValueChanged": null;
    "update:opened": null;
    "update:openOnFieldClick": null;
    "update:placeholder": null;
    "update:readOnly": null;
    "update:rtlEnabled": null;
    "update:searchEnabled": null;
    "update:searchExpr": null;
    "update:searchMode": null;
    "update:searchTimeout": null;
    "update:selectAllMode": null;
    "update:selectAllText": null;
    "update:selectedItems": null;
    "update:showClearButton": null;
    "update:showDataBeforeSearch": null;
    "update:showDropDownButton": null;
    "update:showMultiTagOnly": null;
    "update:showSelectionControls": null;
    "update:stylingMode": null;
    "update:tabIndex": null;
    "update:tagTemplate": null;
    "update:text": null;
    "update:useItemTextAsTitle": null;
    "update:validationError": null;
    "update:validationErrors": null;
    "update:validationMessageMode": null;
    "update:validationMessagePosition": null;
    "update:validationStatus": null;
    "update:value": null;
    "update:valueChangeEvent": null;
    "update:valueExpr": null;
    "update:visible": null;
    "update:width": null;
    "update:wrapItemText": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    acceptCustomValue: BooleanConstructor;
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    applyValueMode: PropType<ApplyValueMode>;
    buttons: PropType<(DropDownPredefinedButton | TextEditorButton)[]>;
    customItemCreateEvent: StringConstructor;
    dataSource: PropType<string | any[] | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | null>;
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    displayExpr: PropType<string | ((item: any) => string)>;
    dropDownButtonTemplate: {};
    dropDownOptions: PropType<Record<string, any> | dxPopupOptions<any>>;
    elementAttr: PropType<Record<string, any>>;
    fieldTemplate: {};
    focusStateEnabled: BooleanConstructor;
    grouped: BooleanConstructor;
    groupTemplate: {};
    height: PropType<string | number | (() => number | string)>;
    hideSelectedItems: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    inputAttr: {};
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    items: PropType<any[]>;
    itemTemplate: {};
    label: StringConstructor;
    labelMode: PropType<LabelMode>;
    maxDisplayedTags: NumberConstructor;
    maxFilterQueryLength: NumberConstructor;
    maxLength: (NumberConstructor | StringConstructor)[];
    minSearchLength: NumberConstructor;
    multiline: BooleanConstructor;
    name: StringConstructor;
    noDataText: StringConstructor;
    onChange: PropType<(e: ChangeEvent) => void>;
    onClosed: PropType<(e: ClosedEvent) => void>;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onCustomItemCreating: PropType<(e: CustomItemCreatingEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onEnterKey: PropType<(e: EnterKeyEvent) => void>;
    onFocusIn: PropType<(e: FocusInEvent) => void>;
    onFocusOut: PropType<(e: FocusOutEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onInput: PropType<(e: InputEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onKeyDown: PropType<(e: KeyDownEvent) => void>;
    onKeyUp: PropType<(e: KeyUpEvent) => void>;
    onMultiTagPreparing: PropType<(e: MultiTagPreparingEvent) => void>;
    onOpened: PropType<(e: OpenedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onSelectAllValueChanged: PropType<(e: SelectAllValueChangedEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    opened: BooleanConstructor;
    openOnFieldClick: BooleanConstructor;
    placeholder: StringConstructor;
    readOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    searchEnabled: BooleanConstructor;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    searchMode: PropType<SimplifiedSearchMode>;
    searchTimeout: NumberConstructor;
    selectAllMode: PropType<SelectAllMode>;
    selectAllText: StringConstructor;
    selectedItems: PropType<any[]>;
    showClearButton: BooleanConstructor;
    showDataBeforeSearch: BooleanConstructor;
    showDropDownButton: BooleanConstructor;
    showMultiTagOnly: BooleanConstructor;
    showSelectionControls: BooleanConstructor;
    stylingMode: PropType<EditorStyle>;
    tabIndex: NumberConstructor;
    tagTemplate: {};
    text: StringConstructor;
    useItemTextAsTitle: BooleanConstructor;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationMessageMode: PropType<ValidationMessageMode>;
    validationMessagePosition: PropType<"auto" | Position>;
    validationStatus: PropType<ValidationStatus>;
    value: PropType<any[]>;
    valueChangeEvent: StringConstructor;
    valueExpr: PropType<string | ((item: any) => string | number | boolean)>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
    wrapItemText: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deferRendering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:noDataText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedItems"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:buttons"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dropDownButtonTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dropDownOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:grouped"?: ((...args: any[]) => any) | undefined;
    "onUpdate:groupTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:inputAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isDirty"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isValid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:labelMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minSearchLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onChange"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onClosed"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEnterKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusIn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusOut"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInput"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onKeyDown"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onKeyUp"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOpened"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onValueChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opened"?: ((...args: any[]) => any) | undefined;
    "onUpdate:openOnFieldClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:readOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showClearButton"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showDropDownButton"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useItemTextAsTitle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationError"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationErrors"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationMessageMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationMessagePosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationStatus"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueChangeEvent"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wrapItemText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:acceptCustomValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:applyValueMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fieldTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectAllMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:multiline"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectAllValueChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectAllText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showSelectionControls"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showDataBeforeSearch"?: ((...args: any[]) => any) | undefined;
    "onUpdate:customItemCreateEvent"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCustomItemCreating"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hideSelectedItems"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxDisplayedTags"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxFilterQueryLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onMultiTagPreparing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showMultiTagOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tagTemplate"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    deferRendering: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    grouped: boolean;
    isDirty: boolean;
    isValid: boolean;
    opened: boolean;
    openOnFieldClick: boolean;
    readOnly: boolean;
    showClearButton: boolean;
    showDropDownButton: boolean;
    useItemTextAsTitle: boolean;
    wrapItemText: boolean;
    searchEnabled: boolean;
    showDataBeforeSearch: boolean;
    acceptCustomValue: boolean;
    multiline: boolean;
    showSelectionControls: boolean;
    hideSelectedItems: boolean;
    showMultiTagOnly: boolean;
}>;
declare const DxAnimation: import("@vue/runtime-core").DefineComponent<{
    hide: PropType<string | number | Record<string, any> | AnimationConfig>;
    show: PropType<string | number | Record<string, any> | AnimationConfig>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:hide": null;
    "update:show": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    hide: PropType<string | number | Record<string, any> | AnimationConfig>;
    show: PropType<string | number | Record<string, any> | AnimationConfig>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hide"?: ((...args: any[]) => any) | undefined;
    "onUpdate:show"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxAt: import("@vue/runtime-core").DefineComponent<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxBoundaryOffset: import("@vue/runtime-core").DefineComponent<{
    x: NumberConstructor;
    y: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: NumberConstructor;
    y: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxButton: import("@vue/runtime-core").DefineComponent<{
    location: PropType<TextEditorButtonLocation>;
    name: StringConstructor;
    options: PropType<Record<string, any> | dxButtonOptions>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:location": null;
    "update:name": null;
    "update:options": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    location: PropType<TextEditorButtonLocation>;
    name: StringConstructor;
    options: PropType<Record<string, any> | dxButtonOptions>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxCollision: import("@vue/runtime-core").DefineComponent<{
    x: PropType<CollisionResolution>;
    y: PropType<CollisionResolution>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: PropType<CollisionResolution>;
    y: PropType<CollisionResolution>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxDropDownOptions: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    animation: PropType<Record<string, any>>;
    bindingOptions: PropType<Record<string, any>>;
    closeOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    container: {};
    contentTemplate: {};
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    dragAndResizeArea: {};
    dragEnabled: BooleanConstructor;
    dragOutsideBoundary: BooleanConstructor;
    enableBodyScroll: BooleanConstructor;
    focusStateEnabled: BooleanConstructor;
    fullScreen: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hideOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    hideOnParentScroll: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    maxHeight: PropType<string | number | (() => number | string)>;
    maxWidth: PropType<string | number | (() => number | string)>;
    minHeight: PropType<string | number | (() => number | string)>;
    minWidth: PropType<string | number | (() => number | string)>;
    onContentReady: PropType<(e: EventInfo<any>) => void>;
    onDisposing: PropType<(e: EventInfo<any>) => void>;
    onHidden: PropType<(e: EventInfo<any>) => void>;
    onHiding: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onInitialized: PropType<(e: {
        component: Component<any>;
        element: any;
    }) => void>;
    onOptionChanged: PropType<(e: {
        component: DOMComponent;
        element: any;
        fullName: string;
        model: any;
        name: string;
        previousValue: any;
        value: any;
    }) => void>;
    onResize: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeEnd: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeStart: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onShowing: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onShown: PropType<(e: EventInfo<any>) => void>;
    onTitleRendered: PropType<(e: {
        component: dxPopup;
        element: any;
        model: any;
        titleElement: any;
    }) => void>;
    position: PropType<Record<string, any> | PositionAlignment | PositionConfig | (() => void)>;
    resizeEnabled: BooleanConstructor;
    restorePosition: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    shading: BooleanConstructor;
    shadingColor: StringConstructor;
    showCloseButton: BooleanConstructor;
    showTitle: BooleanConstructor;
    tabIndex: NumberConstructor;
    title: StringConstructor;
    titleTemplate: {};
    toolbarItems: PropType<import("devextreme/artifacts/npm/devextreme/ui/popup").ToolbarItem[]>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
    wrapperAttr: {};
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:animation": null;
    "update:bindingOptions": null;
    "update:closeOnOutsideClick": null;
    "update:container": null;
    "update:contentTemplate": null;
    "update:deferRendering": null;
    "update:disabled": null;
    "update:dragAndResizeArea": null;
    "update:dragEnabled": null;
    "update:dragOutsideBoundary": null;
    "update:enableBodyScroll": null;
    "update:focusStateEnabled": null;
    "update:fullScreen": null;
    "update:height": null;
    "update:hideOnOutsideClick": null;
    "update:hideOnParentScroll": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:maxHeight": null;
    "update:maxWidth": null;
    "update:minHeight": null;
    "update:minWidth": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onHidden": null;
    "update:onHiding": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:onResize": null;
    "update:onResizeEnd": null;
    "update:onResizeStart": null;
    "update:onShowing": null;
    "update:onShown": null;
    "update:onTitleRendered": null;
    "update:position": null;
    "update:resizeEnabled": null;
    "update:restorePosition": null;
    "update:rtlEnabled": null;
    "update:shading": null;
    "update:shadingColor": null;
    "update:showCloseButton": null;
    "update:showTitle": null;
    "update:tabIndex": null;
    "update:title": null;
    "update:titleTemplate": null;
    "update:toolbarItems": null;
    "update:visible": null;
    "update:width": null;
    "update:wrapperAttr": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    animation: PropType<Record<string, any>>;
    bindingOptions: PropType<Record<string, any>>;
    closeOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    container: {};
    contentTemplate: {};
    deferRendering: BooleanConstructor;
    disabled: BooleanConstructor;
    dragAndResizeArea: {};
    dragEnabled: BooleanConstructor;
    dragOutsideBoundary: BooleanConstructor;
    enableBodyScroll: BooleanConstructor;
    focusStateEnabled: BooleanConstructor;
    fullScreen: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hideOnOutsideClick: PropType<boolean | ((event: event) => boolean)>;
    hideOnParentScroll: BooleanConstructor;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    maxHeight: PropType<string | number | (() => number | string)>;
    maxWidth: PropType<string | number | (() => number | string)>;
    minHeight: PropType<string | number | (() => number | string)>;
    minWidth: PropType<string | number | (() => number | string)>;
    onContentReady: PropType<(e: EventInfo<any>) => void>;
    onDisposing: PropType<(e: EventInfo<any>) => void>;
    onHidden: PropType<(e: EventInfo<any>) => void>;
    onHiding: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onInitialized: PropType<(e: {
        component: Component<any>;
        element: any;
    }) => void>;
    onOptionChanged: PropType<(e: {
        component: DOMComponent;
        element: any;
        fullName: string;
        model: any;
        name: string;
        previousValue: any;
        value: any;
    }) => void>;
    onResize: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeEnd: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onResizeStart: PropType<(e: {
        component: dxPopup;
        element: any;
        event: event;
        height: number;
        model: any;
        width: number;
    }) => void>;
    onShowing: PropType<(e: {
        cancel: boolean | any;
        component: dxOverlay<any>;
        element: any;
        model: any;
    }) => void>;
    onShown: PropType<(e: EventInfo<any>) => void>;
    onTitleRendered: PropType<(e: {
        component: dxPopup;
        element: any;
        model: any;
        titleElement: any;
    }) => void>;
    position: PropType<Record<string, any> | PositionAlignment | PositionConfig | (() => void)>;
    resizeEnabled: BooleanConstructor;
    restorePosition: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    shading: BooleanConstructor;
    shadingColor: StringConstructor;
    showCloseButton: BooleanConstructor;
    showTitle: BooleanConstructor;
    tabIndex: NumberConstructor;
    title: StringConstructor;
    titleTemplate: {};
    toolbarItems: PropType<import("devextreme/artifacts/npm/devextreme/ui/popup").ToolbarItem[]>;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
    wrapperAttr: {};
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:deferRendering"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:title"?: ((...args: any[]) => any) | undefined;
    "onUpdate:titleTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showTitle"?: ((...args: any[]) => any) | undefined;
    "onUpdate:animation"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:closeOnOutsideClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:container"?: ((...args: any[]) => any) | undefined;
    "onUpdate:contentTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragAndResizeArea"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dragOutsideBoundary"?: ((...args: any[]) => any) | undefined;
    "onUpdate:enableBodyScroll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:fullScreen"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hideOnOutsideClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hideOnParentScroll"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxHeight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minHeight"?: ((...args: any[]) => any) | undefined;
    "onUpdate:minWidth"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onHidden"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onHiding"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResize"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResizeEnd"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onResizeStart"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onShowing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onShown"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onTitleRendered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:resizeEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:restorePosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shading"?: ((...args: any[]) => any) | undefined;
    "onUpdate:shadingColor"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showCloseButton"?: ((...args: any[]) => any) | undefined;
    "onUpdate:toolbarItems"?: ((...args: any[]) => any) | undefined;
    "onUpdate:wrapperAttr"?: ((...args: any[]) => any) | undefined;
}, {
    deferRendering: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    showTitle: boolean;
    dragEnabled: boolean;
    dragOutsideBoundary: boolean;
    enableBodyScroll: boolean;
    fullScreen: boolean;
    hideOnParentScroll: boolean;
    resizeEnabled: boolean;
    restorePosition: boolean;
    shading: boolean;
    showCloseButton: boolean;
}>;
declare const DxFrom: import("@vue/runtime-core").DefineComponent<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:left": null;
    "update:opacity": null;
    "update:position": null;
    "update:scale": null;
    "update:top": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:left"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scale"?: ((...args: any[]) => any) | undefined;
    "onUpdate:top"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxHide: import("@vue/runtime-core").DefineComponent<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:complete": null;
    "update:delay": null;
    "update:direction": null;
    "update:duration": null;
    "update:easing": null;
    "update:from": null;
    "update:staggerDelay": null;
    "update:start": null;
    "update:to": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:complete"?: ((...args: any[]) => any) | undefined;
    "onUpdate:delay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:direction"?: ((...args: any[]) => any) | undefined;
    "onUpdate:duration"?: ((...args: any[]) => any) | undefined;
    "onUpdate:easing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:from"?: ((...args: any[]) => any) | undefined;
    "onUpdate:staggerDelay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:start"?: ((...args: any[]) => any) | undefined;
    "onUpdate:to"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxItem: import("@vue/runtime-core").DefineComponent<{
    disabled: BooleanConstructor;
    html: StringConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:disabled": null;
    "update:html": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    disabled: BooleanConstructor;
    html: StringConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
declare const DxMy: import("@vue/runtime-core").DefineComponent<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: PropType<HorizontalAlignment>;
    y: PropType<VerticalAlignment>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxOffset: import("@vue/runtime-core").DefineComponent<{
    x: NumberConstructor;
    y: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:x": null;
    "update:y": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    x: NumberConstructor;
    y: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:x"?: ((...args: any[]) => any) | undefined;
    "onUpdate:y"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxOptions: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    icon: StringConstructor;
    onClick: PropType<(e: ClickEvent) => void>;
    onContentReady: PropType<(e: ButtonContentReadyEvent) => void>;
    onDisposing: PropType<(e: ButtonDisposingEvent) => void>;
    onInitialized: PropType<(e: ButtonInitializedEvent) => void>;
    onOptionChanged: PropType<(e: ButtonOptionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    useSubmitBehavior: BooleanConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:bindingOptions": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:icon": null;
    "update:onClick": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:rtlEnabled": null;
    "update:stylingMode": null;
    "update:tabIndex": null;
    "update:template": null;
    "update:text": null;
    "update:type": null;
    "update:useSubmitBehavior": null;
    "update:validationGroup": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    icon: StringConstructor;
    onClick: PropType<(e: ClickEvent) => void>;
    onContentReady: PropType<(e: ButtonContentReadyEvent) => void>;
    onDisposing: PropType<(e: ButtonDisposingEvent) => void>;
    onInitialized: PropType<(e: ButtonInitializedEvent) => void>;
    onOptionChanged: PropType<(e: ButtonOptionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    useSubmitBehavior: BooleanConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useSubmitBehavior"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationGroup"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    useSubmitBehavior: boolean;
}>;
declare const DxPosition: import("@vue/runtime-core").DefineComponent<{
    at: PropType<Record<string, any> | PositionAlignment>;
    boundary: {};
    boundaryOffset: PropType<string | Record<string, any>>;
    collision: PropType<Record<string, any> | CollisionResolutionCombination>;
    my: PropType<Record<string, any> | PositionAlignment>;
    of: {};
    offset: PropType<string | Record<string, any>>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:at": null;
    "update:boundary": null;
    "update:boundaryOffset": null;
    "update:collision": null;
    "update:my": null;
    "update:of": null;
    "update:offset": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    at: PropType<Record<string, any> | PositionAlignment>;
    boundary: {};
    boundaryOffset: PropType<string | Record<string, any>>;
    collision: PropType<Record<string, any> | CollisionResolutionCombination>;
    my: PropType<Record<string, any> | PositionAlignment>;
    of: {};
    offset: PropType<string | Record<string, any>>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:at"?: ((...args: any[]) => any) | undefined;
    "onUpdate:boundary"?: ((...args: any[]) => any) | undefined;
    "onUpdate:boundaryOffset"?: ((...args: any[]) => any) | undefined;
    "onUpdate:collision"?: ((...args: any[]) => any) | undefined;
    "onUpdate:my"?: ((...args: any[]) => any) | undefined;
    "onUpdate:of"?: ((...args: any[]) => any) | undefined;
    "onUpdate:offset"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxShow: import("@vue/runtime-core").DefineComponent<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:complete": null;
    "update:delay": null;
    "update:direction": null;
    "update:duration": null;
    "update:easing": null;
    "update:from": null;
    "update:staggerDelay": null;
    "update:start": null;
    "update:to": null;
    "update:type": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    complete: PropType<($element: any, config: AnimationConfig) => void>;
    delay: NumberConstructor;
    direction: PropType<Direction>;
    duration: NumberConstructor;
    easing: StringConstructor;
    from: PropType<Record<string, any> | AnimationState>;
    staggerDelay: NumberConstructor;
    start: PropType<($element: any, config: AnimationConfig) => void>;
    to: PropType<Record<string, any> | AnimationState>;
    type: PropType<AnimationType>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:complete"?: ((...args: any[]) => any) | undefined;
    "onUpdate:delay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:direction"?: ((...args: any[]) => any) | undefined;
    "onUpdate:duration"?: ((...args: any[]) => any) | undefined;
    "onUpdate:easing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:from"?: ((...args: any[]) => any) | undefined;
    "onUpdate:staggerDelay"?: ((...args: any[]) => any) | undefined;
    "onUpdate:start"?: ((...args: any[]) => any) | undefined;
    "onUpdate:to"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxTo: import("@vue/runtime-core").DefineComponent<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:left": null;
    "update:opacity": null;
    "update:position": null;
    "update:scale": null;
    "update:top": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    left: NumberConstructor;
    opacity: NumberConstructor;
    position: PropType<Record<string, any> | PositionConfig>;
    scale: NumberConstructor;
    top: NumberConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:position"?: ((...args: any[]) => any) | undefined;
    "onUpdate:left"?: ((...args: any[]) => any) | undefined;
    "onUpdate:opacity"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scale"?: ((...args: any[]) => any) | undefined;
    "onUpdate:top"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxToolbarItem: import("@vue/runtime-core").DefineComponent<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    toolbar: PropType<ToolbarLocation>;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:cssClass": null;
    "update:disabled": null;
    "update:html": null;
    "update:locateInMenu": null;
    "update:location": null;
    "update:menuItemTemplate": null;
    "update:options": null;
    "update:showText": null;
    "update:template": null;
    "update:text": null;
    "update:toolbar": null;
    "update:visible": null;
    "update:widget": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    cssClass: StringConstructor;
    disabled: BooleanConstructor;
    html: StringConstructor;
    locateInMenu: PropType<LocateInMenuMode>;
    location: PropType<ToolbarItemLocation>;
    menuItemTemplate: {};
    options: {};
    showText: PropType<ShowTextMode>;
    template: {};
    text: StringConstructor;
    toolbar: PropType<ToolbarLocation>;
    visible: BooleanConstructor;
    widget: PropType<ToolbarItemComponent>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
    "onUpdate:cssClass"?: ((...args: any[]) => any) | undefined;
    "onUpdate:locateInMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:menuItemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:toolbar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:widget"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
}>;
export default DxTagBox;
export { DxTagBox, DxAnimation, DxAt, DxBoundaryOffset, DxButton, DxCollision, DxDropDownOptions, DxFrom, DxHide, DxItem, DxMy, DxOffset, DxOptions, DxPosition, DxShow, DxTo, DxToolbarItem };
import type * as DxTagBoxTypes from "devextreme/ui/tag_box_types";
export { DxTagBoxTypes };
