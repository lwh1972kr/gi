/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

export { ExplicitTypes } from "devextreme/ui/tree_view";
import { PropType } from "vue";
import TreeView, { Properties } from "devextreme/ui/tree_view";
import DataSource from "devextreme/data/data_source";
import { dxTreeViewNode, dxTreeViewItem, TreeViewExpandEvent, ContentReadyEvent, DisposingEvent, InitializedEvent, ItemClickEvent, ItemCollapsedEvent, ItemContextMenuEvent, ItemExpandedEvent, ItemHoldEvent, ItemRenderedEvent, ItemSelectionChangedEvent, OptionChangedEvent, SelectAllValueChangedEvent, SelectionChangedEvent, TreeViewCheckBoxMode } from "devextreme/ui/tree_view";
import { DataSourceOptions } from "devextreme/common/data";
import { Store } from "devextreme/data/store";
import { DataStructure, ScrollDirection, SearchMode, SingleOrMultiple, TextEditorButtonLocation, ButtonStyle, TextEditorButton, LabelMode, MaskMode, EditorStyle, ValidationMessageMode, Position, ValidationStatus } from "devextreme/common";
import { dxTextBoxOptions, TextBoxType, ChangeEvent, ContentReadyEvent as TextBoxContentReadyEvent, CopyEvent, CutEvent, DisposingEvent as TextBoxDisposingEvent, EnterKeyEvent, FocusInEvent, FocusOutEvent, InitializedEvent as TextBoxInitializedEvent, InputEvent, KeyDownEvent, KeyUpEvent, OptionChangedEvent as TextBoxOptionChangedEvent, PasteEvent, ValueChangedEvent } from "devextreme/ui/text_box";
import { dxButtonOptions, ClickEvent, ContentReadyEvent as ButtonContentReadyEvent, DisposingEvent as ButtonDisposingEvent, InitializedEvent as ButtonInitializedEvent, OptionChangedEvent as ButtonOptionChangedEvent } from "devextreme/ui/button";
type AccessibleOptions = Pick<Properties, "accessKey" | "activeStateEnabled" | "animationEnabled" | "collapseIcon" | "createChildren" | "dataSource" | "dataStructure" | "disabled" | "disabledExpr" | "displayExpr" | "elementAttr" | "expandAllEnabled" | "expandedExpr" | "expandEvent" | "expandIcon" | "expandNodesRecursive" | "focusStateEnabled" | "hasItemsExpr" | "height" | "hint" | "hoverStateEnabled" | "itemHoldTimeout" | "items" | "itemsExpr" | "itemTemplate" | "keyExpr" | "noDataText" | "onContentReady" | "onDisposing" | "onInitialized" | "onItemClick" | "onItemCollapsed" | "onItemContextMenu" | "onItemExpanded" | "onItemHold" | "onItemRendered" | "onItemSelectionChanged" | "onOptionChanged" | "onSelectAllValueChanged" | "onSelectionChanged" | "parentIdExpr" | "rootValue" | "rtlEnabled" | "scrollDirection" | "searchEditorOptions" | "searchEnabled" | "searchExpr" | "searchMode" | "searchTimeout" | "searchValue" | "selectAllText" | "selectByClick" | "selectedExpr" | "selectionMode" | "selectNodesRecursive" | "showCheckBoxesMode" | "tabIndex" | "useNativeScrolling" | "virtualModeEnabled" | "visible" | "width">;
interface DxTreeView extends AccessibleOptions {
    readonly instance?: TreeView;
}
declare const DxTreeView: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    animationEnabled: BooleanConstructor;
    collapseIcon: PropType<string | null>;
    createChildren: PropType<(parentNode: dxTreeViewNode) => any | Array<Record<string, any>>>;
    dataSource: PropType<string | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | dxTreeViewItem[] | null>;
    dataStructure: PropType<DataStructure>;
    disabled: BooleanConstructor;
    disabledExpr: PropType<string | (() => void)>;
    displayExpr: PropType<string | ((item: any) => string)>;
    elementAttr: PropType<Record<string, any>>;
    expandAllEnabled: BooleanConstructor;
    expandedExpr: PropType<string | (() => void)>;
    expandEvent: PropType<TreeViewExpandEvent>;
    expandIcon: PropType<string | null>;
    expandNodesRecursive: BooleanConstructor;
    focusStateEnabled: BooleanConstructor;
    hasItemsExpr: PropType<string | (() => void)>;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    itemHoldTimeout: NumberConstructor;
    items: PropType<dxTreeViewItem[]>;
    itemsExpr: PropType<string | (() => void)>;
    itemTemplate: {};
    keyExpr: PropType<string | (() => void)>;
    noDataText: StringConstructor;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onItemCollapsed: PropType<(e: ItemCollapsedEvent) => void>;
    onItemContextMenu: PropType<(e: ItemContextMenuEvent) => void>;
    onItemExpanded: PropType<(e: ItemExpandedEvent) => void>;
    onItemHold: PropType<(e: ItemHoldEvent) => void>;
    onItemRendered: PropType<(e: ItemRenderedEvent) => void>;
    onItemSelectionChanged: PropType<(e: ItemSelectionChangedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onSelectAllValueChanged: PropType<(e: SelectAllValueChangedEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    parentIdExpr: PropType<string | (() => void)>;
    rootValue: {};
    rtlEnabled: BooleanConstructor;
    scrollDirection: PropType<ScrollDirection>;
    searchEditorOptions: PropType<Record<string, any> | dxTextBoxOptions<any>>;
    searchEnabled: BooleanConstructor;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    searchMode: PropType<SearchMode>;
    searchTimeout: NumberConstructor;
    searchValue: StringConstructor;
    selectAllText: StringConstructor;
    selectByClick: BooleanConstructor;
    selectedExpr: PropType<string | (() => void)>;
    selectionMode: PropType<SingleOrMultiple>;
    selectNodesRecursive: BooleanConstructor;
    showCheckBoxesMode: PropType<TreeViewCheckBoxMode>;
    tabIndex: NumberConstructor;
    useNativeScrolling: BooleanConstructor;
    virtualModeEnabled: BooleanConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {
    instance(): TreeView;
}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:animationEnabled": null;
    "update:collapseIcon": null;
    "update:createChildren": null;
    "update:dataSource": null;
    "update:dataStructure": null;
    "update:disabled": null;
    "update:disabledExpr": null;
    "update:displayExpr": null;
    "update:elementAttr": null;
    "update:expandAllEnabled": null;
    "update:expandedExpr": null;
    "update:expandEvent": null;
    "update:expandIcon": null;
    "update:expandNodesRecursive": null;
    "update:focusStateEnabled": null;
    "update:hasItemsExpr": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:itemHoldTimeout": null;
    "update:items": null;
    "update:itemsExpr": null;
    "update:itemTemplate": null;
    "update:keyExpr": null;
    "update:noDataText": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onInitialized": null;
    "update:onItemClick": null;
    "update:onItemCollapsed": null;
    "update:onItemContextMenu": null;
    "update:onItemExpanded": null;
    "update:onItemHold": null;
    "update:onItemRendered": null;
    "update:onItemSelectionChanged": null;
    "update:onOptionChanged": null;
    "update:onSelectAllValueChanged": null;
    "update:onSelectionChanged": null;
    "update:parentIdExpr": null;
    "update:rootValue": null;
    "update:rtlEnabled": null;
    "update:scrollDirection": null;
    "update:searchEditorOptions": null;
    "update:searchEnabled": null;
    "update:searchExpr": null;
    "update:searchMode": null;
    "update:searchTimeout": null;
    "update:searchValue": null;
    "update:selectAllText": null;
    "update:selectByClick": null;
    "update:selectedExpr": null;
    "update:selectionMode": null;
    "update:selectNodesRecursive": null;
    "update:showCheckBoxesMode": null;
    "update:tabIndex": null;
    "update:useNativeScrolling": null;
    "update:virtualModeEnabled": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    animationEnabled: BooleanConstructor;
    collapseIcon: PropType<string | null>;
    createChildren: PropType<(parentNode: dxTreeViewNode) => any | Array<Record<string, any>>>;
    dataSource: PropType<string | Record<string, any> | DataSource<any, any> | DataSourceOptions<any, any, any, any> | Store<any, any> | dxTreeViewItem[] | null>;
    dataStructure: PropType<DataStructure>;
    disabled: BooleanConstructor;
    disabledExpr: PropType<string | (() => void)>;
    displayExpr: PropType<string | ((item: any) => string)>;
    elementAttr: PropType<Record<string, any>>;
    expandAllEnabled: BooleanConstructor;
    expandedExpr: PropType<string | (() => void)>;
    expandEvent: PropType<TreeViewExpandEvent>;
    expandIcon: PropType<string | null>;
    expandNodesRecursive: BooleanConstructor;
    focusStateEnabled: BooleanConstructor;
    hasItemsExpr: PropType<string | (() => void)>;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    itemHoldTimeout: NumberConstructor;
    items: PropType<dxTreeViewItem[]>;
    itemsExpr: PropType<string | (() => void)>;
    itemTemplate: {};
    keyExpr: PropType<string | (() => void)>;
    noDataText: StringConstructor;
    onContentReady: PropType<(e: ContentReadyEvent) => void>;
    onDisposing: PropType<(e: DisposingEvent) => void>;
    onInitialized: PropType<(e: InitializedEvent) => void>;
    onItemClick: PropType<(e: ItemClickEvent) => void>;
    onItemCollapsed: PropType<(e: ItemCollapsedEvent) => void>;
    onItemContextMenu: PropType<(e: ItemContextMenuEvent) => void>;
    onItemExpanded: PropType<(e: ItemExpandedEvent) => void>;
    onItemHold: PropType<(e: ItemHoldEvent) => void>;
    onItemRendered: PropType<(e: ItemRenderedEvent) => void>;
    onItemSelectionChanged: PropType<(e: ItemSelectionChangedEvent) => void>;
    onOptionChanged: PropType<(e: OptionChangedEvent) => void>;
    onSelectAllValueChanged: PropType<(e: SelectAllValueChangedEvent) => void>;
    onSelectionChanged: PropType<(e: SelectionChangedEvent) => void>;
    parentIdExpr: PropType<string | (() => void)>;
    rootValue: {};
    rtlEnabled: BooleanConstructor;
    scrollDirection: PropType<ScrollDirection>;
    searchEditorOptions: PropType<Record<string, any> | dxTextBoxOptions<any>>;
    searchEnabled: BooleanConstructor;
    searchExpr: PropType<string | (string | (() => any))[] | (() => any)>;
    searchMode: PropType<SearchMode>;
    searchTimeout: NumberConstructor;
    searchValue: StringConstructor;
    selectAllText: StringConstructor;
    selectByClick: BooleanConstructor;
    selectedExpr: PropType<string | (() => void)>;
    selectionMode: PropType<SingleOrMultiple>;
    selectNodesRecursive: BooleanConstructor;
    showCheckBoxesMode: PropType<TreeViewCheckBoxMode>;
    tabIndex: NumberConstructor;
    useNativeScrolling: BooleanConstructor;
    virtualModeEnabled: BooleanConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataSource"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemHoldTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemTemplate"?: ((...args: any[]) => any) | undefined;
    "onUpdate:keyExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:noDataText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemContextMenu"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemHold"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemRendered"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchTimeout"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectionMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabledExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:displayExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:itemsExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectByClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showCheckBoxesMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useNativeScrolling"?: ((...args: any[]) => any) | undefined;
    "onUpdate:animationEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rootValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:parentIdExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onSelectAllValueChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchEditorOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:searchValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectAllText"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemCollapsed"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemExpanded"?: ((...args: any[]) => any) | undefined;
    "onUpdate:dataStructure"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hasItemsExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:collapseIcon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:createChildren"?: ((...args: any[]) => any) | undefined;
    "onUpdate:expandAllEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:expandedExpr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:expandEvent"?: ((...args: any[]) => any) | undefined;
    "onUpdate:expandIcon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:expandNodesRecursive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onItemSelectionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:scrollDirection"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectNodesRecursive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:virtualModeEnabled"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    searchEnabled: boolean;
    selectByClick: boolean;
    useNativeScrolling: boolean;
    animationEnabled: boolean;
    expandAllEnabled: boolean;
    expandNodesRecursive: boolean;
    selectNodesRecursive: boolean;
    virtualModeEnabled: boolean;
}>;
declare const DxButton: import("@vue/runtime-core").DefineComponent<{
    location: PropType<TextEditorButtonLocation>;
    name: StringConstructor;
    options: PropType<Record<string, any> | dxButtonOptions>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:location": null;
    "update:name": null;
    "update:options": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    location: PropType<TextEditorButtonLocation>;
    name: StringConstructor;
    options: PropType<Record<string, any> | dxButtonOptions>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:location"?: ((...args: any[]) => any) | undefined;
    "onUpdate:options"?: ((...args: any[]) => any) | undefined;
}, {}>;
declare const DxItem: import("@vue/runtime-core").DefineComponent<{
    disabled: BooleanConstructor;
    expanded: BooleanConstructor;
    hasItems: BooleanConstructor;
    html: StringConstructor;
    icon: StringConstructor;
    id: (NumberConstructor | StringConstructor)[];
    items: PropType<dxTreeViewItem[]>;
    parentId: (NumberConstructor | StringConstructor)[];
    selected: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:disabled": null;
    "update:expanded": null;
    "update:hasItems": null;
    "update:html": null;
    "update:icon": null;
    "update:id": null;
    "update:items": null;
    "update:parentId": null;
    "update:selected": null;
    "update:template": null;
    "update:text": null;
    "update:visible": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    disabled: BooleanConstructor;
    expanded: BooleanConstructor;
    hasItems: BooleanConstructor;
    html: StringConstructor;
    icon: StringConstructor;
    id: (NumberConstructor | StringConstructor)[];
    items: PropType<dxTreeViewItem[]>;
    parentId: (NumberConstructor | StringConstructor)[];
    selected: BooleanConstructor;
    template: {};
    text: StringConstructor;
    visible: BooleanConstructor;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:items"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:html"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:id"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selected"?: ((...args: any[]) => any) | undefined;
    "onUpdate:expanded"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hasItems"?: ((...args: any[]) => any) | undefined;
    "onUpdate:parentId"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    visible: boolean;
    selected: boolean;
    expanded: boolean;
    hasItems: boolean;
}>;
declare const DxOptions: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    icon: StringConstructor;
    onClick: PropType<(e: ClickEvent) => void>;
    onContentReady: PropType<(e: ButtonContentReadyEvent) => void>;
    onDisposing: PropType<(e: ButtonDisposingEvent) => void>;
    onInitialized: PropType<(e: ButtonInitializedEvent) => void>;
    onOptionChanged: PropType<(e: ButtonOptionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    useSubmitBehavior: BooleanConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:bindingOptions": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:icon": null;
    "update:onClick": null;
    "update:onContentReady": null;
    "update:onDisposing": null;
    "update:onInitialized": null;
    "update:onOptionChanged": null;
    "update:rtlEnabled": null;
    "update:stylingMode": null;
    "update:tabIndex": null;
    "update:template": null;
    "update:text": null;
    "update:type": null;
    "update:useSubmitBehavior": null;
    "update:validationGroup": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    icon: StringConstructor;
    onClick: PropType<(e: ClickEvent) => void>;
    onContentReady: PropType<(e: ButtonContentReadyEvent) => void>;
    onDisposing: PropType<(e: ButtonDisposingEvent) => void>;
    onInitialized: PropType<(e: ButtonInitializedEvent) => void>;
    onOptionChanged: PropType<(e: ButtonOptionChangedEvent) => void>;
    rtlEnabled: BooleanConstructor;
    stylingMode: PropType<ButtonStyle>;
    tabIndex: NumberConstructor;
    template: {};
    text: StringConstructor;
    type: PropType<string>;
    useSubmitBehavior: BooleanConstructor;
    validationGroup: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:icon"?: ((...args: any[]) => any) | undefined;
    "onUpdate:template"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onClick"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:type"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useSubmitBehavior"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationGroup"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    useSubmitBehavior: boolean;
}>;
declare const DxSearchEditorOptions: import("@vue/runtime-core").DefineComponent<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    buttons: PropType<(string | TextEditorButton)[]>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    inputAttr: {};
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    label: StringConstructor;
    labelMode: PropType<LabelMode>;
    mask: StringConstructor;
    maskChar: StringConstructor;
    maskInvalidMessage: StringConstructor;
    maskRules: {};
    maxLength: (NumberConstructor | StringConstructor)[];
    mode: PropType<TextBoxType>;
    name: StringConstructor;
    onChange: PropType<(e: ChangeEvent) => void>;
    onContentReady: PropType<(e: TextBoxContentReadyEvent) => void>;
    onCopy: PropType<(e: CopyEvent) => void>;
    onCut: PropType<(e: CutEvent) => void>;
    onDisposing: PropType<(e: TextBoxDisposingEvent) => void>;
    onEnterKey: PropType<(e: EnterKeyEvent) => void>;
    onFocusIn: PropType<(e: FocusInEvent) => void>;
    onFocusOut: PropType<(e: FocusOutEvent) => void>;
    onInitialized: PropType<(e: TextBoxInitializedEvent) => void>;
    onInput: PropType<(e: InputEvent) => void>;
    onKeyDown: PropType<(e: KeyDownEvent) => void>;
    onKeyUp: PropType<(e: KeyUpEvent) => void>;
    onOptionChanged: PropType<(e: TextBoxOptionChangedEvent) => void>;
    onPaste: PropType<(e: PasteEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    placeholder: StringConstructor;
    readOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    showClearButton: BooleanConstructor;
    showMaskMode: PropType<MaskMode>;
    spellcheck: BooleanConstructor;
    stylingMode: PropType<EditorStyle>;
    tabIndex: NumberConstructor;
    text: StringConstructor;
    useMaskedValue: BooleanConstructor;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationMessageMode: PropType<ValidationMessageMode>;
    validationMessagePosition: PropType<Position>;
    validationStatus: PropType<ValidationStatus>;
    value: StringConstructor;
    valueChangeEvent: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}, unknown, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, {
    "update:isActive": null;
    "update:hoveredElement": null;
    "update:accessKey": null;
    "update:activeStateEnabled": null;
    "update:bindingOptions": null;
    "update:buttons": null;
    "update:disabled": null;
    "update:elementAttr": null;
    "update:focusStateEnabled": null;
    "update:height": null;
    "update:hint": null;
    "update:hoverStateEnabled": null;
    "update:inputAttr": null;
    "update:isDirty": null;
    "update:isValid": null;
    "update:label": null;
    "update:labelMode": null;
    "update:mask": null;
    "update:maskChar": null;
    "update:maskInvalidMessage": null;
    "update:maskRules": null;
    "update:maxLength": null;
    "update:mode": null;
    "update:name": null;
    "update:onChange": null;
    "update:onContentReady": null;
    "update:onCopy": null;
    "update:onCut": null;
    "update:onDisposing": null;
    "update:onEnterKey": null;
    "update:onFocusIn": null;
    "update:onFocusOut": null;
    "update:onInitialized": null;
    "update:onInput": null;
    "update:onKeyDown": null;
    "update:onKeyUp": null;
    "update:onOptionChanged": null;
    "update:onPaste": null;
    "update:onValueChanged": null;
    "update:placeholder": null;
    "update:readOnly": null;
    "update:rtlEnabled": null;
    "update:showClearButton": null;
    "update:showMaskMode": null;
    "update:spellcheck": null;
    "update:stylingMode": null;
    "update:tabIndex": null;
    "update:text": null;
    "update:useMaskedValue": null;
    "update:validationError": null;
    "update:validationErrors": null;
    "update:validationMessageMode": null;
    "update:validationMessagePosition": null;
    "update:validationStatus": null;
    "update:value": null;
    "update:valueChangeEvent": null;
    "update:visible": null;
    "update:width": null;
}, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<import("@vue/runtime-core").ExtractPropTypes<{
    accessKey: StringConstructor;
    activeStateEnabled: BooleanConstructor;
    bindingOptions: PropType<Record<string, any>>;
    buttons: PropType<(string | TextEditorButton)[]>;
    disabled: BooleanConstructor;
    elementAttr: PropType<Record<string, any>>;
    focusStateEnabled: BooleanConstructor;
    height: PropType<string | number | (() => number | string)>;
    hint: StringConstructor;
    hoverStateEnabled: BooleanConstructor;
    inputAttr: {};
    isDirty: BooleanConstructor;
    isValid: BooleanConstructor;
    label: StringConstructor;
    labelMode: PropType<LabelMode>;
    mask: StringConstructor;
    maskChar: StringConstructor;
    maskInvalidMessage: StringConstructor;
    maskRules: {};
    maxLength: (NumberConstructor | StringConstructor)[];
    mode: PropType<TextBoxType>;
    name: StringConstructor;
    onChange: PropType<(e: ChangeEvent) => void>;
    onContentReady: PropType<(e: TextBoxContentReadyEvent) => void>;
    onCopy: PropType<(e: CopyEvent) => void>;
    onCut: PropType<(e: CutEvent) => void>;
    onDisposing: PropType<(e: TextBoxDisposingEvent) => void>;
    onEnterKey: PropType<(e: EnterKeyEvent) => void>;
    onFocusIn: PropType<(e: FocusInEvent) => void>;
    onFocusOut: PropType<(e: FocusOutEvent) => void>;
    onInitialized: PropType<(e: TextBoxInitializedEvent) => void>;
    onInput: PropType<(e: InputEvent) => void>;
    onKeyDown: PropType<(e: KeyDownEvent) => void>;
    onKeyUp: PropType<(e: KeyUpEvent) => void>;
    onOptionChanged: PropType<(e: TextBoxOptionChangedEvent) => void>;
    onPaste: PropType<(e: PasteEvent) => void>;
    onValueChanged: PropType<(e: ValueChangedEvent) => void>;
    placeholder: StringConstructor;
    readOnly: BooleanConstructor;
    rtlEnabled: BooleanConstructor;
    showClearButton: BooleanConstructor;
    showMaskMode: PropType<MaskMode>;
    spellcheck: BooleanConstructor;
    stylingMode: PropType<EditorStyle>;
    tabIndex: NumberConstructor;
    text: StringConstructor;
    useMaskedValue: BooleanConstructor;
    validationError: {};
    validationErrors: PropType<any[]>;
    validationMessageMode: PropType<ValidationMessageMode>;
    validationMessagePosition: PropType<Position>;
    validationStatus: PropType<ValidationStatus>;
    value: StringConstructor;
    valueChangeEvent: StringConstructor;
    visible: BooleanConstructor;
    width: PropType<string | number | (() => number | string)>;
}>> & {
    "onUpdate:isActive"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoveredElement"?: ((...args: any[]) => any) | undefined;
    "onUpdate:accessKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:activeStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:disabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:elementAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:focusStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:height"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hint"?: ((...args: any[]) => any) | undefined;
    "onUpdate:hoverStateEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onContentReady"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onDisposing"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInitialized"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onOptionChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:rtlEnabled"?: ((...args: any[]) => any) | undefined;
    "onUpdate:tabIndex"?: ((...args: any[]) => any) | undefined;
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    "onUpdate:width"?: ((...args: any[]) => any) | undefined;
    "onUpdate:text"?: ((...args: any[]) => any) | undefined;
    "onUpdate:stylingMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
    "onUpdate:buttons"?: ((...args: any[]) => any) | undefined;
    "onUpdate:inputAttr"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isDirty"?: ((...args: any[]) => any) | undefined;
    "onUpdate:isValid"?: ((...args: any[]) => any) | undefined;
    "onUpdate:label"?: ((...args: any[]) => any) | undefined;
    "onUpdate:labelMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maxLength"?: ((...args: any[]) => any) | undefined;
    "onUpdate:name"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onChange"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCopy"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onCut"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onEnterKey"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusIn"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onFocusOut"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onInput"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onKeyDown"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onKeyUp"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onPaste"?: ((...args: any[]) => any) | undefined;
    "onUpdate:onValueChanged"?: ((...args: any[]) => any) | undefined;
    "onUpdate:placeholder"?: ((...args: any[]) => any) | undefined;
    "onUpdate:readOnly"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showClearButton"?: ((...args: any[]) => any) | undefined;
    "onUpdate:spellcheck"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationError"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationErrors"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationMessageMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationMessagePosition"?: ((...args: any[]) => any) | undefined;
    "onUpdate:validationStatus"?: ((...args: any[]) => any) | undefined;
    "onUpdate:valueChangeEvent"?: ((...args: any[]) => any) | undefined;
    "onUpdate:bindingOptions"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:mask"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maskChar"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maskInvalidMessage"?: ((...args: any[]) => any) | undefined;
    "onUpdate:maskRules"?: ((...args: any[]) => any) | undefined;
    "onUpdate:showMaskMode"?: ((...args: any[]) => any) | undefined;
    "onUpdate:useMaskedValue"?: ((...args: any[]) => any) | undefined;
}, {
    activeStateEnabled: boolean;
    disabled: boolean;
    focusStateEnabled: boolean;
    hoverStateEnabled: boolean;
    rtlEnabled: boolean;
    visible: boolean;
    isDirty: boolean;
    isValid: boolean;
    readOnly: boolean;
    showClearButton: boolean;
    spellcheck: boolean;
    useMaskedValue: boolean;
}>;
export default DxTreeView;
export { DxTreeView, DxButton, DxItem, DxOptions, DxSearchEditorOptions };
import type * as DxTreeViewTypes from "devextreme/ui/tree_view_types";
export { DxTreeViewTypes };
