/*!
 * devextreme-vue
 * Version: 24.2.10
 * Build date: Fri Aug 29 2025
 *
 * Copyright (c) 2012 - 2025 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-vue
 */

import { defineComponent } from "vue";
import { prepareComponentConfig } from "./core/index";
import PivotGridFieldChooser from "devextreme/ui/pivot_grid_field_chooser";
import { prepareConfigurationComponentConfig } from "./core/index";
const componentConfig = {
    props: {
        accessKey: String,
        activeStateEnabled: Boolean,
        allowSearch: Boolean,
        applyChangesMode: String,
        dataSource: Object,
        disabled: Boolean,
        elementAttr: Object,
        encodeHtml: Boolean,
        focusStateEnabled: Boolean,
        headerFilter: Object,
        height: [Function, Number, String],
        hint: String,
        hoverStateEnabled: Boolean,
        layout: Number,
        onContentReady: Function,
        onContextMenuPreparing: Function,
        onDisposing: Function,
        onInitialized: Function,
        onOptionChanged: Function,
        rtlEnabled: Boolean,
        searchTimeout: Number,
        state: {},
        tabIndex: Number,
        texts: Object,
        visible: Boolean,
        width: [Function, Number, String]
    },
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:accessKey": null,
        "update:activeStateEnabled": null,
        "update:allowSearch": null,
        "update:applyChangesMode": null,
        "update:dataSource": null,
        "update:disabled": null,
        "update:elementAttr": null,
        "update:encodeHtml": null,
        "update:focusStateEnabled": null,
        "update:headerFilter": null,
        "update:height": null,
        "update:hint": null,
        "update:hoverStateEnabled": null,
        "update:layout": null,
        "update:onContentReady": null,
        "update:onContextMenuPreparing": null,
        "update:onDisposing": null,
        "update:onInitialized": null,
        "update:onOptionChanged": null,
        "update:rtlEnabled": null,
        "update:searchTimeout": null,
        "update:state": null,
        "update:tabIndex": null,
        "update:texts": null,
        "update:visible": null,
        "update:width": null,
    },
    computed: {
        instance() {
            return this.$_instance;
        }
    },
    beforeCreate() {
        this.$_WidgetClass = PivotGridFieldChooser;
        this.$_hasAsyncTemplate = true;
        this.$_expectedChildren = {
            headerFilter: { isCollectionItem: false, optionName: "headerFilter" },
            pivotGridFieldChooserTexts: { isCollectionItem: false, optionName: "texts" },
            texts: { isCollectionItem: false, optionName: "texts" }
        };
    }
};
prepareComponentConfig(componentConfig);
const DxPivotGridFieldChooser = defineComponent(componentConfig);
const DxHeaderFilterConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allowSearch": null,
        "update:allowSelectAll": null,
        "update:height": null,
        "update:search": null,
        "update:searchTimeout": null,
        "update:showRelevantValues": null,
        "update:texts": null,
        "update:width": null,
    },
    props: {
        allowSearch: Boolean,
        allowSelectAll: Boolean,
        height: Number,
        search: Object,
        searchTimeout: Number,
        showRelevantValues: Boolean,
        texts: Object,
        width: Number
    }
};
prepareConfigurationComponentConfig(DxHeaderFilterConfig);
const DxHeaderFilter = defineComponent(DxHeaderFilterConfig);
DxHeaderFilter.$_optionName = "headerFilter";
DxHeaderFilter.$_expectedChildren = {
    headerFilterTexts: { isCollectionItem: false, optionName: "texts" },
    search: { isCollectionItem: false, optionName: "search" },
    texts: { isCollectionItem: false, optionName: "texts" }
};
const DxHeaderFilterTextsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:cancel": null,
        "update:emptyValue": null,
        "update:ok": null,
    },
    props: {
        cancel: String,
        emptyValue: String,
        ok: String
    }
};
prepareConfigurationComponentConfig(DxHeaderFilterTextsConfig);
const DxHeaderFilterTexts = defineComponent(DxHeaderFilterTextsConfig);
DxHeaderFilterTexts.$_optionName = "texts";
const DxPivotGridFieldChooserTextsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allFields": null,
        "update:columnFields": null,
        "update:dataFields": null,
        "update:filterFields": null,
        "update:rowFields": null,
    },
    props: {
        allFields: String,
        columnFields: String,
        dataFields: String,
        filterFields: String,
        rowFields: String
    }
};
prepareConfigurationComponentConfig(DxPivotGridFieldChooserTextsConfig);
const DxPivotGridFieldChooserTexts = defineComponent(DxPivotGridFieldChooserTextsConfig);
DxPivotGridFieldChooserTexts.$_optionName = "texts";
const DxSearchConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:editorOptions": null,
        "update:enabled": null,
        "update:mode": null,
        "update:timeout": null,
    },
    props: {
        editorOptions: {},
        enabled: Boolean,
        mode: String,
        timeout: Number
    }
};
prepareConfigurationComponentConfig(DxSearchConfig);
const DxSearch = defineComponent(DxSearchConfig);
DxSearch.$_optionName = "search";
const DxTextsConfig = {
    emits: {
        "update:isActive": null,
        "update:hoveredElement": null,
        "update:allFields": null,
        "update:cancel": null,
        "update:columnFields": null,
        "update:dataFields": null,
        "update:emptyValue": null,
        "update:filterFields": null,
        "update:ok": null,
        "update:rowFields": null,
    },
    props: {
        allFields: String,
        cancel: String,
        columnFields: String,
        dataFields: String,
        emptyValue: String,
        filterFields: String,
        ok: String,
        rowFields: String
    }
};
prepareConfigurationComponentConfig(DxTextsConfig);
const DxTexts = defineComponent(DxTextsConfig);
DxTexts.$_optionName = "texts";
export default DxPivotGridFieldChooser;
export { DxPivotGridFieldChooser, DxHeaderFilter, DxHeaderFilterTexts, DxPivotGridFieldChooserTexts, DxSearch, DxTexts };
