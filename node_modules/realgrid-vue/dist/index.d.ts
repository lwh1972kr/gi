import { AllowedComponentProps } from 'vue';
import { ComponentCustomProps } from 'vue';
import { ComponentObjectPropsOptions } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { ComponentPropsOptions } from 'vue';
import { ComponentPublicInstance } from 'vue';
import { DefineComponent } from 'vue';
import { ExtractPropTypes } from 'vue';
import { PropType } from 'vue';
import * as RealGrid from 'realgrid';
import { VNode } from 'vue';
import { VNodeProps } from 'vue';

declare interface ConfigObject {
    [key: string]: any;
}

declare interface IComponentBase {
    children?: VNode;
    $model?: any;
}

declare interface IModel {
    assignFrom: Function;
    name: string;
}

declare interface IRealGridCheckBar extends IComponentBase, RealGrid.CheckBar {
}

declare interface IRealGridDataField extends IComponentBase, RealGrid.DataField {
}

declare interface IRealGridFilterPanel extends IComponentBase, RealGrid.FilterPanel {
}

declare interface IRealGridFooter extends IComponentBase, RealGrid.GridFooter {
}

declare interface IRealGridFooters extends IComponentBase, RealGrid.GridFooterCollection {
}

declare interface IRealGridGroupPanel extends IComponentBase, RealGrid.GroupPanel {
}

declare interface IRealGridHeader extends IComponentBase, RealGrid.GridHeader {
}

declare interface IRealGridheaderSummaries extends IComponentBase, RealGrid.HeaderSummaryCollection {
}

declare interface IRealGridHeaderSummary extends IComponentBase, RealGrid.HeaderSummary {
}

declare interface IRealGridLiteralColumn extends IComponentBase, RealGrid.LiteralColumn {
}

declare interface IRealGridRowIndicator extends IComponentBase, RealGrid.RowIndicator {
}

declare interface IRealGridSeriesColumn extends IComponentBase, RealGrid.SeriesColumn {
}

declare interface IRealGridStateBar extends IComponentBase, RealGrid.StateBar {
}

declare interface IRGDataColumn extends RealGrid.DataColumn, IComponentBase {
    field?: RealGrid.DataFieldInput;
}

declare type Omits = keyof ComponentPublicInstance | '$model' | '$oldValue' | '_doWatchAttrs' | 'addCallback' | 'removeCallback' | '__dp' | '__gv' | 'executeCB' | '_mountCBs' | '_mountTimer' | 'concat' | 'mountCB' | 'unmountCB';

export declare const RealGridVue: DefineComponent<    {
accessibility: BooleanConstructor;
waiOptions: PropType<RealGrid.WaiOptions>;
onPageChanging: PropType<(grid: RealGrid.GridView, page: number) => boolean>;
onPageChanged: PropType<(grid: RealGrid.GridView, page: number) => void>;
onPageCountChanged: PropType<(grid: RealGrid.GridView, pageCount: number) => void>;
onGrouping: PropType<(grid: RealGrid.GridView, fields: number[]) => boolean>;
onGrouped: PropType<(grid: RealGrid.GridView) => void>;
onExpanding: PropType<(grid: RealGrid.GridView, itemIndex: number) => boolean>;
onExpanded: PropType<(grid: RealGrid.GridView, itemIndex: number) => void>;
onCollapsing: PropType<(grid: RealGrid.GridView, itemIndex: number) => boolean>;
onCollapsed: PropType<(grid: RealGrid.GridView, itemIndex: number) => void>;
onRowCountChanged: PropType<(provider: RealGrid.LocalDataProvider, newCount: number) => void>;
onRowUpdating: PropType<(provider: RealGrid.LocalDataProvider, row: number, oldValues: RealGrid.RowValues, newValues: RealGrid.RowValues) => boolean>;
onRowUpdated: PropType<(provider: RealGrid.LocalDataProvider, row: number) => void>;
onRowsUpdated: PropType<(provider: RealGrid.LocalDataProvider, row: number, count: number) => void>;
onRowListUpdated: PropType<(provider: RealGrid.LocalDataProvider, rows: number[]) => void>;
onDataRowInserting: PropType<(provider: RealGrid.LocalDataProvider, row: number, values: RealGrid.DataValues) => boolean>;
onRowInserted: PropType<(provider: RealGrid.LocalDataProvider, row: number) => void>;
onRowsInserted: PropType<(provider: RealGrid.LocalDataProvider, row: number, count: number) => void>;
onRowDeleting: PropType<(provider: RealGrid.LocalDataProvider, row: number) => boolean>;
onRowDeleted: PropType<(provider: RealGrid.LocalDataProvider, row: number) => void>;
onRowsDeleted: PropType<(provider: RealGrid.LocalDataProvider, rows: number[]) => void>;
onRowMoving: PropType<(provider: RealGrid.LocalDataProvider, row: number, newRow: number) => boolean>;
onRowMoved: PropType<(provider: RealGrid.LocalDataProvider, row: number, newRow: number) => void>;
onRowsMoving: PropType<(provider: RealGrid.LocalDataProvider, row: number, count: number, newRow: number) => boolean>;
onRowsMoved: PropType<(provider: RealGrid.LocalDataProvider, row: number, count: number, newRow: number) => void>;
onRowListMoving: PropType<(provider: RealGrid.LocalDataProvider, rows: number[], newRow: number) => boolean>;
onRowListMoved: PropType<(provider: RealGrid.LocalDataProvider, rows: number[], newRow: number) => void>;
onValueChanged: PropType<(provider: RealGrid.LocalDataProvider, row: number, field: number) => void>;
onDataChanged: PropType<(provider: RealGrid.LocalDataProvider) => void>;
onRowStateChanged: PropType<(provider: RealGrid.LocalDataProvider, row: number) => void>;
onRowStatesChanged: PropType<(provider: RealGrid.LocalDataProvider, rows: number[]) => void>;
onRowStatesCleared: PropType<(provider: RealGrid.LocalDataProvider) => void>;
onRestoreRows: PropType<(provider: RealGrid.LocalDataProvider, rows: number[]) => void>;
}, unknown, {
$dataProvider: RealGrid.LocalDataProvider | null;
$gridView: RealGrid.GridView | null;
}, {}, {
_createGrid(container: HTMLDivElement, props: any): {
grid: RealGrid.GridView;
dataProvider: RealGrid.LocalDataProvider;
};
_doApplyOptions(options: {
[key: string]: any;
}): void;
_setData(options: {
[key: string]: any;
}): void;
}, ComponentOptionsMixin, DefineComponent<    {
disabled: BooleanConstructor;
gridProps: PropType<RealGrid.ViewOptions>;
dataProps: PropType<RealGrid.DataOptions>;
locale: PropType<Partial<RealGrid.RealGridLocale>>;
autoGenerateField: BooleanConstructor;
rows: PropType<RealGrid.DataValues[]>;
rowStyleCallback: PropType<RealGrid.RowStyleCallback>;
cellStyleCallback: PropType<RealGrid.CellStyleCallback>;
layout: PropType<(string | RealGrid.CellLayoutGroupItem | RealGrid.CellLayoutColumnItem)[]>;
onInitialized: PropType<(grid: RealGrid.GridView) => void>;
onDestroy: PropType<(grid: RealGrid.GridView) => void>;
onCurrentChanging: PropType<(grid: RealGrid.GridView, oldIndex: RealGrid.CellIndex, newIndex: RealGrid.CellIndex) => boolean>;
onCurrentChanged: PropType<(grid: RealGrid.GridView, newIndex: RealGrid.CellIndex) => void>;
onCurrentRowChanged: PropType<(grid: RealGrid.GridView, oldRow: number, newRow: number) => void>;
onValidateColumn: PropType<(grid: RealGrid.GridView, column: RealGrid.DataColumn, inserting: boolean, value: any, itemIndex: number, dataRow: number) => RealGrid.ValidationError | undefined>;
onValidateRow: PropType<(grid: RealGrid.GridView, itemIndex: number, dataRow: number, inserting: boolean, values: any[]) => RealGrid.ValidationError>;
onValidationFail: PropType<(grid: RealGrid.GridView, itemIndex: number, column: RealGrid.GridColumn, error: RealGrid.ValidationError) => RealGrid.ValidationError>;
onColumnCheckedChanged: PropType<(grid: RealGrid.GridView, column: RealGrid.GridColumn, checked: boolean) => void>;
onMenuItemClicked: PropType<(grid: RealGrid.GridView, item: RealGrid.PopupMenuItem, clickData: RealGrid.ClickData) => void>;
onContextMenuPopup: PropType<(grid: RealGrid.GridView, x: number, y: number, clickData: RealGrid.ClickData, menu: string, rightClick: boolean) => boolean | string>;
onContextMenuItemClicked: PropType<(grid: RealGrid.GridView, item: RealGrid.PopupMenuItem, clickData: RealGrid.ClickData) => void>;
onCellButtonClicked: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, column: RealGrid.GridColumn) => void>;
onScrollToBottom: PropType<(grid: RealGrid.GridView) => void>;
onTopIndexChanged: PropType<(grid: RealGrid.GridView, itemIndex: number) => void>;
onTopIndexChanging: PropType<(grid: RealGrid.GridView, currentTop: number, delta: number, focusing: boolean, adjust: boolean) => number>;
onLeftPosChanged: PropType<(grid: RealGrid.GridView, pos: number) => void>;
onRowsDeleting: PropType<(grid: RealGrid.GridView, rows: number[]) => boolean>;
onRowInserting: PropType<(grid: RealGrid.GridView, itemIndex: number, dataRow: number) => boolean>;
onSelectionCleared: PropType<(grid: RealGrid.GridView) => void>;
onSelectionChanged: PropType<(grid: RealGrid.GridView, selection: RealGrid.Selection) => void>;
onSelectionAdded: PropType<(grid: RealGrid.GridView, selection: RealGrid.Selection) => void>;
onSelectionEnded: PropType<(grid: RealGrid.GridView, selection: RealGrid.Selection) => void>;
onShowEditor: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, props: any, attrs: any) => boolean>;
onShowEditCommand: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex) => boolean>;
onHideEditor: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex) => void>;
onEditChange: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, value: any) => void>;
onGetEditValue: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, editResult: Object) => void | boolean>;
onEditCommit: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, oldValue: any, newValue: any) => boolean>;
onEditCanceled: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex) => void>;
onItemEditCanceled: PropType<(grid: RealGrid.GridView, itemIndex: number, state: string) => void>;
onItemEditCancel: PropType<(grid: RealGrid.GridView, itemIndex: number, state: string) => boolean>;
onEditSearch: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, text: string) => void>;
onSearchCellButtonClick: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, text: string) => void>;
onCellEdited: PropType<(grid: RealGrid.GridView, itemIndex: number, row: number, field: number) => void>;
onEditRowChanged: PropType<(grid: RealGrid.GridView, itemIndex: number, row: number, field: number, oldValue: any, newValue: any) => void>;
onEditRowPasted: PropType<(grid: RealGrid.GridView, itemIndex: number, row: number, fields: number[], oldValues: any[], newValues: any[]) => void>;
onRowsPasted: PropType<(grid: RealGrid.GridView, items: number[]) => void>;
onCellPasting: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, value: any, editResult: RealGrid.EditResult) => boolean>;
onItemChecked: PropType<(grid: RealGrid.GridView, itemIndex: number, checked: boolean) => void>;
onItemAllChecked: PropType<(grid: RealGrid.GridView, checked: boolean) => void>;
onErrorClicked: PropType<(grid: RealGrid.GridView, error: string) => void>;
onSorting: PropType<(grid: RealGrid.GridView, fields: number[], directions: string[]) => boolean>;
onSortingChanged: PropType<(grid: RealGrid.GridView) => void>;
onFiltering: PropType<(grid: RealGrid.GridView) => boolean>;
onFilteringChanged: PropType<(grid: RealGrid.GridView, column: RealGrid.GridColumn, filter: RealGrid.ColumnFilter, reset: boolean) => void>;
onWheel: PropType<(grid: RealGrid.GridView, event: WheelEvent) => boolean>;
onKeyDown: PropType<(grid: RealGrid.GridView, event: KeyboardEvent) => boolean>;
onKeyPress: PropType<(grid: RealGrid.GridView, event: KeyboardEvent) => void>;
onKeyUp: PropType<(grid: RealGrid.GridView, event: KeyboardEvent) => void>;
onShowTooltip: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, value: any, isEllipsis: boolean) => boolean | string>;
onShowHeaderTooltip: PropType<(grid: RealGrid.GridView, column: RealGrid.GridColumn, value: any, layout: RealGrid.CellLayoutItem, isEllipsis: boolean) => string>;
onColumnPropertyChanged: PropType<(grid: RealGrid.GridView, column: RealGrid.GridColumn, property: string, newValue: any, oldValue: any) => void>;
onLayoutPropertyChanged: PropType<(grid: RealGrid.GridView, layout: RealGrid.CellLayoutItem, property: string, newValue: any, oldValue: any) => void>;
onGridActivated: PropType<(grid: RealGrid.GridView) => void>;
onCopy: PropType<(grid: RealGrid.GridView, selection: RealGrid.Selection | RealGrid.Selection[], event: ClipboardEvent) => boolean>;
onPaste: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, event: ClipboardEvent) => boolean>;
onPasted: PropType<(grid: RealGrid.GridView) => void>;
onItemsChecked: PropType<(grid: RealGrid.GridView, items: number[], checked: boolean) => void>;
onCellClicked: PropType<(grid: RealGrid.GridView, clickData: RealGrid.ClickData) => void>;
onCellDblClicked: PropType<(grid: RealGrid.GridView, clickData: RealGrid.ClickData) => void>;
onCellItemClicked: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, clickData: RealGrid.ClickData) => boolean>;
onCommandStackChanged: PropType<(grid: RealGrid.GridView, undoable: boolean, redoable: boolean) => void>;
onDataLoadComplated: PropType<(grid: RealGrid.GridView) => void>;
onLayoutExpanding: PropType<(grid: RealGrid.GridView, layout: RealGrid.CellLayoutGroupItem) => boolean>;
onLayoutExpanded: PropType<(grid: RealGrid.GridView, layout: RealGrid.CellLayoutGroupItem) => void>;
onLayoutCollapsing: PropType<(grid: RealGrid.GridView, layout: RealGrid.CellLayoutGroupItem) => boolean>;
onLayoutCollapsed: PropType<(grid: RealGrid.GridView, layout: RealGrid.CellLayoutGroupItem) => void>;
onGridFocusChanged: PropType<(grid: RealGrid.GridView, focused: boolean, event: Event) => void>;
}, unknown, {
$dataProvider: RealGrid.DataProviderBase | null;
$gridView: RealGrid.GridBase | null;
_mountTimer: number | null;
_mountCBs: Function[];
}, {
dataProvider: {
get(): RealGrid.LocalDataProvider;
set(value: RealGrid.LocalDataProvider): void;
};
gridView: {
get(): RealGrid.GridView;
set(value: RealGrid.GridView): void;
};
}, {
addCallback(fn: Function): void;
removeCallback(fn: Function): void;
executeCB(): void;
_applyOptions(options: any): void;
_createGrid(container: HTMLDivElement, props: any): {
grid: RealGrid.GridView;
dataProvider: RealGrid.LocalDataProvider;
};
_doInitProc(grid: RealGrid.GridBase, props: any): void;
_doApplyOptions(options: any): void;
_setData(rows: any): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
disabled: BooleanConstructor;
gridProps: PropType<RealGrid.ViewOptions>;
dataProps: PropType<RealGrid.DataOptions>;
locale: PropType<Partial<RealGrid.RealGridLocale>>;
autoGenerateField: BooleanConstructor;
rows: PropType<RealGrid.DataValues[]>;
rowStyleCallback: PropType<RealGrid.RowStyleCallback>;
cellStyleCallback: PropType<RealGrid.CellStyleCallback>;
layout: PropType<(string | RealGrid.CellLayoutGroupItem | RealGrid.CellLayoutColumnItem)[]>;
onInitialized: PropType<(grid: RealGrid.GridView) => void>;
onDestroy: PropType<(grid: RealGrid.GridView) => void>;
onCurrentChanging: PropType<(grid: RealGrid.GridView, oldIndex: RealGrid.CellIndex, newIndex: RealGrid.CellIndex) => boolean>;
onCurrentChanged: PropType<(grid: RealGrid.GridView, newIndex: RealGrid.CellIndex) => void>;
onCurrentRowChanged: PropType<(grid: RealGrid.GridView, oldRow: number, newRow: number) => void>;
onValidateColumn: PropType<(grid: RealGrid.GridView, column: RealGrid.DataColumn, inserting: boolean, value: any, itemIndex: number, dataRow: number) => RealGrid.ValidationError | undefined>;
onValidateRow: PropType<(grid: RealGrid.GridView, itemIndex: number, dataRow: number, inserting: boolean, values: any[]) => RealGrid.ValidationError>;
onValidationFail: PropType<(grid: RealGrid.GridView, itemIndex: number, column: RealGrid.GridColumn, error: RealGrid.ValidationError) => RealGrid.ValidationError>;
onColumnCheckedChanged: PropType<(grid: RealGrid.GridView, column: RealGrid.GridColumn, checked: boolean) => void>;
onMenuItemClicked: PropType<(grid: RealGrid.GridView, item: RealGrid.PopupMenuItem, clickData: RealGrid.ClickData) => void>;
onContextMenuPopup: PropType<(grid: RealGrid.GridView, x: number, y: number, clickData: RealGrid.ClickData, menu: string, rightClick: boolean) => boolean | string>;
onContextMenuItemClicked: PropType<(grid: RealGrid.GridView, item: RealGrid.PopupMenuItem, clickData: RealGrid.ClickData) => void>;
onCellButtonClicked: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, column: RealGrid.GridColumn) => void>;
onScrollToBottom: PropType<(grid: RealGrid.GridView) => void>;
onTopIndexChanged: PropType<(grid: RealGrid.GridView, itemIndex: number) => void>;
onTopIndexChanging: PropType<(grid: RealGrid.GridView, currentTop: number, delta: number, focusing: boolean, adjust: boolean) => number>;
onLeftPosChanged: PropType<(grid: RealGrid.GridView, pos: number) => void>;
onRowsDeleting: PropType<(grid: RealGrid.GridView, rows: number[]) => boolean>;
onRowInserting: PropType<(grid: RealGrid.GridView, itemIndex: number, dataRow: number) => boolean>;
onSelectionCleared: PropType<(grid: RealGrid.GridView) => void>;
onSelectionChanged: PropType<(grid: RealGrid.GridView, selection: RealGrid.Selection) => void>;
onSelectionAdded: PropType<(grid: RealGrid.GridView, selection: RealGrid.Selection) => void>;
onSelectionEnded: PropType<(grid: RealGrid.GridView, selection: RealGrid.Selection) => void>;
onShowEditor: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, props: any, attrs: any) => boolean>;
onShowEditCommand: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex) => boolean>;
onHideEditor: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex) => void>;
onEditChange: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, value: any) => void>;
onGetEditValue: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, editResult: Object) => void | boolean>;
onEditCommit: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, oldValue: any, newValue: any) => boolean>;
onEditCanceled: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex) => void>;
onItemEditCanceled: PropType<(grid: RealGrid.GridView, itemIndex: number, state: string) => void>;
onItemEditCancel: PropType<(grid: RealGrid.GridView, itemIndex: number, state: string) => boolean>;
onEditSearch: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, text: string) => void>;
onSearchCellButtonClick: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, text: string) => void>;
onCellEdited: PropType<(grid: RealGrid.GridView, itemIndex: number, row: number, field: number) => void>;
onEditRowChanged: PropType<(grid: RealGrid.GridView, itemIndex: number, row: number, field: number, oldValue: any, newValue: any) => void>;
onEditRowPasted: PropType<(grid: RealGrid.GridView, itemIndex: number, row: number, fields: number[], oldValues: any[], newValues: any[]) => void>;
onRowsPasted: PropType<(grid: RealGrid.GridView, items: number[]) => void>;
onCellPasting: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, value: any, editResult: RealGrid.EditResult) => boolean>;
onItemChecked: PropType<(grid: RealGrid.GridView, itemIndex: number, checked: boolean) => void>;
onItemAllChecked: PropType<(grid: RealGrid.GridView, checked: boolean) => void>;
onErrorClicked: PropType<(grid: RealGrid.GridView, error: string) => void>;
onSorting: PropType<(grid: RealGrid.GridView, fields: number[], directions: string[]) => boolean>;
onSortingChanged: PropType<(grid: RealGrid.GridView) => void>;
onFiltering: PropType<(grid: RealGrid.GridView) => boolean>;
onFilteringChanged: PropType<(grid: RealGrid.GridView, column: RealGrid.GridColumn, filter: RealGrid.ColumnFilter, reset: boolean) => void>;
onWheel: PropType<(grid: RealGrid.GridView, event: WheelEvent) => boolean>;
onKeyDown: PropType<(grid: RealGrid.GridView, event: KeyboardEvent) => boolean>;
onKeyPress: PropType<(grid: RealGrid.GridView, event: KeyboardEvent) => void>;
onKeyUp: PropType<(grid: RealGrid.GridView, event: KeyboardEvent) => void>;
onShowTooltip: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, value: any, isEllipsis: boolean) => boolean | string>;
onShowHeaderTooltip: PropType<(grid: RealGrid.GridView, column: RealGrid.GridColumn, value: any, layout: RealGrid.CellLayoutItem, isEllipsis: boolean) => string>;
onColumnPropertyChanged: PropType<(grid: RealGrid.GridView, column: RealGrid.GridColumn, property: string, newValue: any, oldValue: any) => void>;
onLayoutPropertyChanged: PropType<(grid: RealGrid.GridView, layout: RealGrid.CellLayoutItem, property: string, newValue: any, oldValue: any) => void>;
onGridActivated: PropType<(grid: RealGrid.GridView) => void>;
onCopy: PropType<(grid: RealGrid.GridView, selection: RealGrid.Selection | RealGrid.Selection[], event: ClipboardEvent) => boolean>;
onPaste: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, event: ClipboardEvent) => boolean>;
onPasted: PropType<(grid: RealGrid.GridView) => void>;
onItemsChecked: PropType<(grid: RealGrid.GridView, items: number[], checked: boolean) => void>;
onCellClicked: PropType<(grid: RealGrid.GridView, clickData: RealGrid.ClickData) => void>;
onCellDblClicked: PropType<(grid: RealGrid.GridView, clickData: RealGrid.ClickData) => void>;
onCellItemClicked: PropType<(grid: RealGrid.GridView, index: RealGrid.CellIndex, clickData: RealGrid.ClickData) => boolean>;
onCommandStackChanged: PropType<(grid: RealGrid.GridView, undoable: boolean, redoable: boolean) => void>;
onDataLoadComplated: PropType<(grid: RealGrid.GridView) => void>;
onLayoutExpanding: PropType<(grid: RealGrid.GridView, layout: RealGrid.CellLayoutGroupItem) => boolean>;
onLayoutExpanded: PropType<(grid: RealGrid.GridView, layout: RealGrid.CellLayoutGroupItem) => void>;
onLayoutCollapsing: PropType<(grid: RealGrid.GridView, layout: RealGrid.CellLayoutGroupItem) => boolean>;
onLayoutCollapsed: PropType<(grid: RealGrid.GridView, layout: RealGrid.CellLayoutGroupItem) => void>;
onGridFocusChanged: PropType<(grid: RealGrid.GridView, focused: boolean, event: Event) => void>;
}>>, {
autoGenerateField: boolean;
disabled: boolean;
}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
accessibility: BooleanConstructor;
waiOptions: PropType<RealGrid.WaiOptions>;
onPageChanging: PropType<(grid: RealGrid.GridView, page: number) => boolean>;
onPageChanged: PropType<(grid: RealGrid.GridView, page: number) => void>;
onPageCountChanged: PropType<(grid: RealGrid.GridView, pageCount: number) => void>;
onGrouping: PropType<(grid: RealGrid.GridView, fields: number[]) => boolean>;
onGrouped: PropType<(grid: RealGrid.GridView) => void>;
onExpanding: PropType<(grid: RealGrid.GridView, itemIndex: number) => boolean>;
onExpanded: PropType<(grid: RealGrid.GridView, itemIndex: number) => void>;
onCollapsing: PropType<(grid: RealGrid.GridView, itemIndex: number) => boolean>;
onCollapsed: PropType<(grid: RealGrid.GridView, itemIndex: number) => void>;
onRowCountChanged: PropType<(provider: RealGrid.LocalDataProvider, newCount: number) => void>;
onRowUpdating: PropType<(provider: RealGrid.LocalDataProvider, row: number, oldValues: RealGrid.RowValues, newValues: RealGrid.RowValues) => boolean>;
onRowUpdated: PropType<(provider: RealGrid.LocalDataProvider, row: number) => void>;
onRowsUpdated: PropType<(provider: RealGrid.LocalDataProvider, row: number, count: number) => void>;
onRowListUpdated: PropType<(provider: RealGrid.LocalDataProvider, rows: number[]) => void>;
onDataRowInserting: PropType<(provider: RealGrid.LocalDataProvider, row: number, values: RealGrid.DataValues) => boolean>;
onRowInserted: PropType<(provider: RealGrid.LocalDataProvider, row: number) => void>;
onRowsInserted: PropType<(provider: RealGrid.LocalDataProvider, row: number, count: number) => void>;
onRowDeleting: PropType<(provider: RealGrid.LocalDataProvider, row: number) => boolean>;
onRowDeleted: PropType<(provider: RealGrid.LocalDataProvider, row: number) => void>;
onRowsDeleted: PropType<(provider: RealGrid.LocalDataProvider, rows: number[]) => void>;
onRowMoving: PropType<(provider: RealGrid.LocalDataProvider, row: number, newRow: number) => boolean>;
onRowMoved: PropType<(provider: RealGrid.LocalDataProvider, row: number, newRow: number) => void>;
onRowsMoving: PropType<(provider: RealGrid.LocalDataProvider, row: number, count: number, newRow: number) => boolean>;
onRowsMoved: PropType<(provider: RealGrid.LocalDataProvider, row: number, count: number, newRow: number) => void>;
onRowListMoving: PropType<(provider: RealGrid.LocalDataProvider, rows: number[], newRow: number) => boolean>;
onRowListMoved: PropType<(provider: RealGrid.LocalDataProvider, rows: number[], newRow: number) => void>;
onValueChanged: PropType<(provider: RealGrid.LocalDataProvider, row: number, field: number) => void>;
onDataChanged: PropType<(provider: RealGrid.LocalDataProvider) => void>;
onRowStateChanged: PropType<(provider: RealGrid.LocalDataProvider, row: number) => void>;
onRowStatesChanged: PropType<(provider: RealGrid.LocalDataProvider, rows: number[]) => void>;
onRowStatesCleared: PropType<(provider: RealGrid.LocalDataProvider) => void>;
onRestoreRows: PropType<(provider: RealGrid.LocalDataProvider, rows: number[]) => void>;
}>>, {
accessibility: boolean;
}>;

export declare type RealGridVue = Omit<InstanceType<typeof RealGridVue>, Omits>;

export declare const RealTreeVue: DefineComponent<    {
treeOptions: PropType<RealGrid.TreeOptions>;
treeField: StringConstructor;
needSorting: BooleanConstructor;
childrenField: StringConstructor;
iconField: StringConstructor;
json: PropType<any>;
rowsProp: StringConstructor;
childrenProp: StringConstructor;
iconProp: StringConstructor;
onTreeItemExpanding: PropType<(tree: RealGrid.TreeView, itemIndex: number, rowId: number) => boolean>;
onTreeItemExpanded: PropType<(tree: RealGrid.TreeView, itemIndex: number, rowId: number) => void>;
onTreeItemCollapsing: PropType<(tree: RealGrid.TreeView, itemIndex: number, rowId: number) => void>;
onTreeItemCollapsed: PropType<(tree: RealGrid.TreeView, itemIndex: number, rowId: number) => void>;
onTreeItemChanged: PropType<(tree: RealGrid.TreeView, itemIndex: number, rowId: number) => void>;
onRowCountChanged: PropType<(provider: RealGrid.LocalTreeDataProvider, newCount: number) => void>;
onRowAdding: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, index: number, child: any) => boolean>;
onRowAdded: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number) => void>;
onRowsAdded: PropType<(provider: RealGrid.LocalTreeDataProvider, parent: number, rows: number[]) => void>;
onRowDeleting: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number) => boolean>;
onRowDeleted: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number) => void>;
onRowsDeleted: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[]) => void>;
onRowUpdating: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, oldValues: RealGrid.RowValues, newValues: RealGrid.RowValues) => boolean>;
onRowUpdated: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number) => void>;
onRowsUpdating: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[]) => boolean>;
onRowsUpdated: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[]) => void>;
onValueChanged: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, field: number) => void>;
onDataChanged: PropType<(provider: RealGrid.LocalTreeDataProvider) => void>;
onRowStateChanged: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number) => void>;
onRowStatesChanged: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[]) => void>;
onRowSiblingMoving: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, offset: number) => boolean>;
onRowSiblingMoved: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, offset: number) => void>;
onRowsSiblingMoving: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[], offset: number) => boolean>;
onRowsSiblingMoved: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[], offset: number) => void>;
onRowParentChanging: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, parent: number, index: number) => boolean>;
onRowParentChanged: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, parent: number, index: number) => void>;
}, unknown, {
$gridView: RealGrid.TreeView | null;
$dataProvider: RealGrid.LocalTreeDataProvider | null;
}, {
gridView: {
get(): (RealGrid.GridBase & RealGrid.TreeView) | null;
set(value: RealGrid.TreeView): void;
};
dataProvider: {
get(): (RealGrid.DataProviderBase & RealGrid.LocalTreeDataProvider) | null;
set(value: RealGrid.LocalTreeDataProvider): void;
};
}, {
_createGrid(container: HTMLDivElement, props: any): {
grid: RealGrid.TreeView;
dataProvider: RealGrid.LocalTreeDataProvider;
};
_doApplyOptions(options: {
[key: string]: any;
}): void;
_setData(options: {
[key: string]: any;
}): void;
}, ComponentOptionsMixin, DefineComponent<    {
disabled: BooleanConstructor;
gridProps: PropType<RealGrid.GridOptions>;
dataProps: PropType<RealGrid.DataOptions>;
locale: PropType<Partial<RealGrid.RealGridLocale>>;
autoGenerateField: BooleanConstructor;
rows: PropType<RealGrid.DataValues[]>;
rowStyleCallback: PropType<RealGrid.RowStyleCallback>;
cellStyleCallback: PropType<RealGrid.CellStyleCallback>;
layout: PropType<(string | RealGrid.CellLayoutGroupItem | RealGrid.CellLayoutColumnItem)[]>;
onInitialized: PropType<(grid: RealGrid.TreeView) => void>;
onDestroy: PropType<(grid: RealGrid.TreeView) => void>;
onCurrentChanging: PropType<(grid: RealGrid.TreeView, oldIndex: RealGrid.CellIndex, newIndex: RealGrid.CellIndex) => boolean>;
onCurrentChanged: PropType<(grid: RealGrid.TreeView, newIndex: RealGrid.CellIndex) => void>;
onCurrentRowChanged: PropType<(grid: RealGrid.TreeView, oldRow: number, newRow: number) => void>;
onValidateColumn: PropType<(grid: RealGrid.TreeView, column: RealGrid.DataColumn, inserting: boolean, value: any, itemIndex: number, dataRow: number) => RealGrid.ValidationError | undefined>;
onValidateRow: PropType<(grid: RealGrid.TreeView, itemIndex: number, dataRow: number, inserting: boolean, values: any[]) => RealGrid.ValidationError>;
onValidationFail: PropType<(grid: RealGrid.TreeView, itemIndex: number, column: RealGrid.GridColumn, error: RealGrid.ValidationError) => RealGrid.ValidationError>;
onColumnCheckedChanged: PropType<(grid: RealGrid.TreeView, column: RealGrid.GridColumn, checked: boolean) => void>;
onMenuItemClicked: PropType<(grid: RealGrid.TreeView, item: RealGrid.PopupMenuItem, clickData: RealGrid.ClickData) => void>;
onContextMenuPopup: PropType<(grid: RealGrid.TreeView, x: number, y: number, clickData: RealGrid.ClickData, menu: string, rightClick: boolean) => boolean | string>;
onContextMenuItemClicked: PropType<(grid: RealGrid.TreeView, item: RealGrid.PopupMenuItem, clickData: RealGrid.ClickData) => void>;
onCellButtonClicked: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, column: RealGrid.GridColumn) => void>;
onScrollToBottom: PropType<(grid: RealGrid.TreeView) => void>;
onTopIndexChanged: PropType<(grid: RealGrid.TreeView, itemIndex: number) => void>;
onTopIndexChanging: PropType<(grid: RealGrid.TreeView, currentTop: number, delta: number, focusing: boolean, adjust: boolean) => number>;
onLeftPosChanged: PropType<(grid: RealGrid.TreeView, pos: number) => void>;
onRowsDeleting: PropType<(grid: RealGrid.TreeView, rows: number[]) => boolean>;
onRowInserting: PropType<(grid: RealGrid.TreeView, itemIndex: number, dataRow: number) => boolean>;
onSelectionCleared: PropType<(grid: RealGrid.TreeView) => void>;
onSelectionChanged: PropType<(grid: RealGrid.TreeView, selection: RealGrid.Selection) => void>;
onSelectionAdded: PropType<(grid: RealGrid.TreeView, selection: RealGrid.Selection) => void>;
onSelectionEnded: PropType<(grid: RealGrid.TreeView, selection: RealGrid.Selection) => void>;
onShowEditor: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, props: any, attrs: any) => boolean>;
onShowEditCommand: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex) => boolean>;
onHideEditor: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex) => void>;
onEditChange: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, value: any) => void>;
onGetEditValue: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, editResult: Object) => void | boolean>;
onEditCommit: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, oldValue: any, newValue: any) => boolean>;
onEditCanceled: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex) => void>;
onItemEditCanceled: PropType<(grid: RealGrid.TreeView, itemIndex: number, state: string) => void>;
onItemEditCancel: PropType<(grid: RealGrid.TreeView, itemIndex: number, state: string) => boolean>;
onEditSearch: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, text: string) => void>;
onSearchCellButtonClick: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, text: string) => void>;
onCellEdited: PropType<(grid: RealGrid.TreeView, itemIndex: number, row: number, field: number) => void>;
onEditRowChanged: PropType<(grid: RealGrid.TreeView, itemIndex: number, row: number, field: number, oldValue: any, newValue: any) => void>;
onEditRowPasted: PropType<(grid: RealGrid.TreeView, itemIndex: number, row: number, fields: number[], oldValues: any[], newValues: any[]) => void>;
onRowsPasted: PropType<(grid: RealGrid.TreeView, items: number[]) => void>;
onCellPasting: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, value: any, editResult: RealGrid.EditResult) => boolean>;
onItemChecked: PropType<(grid: RealGrid.TreeView, itemIndex: number, checked: boolean) => void>;
onItemAllChecked: PropType<(grid: RealGrid.TreeView, checked: boolean) => void>;
onErrorClicked: PropType<(grid: RealGrid.TreeView, error: string) => void>;
onSorting: PropType<(grid: RealGrid.TreeView, fields: number[], directions: string[]) => boolean>;
onSortingChanged: PropType<(grid: RealGrid.TreeView) => void>;
onFiltering: PropType<(grid: RealGrid.TreeView) => boolean>;
onFilteringChanged: PropType<(grid: RealGrid.TreeView, column: RealGrid.GridColumn, filter: RealGrid.ColumnFilter, reset: boolean) => void>;
onWheel: PropType<(grid: RealGrid.TreeView, event: WheelEvent) => boolean>;
onKeyDown: PropType<(grid: RealGrid.TreeView, event: KeyboardEvent) => boolean>;
onKeyPress: PropType<(grid: RealGrid.TreeView, event: KeyboardEvent) => void>;
onKeyUp: PropType<(grid: RealGrid.TreeView, event: KeyboardEvent) => void>;
onShowTooltip: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, value: any, isEllipsis: boolean) => boolean | string>;
onShowHeaderTooltip: PropType<(grid: RealGrid.TreeView, column: RealGrid.GridColumn, value: any, layout: RealGrid.CellLayoutItem, isEllipsis: boolean) => string>;
onColumnPropertyChanged: PropType<(grid: RealGrid.TreeView, column: RealGrid.GridColumn, property: string, newValue: any, oldValue: any) => void>;
onLayoutPropertyChanged: PropType<(grid: RealGrid.TreeView, layout: RealGrid.CellLayoutItem, property: string, newValue: any, oldValue: any) => void>;
onGridActivated: PropType<(grid: RealGrid.TreeView) => void>;
onCopy: PropType<(grid: RealGrid.TreeView, selection: RealGrid.Selection | RealGrid.Selection[], event: ClipboardEvent) => boolean>;
onPaste: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, event: ClipboardEvent) => boolean>;
onPasted: PropType<(grid: RealGrid.TreeView) => void>;
onItemsChecked: PropType<(grid: RealGrid.TreeView, items: number[], checked: boolean) => void>;
onCellClicked: PropType<(grid: RealGrid.TreeView, clickData: RealGrid.ClickData) => void>;
onCellDblClicked: PropType<(grid: RealGrid.TreeView, clickData: RealGrid.ClickData) => void>;
onCellItemClicked: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, clickData: RealGrid.ClickData) => boolean>;
onCommandStackChanged: PropType<(grid: RealGrid.TreeView, undoable: boolean, redoable: boolean) => void>;
onDataLoadComplated: PropType<(grid: RealGrid.TreeView) => void>;
onLayoutExpanding: PropType<(grid: RealGrid.TreeView, layout: RealGrid.CellLayoutGroupItem) => boolean>;
onLayoutExpanded: PropType<(grid: RealGrid.TreeView, layout: RealGrid.CellLayoutGroupItem) => void>;
onLayoutCollapsing: PropType<(grid: RealGrid.TreeView, layout: RealGrid.CellLayoutGroupItem) => boolean>;
onLayoutCollapsed: PropType<(grid: RealGrid.TreeView, layout: RealGrid.CellLayoutGroupItem) => void>;
onGridFocusChanged: PropType<(grid: RealGrid.TreeView, focused: boolean, event: Event) => void>;
}, unknown, {
$dataProvider: RealGrid.DataProviderBase | null;
$gridView: RealGrid.GridBase | null;
_mountTimer: number | null;
_mountCBs: Function[];
}, {
dataProvider: {
get(): RealGrid.LocalTreeDataProvider;
set(value: RealGrid.LocalTreeDataProvider): void;
};
gridView: {
get(): RealGrid.TreeView;
set(value: RealGrid.TreeView): void;
};
}, {
addCallback(fn: Function): void;
removeCallback(fn: Function): void;
executeCB(): void;
_applyOptions(options: any): void;
_createGrid(container: HTMLDivElement, props: any): {
grid: RealGrid.TreeView;
dataProvider: RealGrid.LocalTreeDataProvider;
};
_doInitProc(grid: RealGrid.GridBase, props: any): void;
_doApplyOptions(options: any): void;
_setData(rows: any): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
disabled: BooleanConstructor;
gridProps: PropType<RealGrid.GridOptions>;
dataProps: PropType<RealGrid.DataOptions>;
locale: PropType<Partial<RealGrid.RealGridLocale>>;
autoGenerateField: BooleanConstructor;
rows: PropType<RealGrid.DataValues[]>;
rowStyleCallback: PropType<RealGrid.RowStyleCallback>;
cellStyleCallback: PropType<RealGrid.CellStyleCallback>;
layout: PropType<(string | RealGrid.CellLayoutGroupItem | RealGrid.CellLayoutColumnItem)[]>;
onInitialized: PropType<(grid: RealGrid.TreeView) => void>;
onDestroy: PropType<(grid: RealGrid.TreeView) => void>;
onCurrentChanging: PropType<(grid: RealGrid.TreeView, oldIndex: RealGrid.CellIndex, newIndex: RealGrid.CellIndex) => boolean>;
onCurrentChanged: PropType<(grid: RealGrid.TreeView, newIndex: RealGrid.CellIndex) => void>;
onCurrentRowChanged: PropType<(grid: RealGrid.TreeView, oldRow: number, newRow: number) => void>;
onValidateColumn: PropType<(grid: RealGrid.TreeView, column: RealGrid.DataColumn, inserting: boolean, value: any, itemIndex: number, dataRow: number) => RealGrid.ValidationError | undefined>;
onValidateRow: PropType<(grid: RealGrid.TreeView, itemIndex: number, dataRow: number, inserting: boolean, values: any[]) => RealGrid.ValidationError>;
onValidationFail: PropType<(grid: RealGrid.TreeView, itemIndex: number, column: RealGrid.GridColumn, error: RealGrid.ValidationError) => RealGrid.ValidationError>;
onColumnCheckedChanged: PropType<(grid: RealGrid.TreeView, column: RealGrid.GridColumn, checked: boolean) => void>;
onMenuItemClicked: PropType<(grid: RealGrid.TreeView, item: RealGrid.PopupMenuItem, clickData: RealGrid.ClickData) => void>;
onContextMenuPopup: PropType<(grid: RealGrid.TreeView, x: number, y: number, clickData: RealGrid.ClickData, menu: string, rightClick: boolean) => boolean | string>;
onContextMenuItemClicked: PropType<(grid: RealGrid.TreeView, item: RealGrid.PopupMenuItem, clickData: RealGrid.ClickData) => void>;
onCellButtonClicked: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, column: RealGrid.GridColumn) => void>;
onScrollToBottom: PropType<(grid: RealGrid.TreeView) => void>;
onTopIndexChanged: PropType<(grid: RealGrid.TreeView, itemIndex: number) => void>;
onTopIndexChanging: PropType<(grid: RealGrid.TreeView, currentTop: number, delta: number, focusing: boolean, adjust: boolean) => number>;
onLeftPosChanged: PropType<(grid: RealGrid.TreeView, pos: number) => void>;
onRowsDeleting: PropType<(grid: RealGrid.TreeView, rows: number[]) => boolean>;
onRowInserting: PropType<(grid: RealGrid.TreeView, itemIndex: number, dataRow: number) => boolean>;
onSelectionCleared: PropType<(grid: RealGrid.TreeView) => void>;
onSelectionChanged: PropType<(grid: RealGrid.TreeView, selection: RealGrid.Selection) => void>;
onSelectionAdded: PropType<(grid: RealGrid.TreeView, selection: RealGrid.Selection) => void>;
onSelectionEnded: PropType<(grid: RealGrid.TreeView, selection: RealGrid.Selection) => void>;
onShowEditor: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, props: any, attrs: any) => boolean>;
onShowEditCommand: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex) => boolean>;
onHideEditor: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex) => void>;
onEditChange: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, value: any) => void>;
onGetEditValue: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, editResult: Object) => void | boolean>;
onEditCommit: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, oldValue: any, newValue: any) => boolean>;
onEditCanceled: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex) => void>;
onItemEditCanceled: PropType<(grid: RealGrid.TreeView, itemIndex: number, state: string) => void>;
onItemEditCancel: PropType<(grid: RealGrid.TreeView, itemIndex: number, state: string) => boolean>;
onEditSearch: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, text: string) => void>;
onSearchCellButtonClick: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, text: string) => void>;
onCellEdited: PropType<(grid: RealGrid.TreeView, itemIndex: number, row: number, field: number) => void>;
onEditRowChanged: PropType<(grid: RealGrid.TreeView, itemIndex: number, row: number, field: number, oldValue: any, newValue: any) => void>;
onEditRowPasted: PropType<(grid: RealGrid.TreeView, itemIndex: number, row: number, fields: number[], oldValues: any[], newValues: any[]) => void>;
onRowsPasted: PropType<(grid: RealGrid.TreeView, items: number[]) => void>;
onCellPasting: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, value: any, editResult: RealGrid.EditResult) => boolean>;
onItemChecked: PropType<(grid: RealGrid.TreeView, itemIndex: number, checked: boolean) => void>;
onItemAllChecked: PropType<(grid: RealGrid.TreeView, checked: boolean) => void>;
onErrorClicked: PropType<(grid: RealGrid.TreeView, error: string) => void>;
onSorting: PropType<(grid: RealGrid.TreeView, fields: number[], directions: string[]) => boolean>;
onSortingChanged: PropType<(grid: RealGrid.TreeView) => void>;
onFiltering: PropType<(grid: RealGrid.TreeView) => boolean>;
onFilteringChanged: PropType<(grid: RealGrid.TreeView, column: RealGrid.GridColumn, filter: RealGrid.ColumnFilter, reset: boolean) => void>;
onWheel: PropType<(grid: RealGrid.TreeView, event: WheelEvent) => boolean>;
onKeyDown: PropType<(grid: RealGrid.TreeView, event: KeyboardEvent) => boolean>;
onKeyPress: PropType<(grid: RealGrid.TreeView, event: KeyboardEvent) => void>;
onKeyUp: PropType<(grid: RealGrid.TreeView, event: KeyboardEvent) => void>;
onShowTooltip: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, value: any, isEllipsis: boolean) => boolean | string>;
onShowHeaderTooltip: PropType<(grid: RealGrid.TreeView, column: RealGrid.GridColumn, value: any, layout: RealGrid.CellLayoutItem, isEllipsis: boolean) => string>;
onColumnPropertyChanged: PropType<(grid: RealGrid.TreeView, column: RealGrid.GridColumn, property: string, newValue: any, oldValue: any) => void>;
onLayoutPropertyChanged: PropType<(grid: RealGrid.TreeView, layout: RealGrid.CellLayoutItem, property: string, newValue: any, oldValue: any) => void>;
onGridActivated: PropType<(grid: RealGrid.TreeView) => void>;
onCopy: PropType<(grid: RealGrid.TreeView, selection: RealGrid.Selection | RealGrid.Selection[], event: ClipboardEvent) => boolean>;
onPaste: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, event: ClipboardEvent) => boolean>;
onPasted: PropType<(grid: RealGrid.TreeView) => void>;
onItemsChecked: PropType<(grid: RealGrid.TreeView, items: number[], checked: boolean) => void>;
onCellClicked: PropType<(grid: RealGrid.TreeView, clickData: RealGrid.ClickData) => void>;
onCellDblClicked: PropType<(grid: RealGrid.TreeView, clickData: RealGrid.ClickData) => void>;
onCellItemClicked: PropType<(grid: RealGrid.TreeView, index: RealGrid.CellIndex, clickData: RealGrid.ClickData) => boolean>;
onCommandStackChanged: PropType<(grid: RealGrid.TreeView, undoable: boolean, redoable: boolean) => void>;
onDataLoadComplated: PropType<(grid: RealGrid.TreeView) => void>;
onLayoutExpanding: PropType<(grid: RealGrid.TreeView, layout: RealGrid.CellLayoutGroupItem) => boolean>;
onLayoutExpanded: PropType<(grid: RealGrid.TreeView, layout: RealGrid.CellLayoutGroupItem) => void>;
onLayoutCollapsing: PropType<(grid: RealGrid.TreeView, layout: RealGrid.CellLayoutGroupItem) => boolean>;
onLayoutCollapsed: PropType<(grid: RealGrid.TreeView, layout: RealGrid.CellLayoutGroupItem) => void>;
onGridFocusChanged: PropType<(grid: RealGrid.TreeView, focused: boolean, event: Event) => void>;
}>>, {
autoGenerateField: boolean;
disabled: boolean;
}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
treeOptions: PropType<RealGrid.TreeOptions>;
treeField: StringConstructor;
needSorting: BooleanConstructor;
childrenField: StringConstructor;
iconField: StringConstructor;
json: PropType<any>;
rowsProp: StringConstructor;
childrenProp: StringConstructor;
iconProp: StringConstructor;
onTreeItemExpanding: PropType<(tree: RealGrid.TreeView, itemIndex: number, rowId: number) => boolean>;
onTreeItemExpanded: PropType<(tree: RealGrid.TreeView, itemIndex: number, rowId: number) => void>;
onTreeItemCollapsing: PropType<(tree: RealGrid.TreeView, itemIndex: number, rowId: number) => void>;
onTreeItemCollapsed: PropType<(tree: RealGrid.TreeView, itemIndex: number, rowId: number) => void>;
onTreeItemChanged: PropType<(tree: RealGrid.TreeView, itemIndex: number, rowId: number) => void>;
onRowCountChanged: PropType<(provider: RealGrid.LocalTreeDataProvider, newCount: number) => void>;
onRowAdding: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, index: number, child: any) => boolean>;
onRowAdded: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number) => void>;
onRowsAdded: PropType<(provider: RealGrid.LocalTreeDataProvider, parent: number, rows: number[]) => void>;
onRowDeleting: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number) => boolean>;
onRowDeleted: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number) => void>;
onRowsDeleted: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[]) => void>;
onRowUpdating: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, oldValues: RealGrid.RowValues, newValues: RealGrid.RowValues) => boolean>;
onRowUpdated: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number) => void>;
onRowsUpdating: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[]) => boolean>;
onRowsUpdated: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[]) => void>;
onValueChanged: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, field: number) => void>;
onDataChanged: PropType<(provider: RealGrid.LocalTreeDataProvider) => void>;
onRowStateChanged: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number) => void>;
onRowStatesChanged: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[]) => void>;
onRowSiblingMoving: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, offset: number) => boolean>;
onRowSiblingMoved: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, offset: number) => void>;
onRowsSiblingMoving: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[], offset: number) => boolean>;
onRowsSiblingMoved: PropType<(provider: RealGrid.LocalTreeDataProvider, rows: number[], offset: number) => void>;
onRowParentChanging: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, parent: number, index: number) => boolean>;
onRowParentChanged: PropType<(provider: RealGrid.LocalTreeDataProvider, row: number, parent: number, index: number) => void>;
}>>, {
needSorting: boolean;
}>;

export declare type RealTreeVue = Omit<InstanceType<typeof RealTreeVue>, Omits>;

export declare const RGCheckBar: DefineComponent<ComponentPropsOptions & IRealGridCheckBar, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridCheckBar>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridCheckBar>>, {
$model?: any;
} | {}>;

export declare type RGCheckBar = Omit<InstanceType<typeof RGCheckBar>, Omits>;

export declare const RGDataColumn: DefineComponent<ComponentPropsOptions & IRGDataColumn, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
unmountCB(grid: RealGrid.GridBase): void;
_doWatchAttrs(diff: ConfigObject): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRGDataColumn>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRGDataColumn>>, {
$model?: any;
defaultValue?: any;
tag?: any;
} | {}>;

export declare type RGDataColumn = Omit<InstanceType<typeof RGDataColumn>, Omits>;

export declare const RGDataField: DefineComponent<ComponentPropsOptions & IRealGridDataField, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
unmountDB(grid: RealGrid.GridBase): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridDataField>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridDataField>>, {
$model?: any;
defaultValue?: any;
nullValue?: any;
} | {}>;

export declare type RGDataField = Omit<InstanceType<typeof RGDataField>, Omits>;

export declare const RGFilterPanel: DefineComponent<ComponentPropsOptions & IRealGridFilterPanel, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridFilterPanel>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridFilterPanel>>, {
$model?: any;
} | {}>;

export declare type RGFilterPanel = Omit<InstanceType<typeof RGFilterPanel>, Omits>;

export declare const RGFooter: DefineComponent<ComponentPropsOptions & IRealGridFooters, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridFooters>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridFooters>>, {
$model?: any;
} | {}>;

export declare type RGFooter = Omit<InstanceType<typeof RGFooter>, Omits>;

export declare const RGFooters: DefineComponent<ComponentPropsOptions & IRealGridFooter, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridFooter>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridFooter>>, {
$model?: any;
value?: any;
} | {}>;

export declare type RGFooters = Omit<InstanceType<typeof RGFooters>, Omits>;

export declare const RGGroupPanel: DefineComponent<ComponentPropsOptions & IRealGridGroupPanel, unknown, {}, {}, {
mountCB(grid: RealGrid.GridView): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridGroupPanel>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridGroupPanel>>, {
$model?: any;
} | {}>;

export declare type RGGroupPanel = Omit<InstanceType<typeof RGGroupPanel>, Omits>;

export declare const RGHeader: DefineComponent<ComponentPropsOptions & IRealGridHeader, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridHeader>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridHeader>>, {
$model?: any;
} | {}>;

export declare type RGHeader = Omit<InstanceType<typeof RGHeader>, Omits>;

export declare const RGHeaderSummaries: DefineComponent<ComponentPropsOptions & IRealGridheaderSummaries, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridheaderSummaries>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridheaderSummaries>>, {
$model?: any;
} | {}>;

export declare type RGHeaderSummaries = Omit<InstanceType<typeof RGHeaderSummaries>, Omits>;

export declare const RGHeaderSummary: DefineComponent<ComponentPropsOptions & IRealGridHeaderSummary, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridHeaderSummary>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridHeaderSummary>>, {
$model?: any;
value?: any;
} | {}>;

export declare type RGHeaderSummary = Omit<InstanceType<typeof RGHeaderSummary>, Omits>;

export declare const RGLiteralColumn: DefineComponent<ComponentPropsOptions & IRealGridLiteralColumn, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
unmountCB(grid: RealGrid.GridBase): void;
_doWatchAttrs(diff: ConfigObject): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridLiteralColumn>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridLiteralColumn>>, {
$model?: any;
} | {}>;

export declare type RGLiteralColumn = Omit<InstanceType<typeof RGLiteralColumn>, Omits>;

export declare const RGRowIndicator: DefineComponent<ComponentPropsOptions & IRealGridRowIndicator, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridRowIndicator>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridRowIndicator>>, {
$model?: any;
} | {}>;

export declare type RGRowIndicator = Omit<InstanceType<typeof RGRowIndicator>, Omits>;

export declare const RGSeriesColumn: DefineComponent<ComponentPropsOptions & IRealGridSeriesColumn, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
unmountCB(grid: RealGrid.GridBase): void;
_doWatchAttrs(diff: ConfigObject): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridSeriesColumn>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridSeriesColumn>>, {
$model?: any;
} | {}>;

export declare type RGSeriesColumn = Omit<InstanceType<typeof RGSeriesColumn>, Omits>;

export declare const RGStateBar: DefineComponent<ComponentPropsOptions & IRealGridStateBar, unknown, {}, {}, {
mountCB(grid: RealGrid.GridBase): void;
}, ComponentOptionsMixin, DefineComponent<ComponentPropsOptions & IComponentBase, unknown, {
$model: IModel | null;
$oldValue: any | null;
}, {}, {
mountCB(): void;
unmountCB(): void;
_doWatchAttrs(diff: RealGrid.ConfigObject): void;
}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IComponentBase>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IComponentBase>>, {
$model?: any;
} | {}>, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<string[] & IRealGridStateBar>> | Readonly<ExtractPropTypes<ComponentObjectPropsOptions<    {
[x: string]: unknown;
}> & IRealGridStateBar>>, {
$model?: any;
} | {}>;

export declare type RGStateBar = Omit<InstanceType<typeof RGStateBar>, Omits>;

export { }
